"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fetch-cookie";
exports.ids = ["vendor-chunks/fetch-cookie"];
exports.modules = {

/***/ "(ssr)/./node_modules/fetch-cookie/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/fetch-cookie/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var tough_cookie__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ fetchCookie)\n/* harmony export */ });\n/* harmony import */ var tough_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tough-cookie */ \"(ssr)/./node_modules/tough-cookie/dist/cookie/index.js\");\n/* harmony import */ var set_cookie_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! set-cookie-parser */ \"(ssr)/./node_modules/set-cookie-parser/lib/set-cookie.js\");\n\n\nfunction isDomainOrSubdomain(destination, original) {\n  const orig = new URL(original).hostname;\n  const dest = new URL(destination).hostname;\n  return orig === dest || orig.endsWith(`.${dest}`);\n}\nconst referrerPolicy = /* @__PURE__ */ new Set([\n  \"\",\n  \"no-referrer\",\n  \"no-referrer-when-downgrade\",\n  \"same-origin\",\n  \"origin\",\n  \"strict-origin\",\n  \"origin-when-cross-origin\",\n  \"strict-origin-when-cross-origin\",\n  \"unsafe-url\"\n]);\nfunction parseReferrerPolicy(policyHeader) {\n  const policyTokens = policyHeader.split(/[,\\s]+/);\n  let policy = \"\";\n  for (const token of policyTokens) {\n    if (token !== \"\" && referrerPolicy.has(token)) {\n      policy = token;\n    }\n  }\n  return policy;\n}\nfunction doNothing(init, name) {\n}\nfunction callDeleteMethod(init, name) {\n  init.headers.delete(name);\n}\nfunction deleteFromObject(init, name) {\n  const headers = init.headers;\n  for (const key of Object.keys(headers)) {\n    if (key.toLowerCase() === name) {\n      delete headers[key];\n    }\n  }\n}\nfunction identifyDeleteHeader(init) {\n  if (init.headers == null) {\n    return doNothing;\n  }\n  if (typeof init.headers.delete === \"function\") {\n    return callDeleteMethod;\n  }\n  return deleteFromObject;\n}\nconst redirectStatus = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);\nfunction isRedirect(status) {\n  return redirectStatus.has(status);\n}\nasync function handleRedirect(fetchImpl, init, response) {\n  switch (init.redirect ?? \"follow\") {\n    case \"error\":\n      throw new TypeError(`URI requested responded with a redirect and redirect mode is set to error: ${response.url}`);\n    case \"manual\":\n      return response;\n    case \"follow\":\n      break;\n    default:\n      throw new TypeError(`Invalid redirect option: ${init.redirect}`);\n  }\n  const locationUrl = response.headers.get(\"location\");\n  if (locationUrl === null) {\n    return response;\n  }\n  const requestUrl = response.url;\n  const redirectUrl = new URL(locationUrl, requestUrl).toString();\n  const redirectCount = init.redirectCount ?? 0;\n  const maxRedirect = init.maxRedirect ?? 20;\n  if (redirectCount >= maxRedirect) {\n    throw new TypeError(`Reached maximum redirect of ${maxRedirect} for URL: ${requestUrl}`);\n  }\n  init = {\n    ...init,\n    redirectCount: redirectCount + 1\n  };\n  const deleteHeader = identifyDeleteHeader(init);\n  if (!isDomainOrSubdomain(requestUrl, redirectUrl)) {\n    for (const name of [\"authorization\", \"www-authenticate\", \"cookie\", \"cookie2\"]) {\n      deleteHeader(init, name);\n    }\n  }\n  const maybeNodeStreamBody = init.body;\n  const maybeStreamBody = init.body;\n  if (response.status !== 303 && init.body != null && (typeof maybeNodeStreamBody.pipe === \"function\" || typeof maybeStreamBody.pipeTo === \"function\")) {\n    throw new TypeError(\"Cannot follow redirect with body being a readable stream\");\n  }\n  if (response.status === 303 || (response.status === 301 || response.status === 302) && init.method === \"POST\") {\n    init.method = \"GET\";\n    init.body = void 0;\n    deleteHeader(init, \"content-length\");\n  }\n  if (response.headers.has(\"referrer-policy\")) {\n    init.referrerPolicy = parseReferrerPolicy(response.headers.get(\"referrer-policy\"));\n  }\n  deleteHeader(init, \"host\");\n  return await fetchImpl(redirectUrl, init);\n}\nfunction addCookiesToRequest(input, init, cookie) {\n  if (cookie === \"\") {\n    return init;\n  }\n  const maybeRequest = input;\n  const maybeHeaders = init.headers;\n  if (maybeRequest.headers && typeof maybeRequest.headers.append === \"function\") {\n    maybeRequest.headers.append(\"cookie\", cookie);\n  } else if (maybeHeaders && typeof maybeHeaders.append === \"function\") {\n    maybeHeaders.append(\"cookie\", cookie);\n  } else if (Array.isArray(init.headers)) {\n    const headers = [...init.headers];\n    const cookieHeaderIndex = headers.findIndex((header) => header[0].toLowerCase() === \"cookie\");\n    if (cookieHeaderIndex === -1) {\n      headers.push([\"cookie\", cookie]);\n    } else {\n      headers[cookieHeaderIndex] = [\"cookie\", cookie];\n    }\n    init = { ...init, headers };\n  } else {\n    init = { ...init, headers: { ...init.headers, cookie } };\n  }\n  return init;\n}\nfunction getCookiesFromResponse(response) {\n  const maybeNodeFetchHeaders = response.headers;\n  if (typeof maybeNodeFetchHeaders.getAll === \"function\") {\n    return maybeNodeFetchHeaders.getAll(\"set-cookie\");\n  }\n  if (typeof maybeNodeFetchHeaders.raw === \"function\") {\n    const headers = maybeNodeFetchHeaders.raw();\n    if (Array.isArray(headers[\"set-cookie\"])) {\n      return headers[\"set-cookie\"];\n    }\n    return [];\n  }\n  const cookieString = response.headers.get(\"set-cookie\");\n  if (cookieString !== null) {\n    return (0,set_cookie_parser__WEBPACK_IMPORTED_MODULE_1__.splitCookiesString)(cookieString);\n  }\n  return [];\n}\nfunction fetchCookie(fetch, jar, ignoreError = true) {\n  const actualFetch = fetch;\n  const actualJar = jar ?? new tough_cookie__WEBPACK_IMPORTED_MODULE_0__.CookieJar();\n  async function fetchCookieWrapper(input, init) {\n    const originalInit = init ?? {};\n    init = { ...init, redirect: \"manual\" };\n    const requestUrl = typeof input === \"string\" ? input : \"href\" in input ? input.href : input.url;\n    const cookie = await actualJar.getCookieString(requestUrl);\n    init = addCookiesToRequest(input, init, cookie);\n    const response = await actualFetch(input, init);\n    const cookies = getCookiesFromResponse(response);\n    await Promise.all(cookies.map(async (cookie2) => await actualJar.setCookie(cookie2, response.url, { ignoreError })));\n    if ((init.redirectCount ?? 0) > 0) {\n      Object.defineProperty(response, \"redirected\", { value: true });\n    }\n    if (!isRedirect(response.status)) {\n      return response;\n    }\n    return await handleRedirect(fetchCookieWrapper, originalInit, response);\n  }\n  fetchCookieWrapper.toughCookie = /*#__PURE__*/ (tough_cookie__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (tough_cookie__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(tough_cookie__WEBPACK_IMPORTED_MODULE_0__, 2)));\n  fetchCookieWrapper.cookieJar = actualJar;\n  return fetchCookieWrapper;\n}\nfetchCookie.toughCookie = /*#__PURE__*/ (tough_cookie__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (tough_cookie__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(tough_cookie__WEBPACK_IMPORTED_MODULE_0__, 2)));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmV0Y2gtY29va2llL2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNDO0FBQ2lCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxLQUFLO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdHQUF3RyxhQUFhO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsY0FBYztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxhQUFhLFdBQVcsV0FBVztBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsSUFBSTtBQUNKLGFBQWEsb0JBQW9CO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFFQUFrQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLG1EQUFlO0FBQzlDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdHQUF3RyxhQUFhO0FBQ3JIO0FBQ0Esc0RBQXNELGFBQWE7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDhNQUFLO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw4TUFBSztBQUc3QiIsInNvdXJjZXMiOlsiL2hvbWUvd2lsZnJpZC1rL3Byb2plY3RzL29ubHlkdXN0L2NoYWluZXZlbnRzLWZyb250ZW5kL25vZGVfbW9kdWxlcy9mZXRjaC1jb29raWUvZXNtL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRvdWdoIGZyb20gXCJ0b3VnaC1jb29raWVcIjtcbmltcG9ydCB7IHNwbGl0Q29va2llc1N0cmluZyB9IGZyb20gXCJzZXQtY29va2llLXBhcnNlclwiO1xuZnVuY3Rpb24gaXNEb21haW5PclN1YmRvbWFpbihkZXN0aW5hdGlvbiwgb3JpZ2luYWwpIHtcbiAgY29uc3Qgb3JpZyA9IG5ldyBVUkwob3JpZ2luYWwpLmhvc3RuYW1lO1xuICBjb25zdCBkZXN0ID0gbmV3IFVSTChkZXN0aW5hdGlvbikuaG9zdG5hbWU7XG4gIHJldHVybiBvcmlnID09PSBkZXN0IHx8IG9yaWcuZW5kc1dpdGgoYC4ke2Rlc3R9YCk7XG59XG5jb25zdCByZWZlcnJlclBvbGljeSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgXCJcIixcbiAgXCJuby1yZWZlcnJlclwiLFxuICBcIm5vLXJlZmVycmVyLXdoZW4tZG93bmdyYWRlXCIsXG4gIFwic2FtZS1vcmlnaW5cIixcbiAgXCJvcmlnaW5cIixcbiAgXCJzdHJpY3Qtb3JpZ2luXCIsXG4gIFwib3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luXCIsXG4gIFwic3RyaWN0LW9yaWdpbi13aGVuLWNyb3NzLW9yaWdpblwiLFxuICBcInVuc2FmZS11cmxcIlxuXSk7XG5mdW5jdGlvbiBwYXJzZVJlZmVycmVyUG9saWN5KHBvbGljeUhlYWRlcikge1xuICBjb25zdCBwb2xpY3lUb2tlbnMgPSBwb2xpY3lIZWFkZXIuc3BsaXQoL1ssXFxzXSsvKTtcbiAgbGV0IHBvbGljeSA9IFwiXCI7XG4gIGZvciAoY29uc3QgdG9rZW4gb2YgcG9saWN5VG9rZW5zKSB7XG4gICAgaWYgKHRva2VuICE9PSBcIlwiICYmIHJlZmVycmVyUG9saWN5Lmhhcyh0b2tlbikpIHtcbiAgICAgIHBvbGljeSA9IHRva2VuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcG9saWN5O1xufVxuZnVuY3Rpb24gZG9Ob3RoaW5nKGluaXQsIG5hbWUpIHtcbn1cbmZ1bmN0aW9uIGNhbGxEZWxldGVNZXRob2QoaW5pdCwgbmFtZSkge1xuICBpbml0LmhlYWRlcnMuZGVsZXRlKG5hbWUpO1xufVxuZnVuY3Rpb24gZGVsZXRlRnJvbU9iamVjdChpbml0LCBuYW1lKSB7XG4gIGNvbnN0IGhlYWRlcnMgPSBpbml0LmhlYWRlcnM7XG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGhlYWRlcnMpKSB7XG4gICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBuYW1lKSB7XG4gICAgICBkZWxldGUgaGVhZGVyc1trZXldO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gaWRlbnRpZnlEZWxldGVIZWFkZXIoaW5pdCkge1xuICBpZiAoaW5pdC5oZWFkZXJzID09IG51bGwpIHtcbiAgICByZXR1cm4gZG9Ob3RoaW5nO1xuICB9XG4gIGlmICh0eXBlb2YgaW5pdC5oZWFkZXJzLmRlbGV0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGNhbGxEZWxldGVNZXRob2Q7XG4gIH1cbiAgcmV0dXJuIGRlbGV0ZUZyb21PYmplY3Q7XG59XG5jb25zdCByZWRpcmVjdFN0YXR1cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0pO1xuZnVuY3Rpb24gaXNSZWRpcmVjdChzdGF0dXMpIHtcbiAgcmV0dXJuIHJlZGlyZWN0U3RhdHVzLmhhcyhzdGF0dXMpO1xufVxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUmVkaXJlY3QoZmV0Y2hJbXBsLCBpbml0LCByZXNwb25zZSkge1xuICBzd2l0Y2ggKGluaXQucmVkaXJlY3QgPz8gXCJmb2xsb3dcIikge1xuICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVVJJIHJlcXVlc3RlZCByZXNwb25kZWQgd2l0aCBhIHJlZGlyZWN0IGFuZCByZWRpcmVjdCBtb2RlIGlzIHNldCB0byBlcnJvcjogJHtyZXNwb25zZS51cmx9YCk7XG4gICAgY2FzZSBcIm1hbnVhbFwiOlxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIGNhc2UgXCJmb2xsb3dcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogJHtpbml0LnJlZGlyZWN0fWApO1xuICB9XG4gIGNvbnN0IGxvY2F0aW9uVXJsID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJsb2NhdGlvblwiKTtcbiAgaWYgKGxvY2F0aW9uVXJsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIGNvbnN0IHJlcXVlc3RVcmwgPSByZXNwb25zZS51cmw7XG4gIGNvbnN0IHJlZGlyZWN0VXJsID0gbmV3IFVSTChsb2NhdGlvblVybCwgcmVxdWVzdFVybCkudG9TdHJpbmcoKTtcbiAgY29uc3QgcmVkaXJlY3RDb3VudCA9IGluaXQucmVkaXJlY3RDb3VudCA/PyAwO1xuICBjb25zdCBtYXhSZWRpcmVjdCA9IGluaXQubWF4UmVkaXJlY3QgPz8gMjA7XG4gIGlmIChyZWRpcmVjdENvdW50ID49IG1heFJlZGlyZWN0KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgUmVhY2hlZCBtYXhpbXVtIHJlZGlyZWN0IG9mICR7bWF4UmVkaXJlY3R9IGZvciBVUkw6ICR7cmVxdWVzdFVybH1gKTtcbiAgfVxuICBpbml0ID0ge1xuICAgIC4uLmluaXQsXG4gICAgcmVkaXJlY3RDb3VudDogcmVkaXJlY3RDb3VudCArIDFcbiAgfTtcbiAgY29uc3QgZGVsZXRlSGVhZGVyID0gaWRlbnRpZnlEZWxldGVIZWFkZXIoaW5pdCk7XG4gIGlmICghaXNEb21haW5PclN1YmRvbWFpbihyZXF1ZXN0VXJsLCByZWRpcmVjdFVybCkpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgW1wiYXV0aG9yaXphdGlvblwiLCBcInd3dy1hdXRoZW50aWNhdGVcIiwgXCJjb29raWVcIiwgXCJjb29raWUyXCJdKSB7XG4gICAgICBkZWxldGVIZWFkZXIoaW5pdCwgbmFtZSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IG1heWJlTm9kZVN0cmVhbUJvZHkgPSBpbml0LmJvZHk7XG4gIGNvbnN0IG1heWJlU3RyZWFtQm9keSA9IGluaXQuYm9keTtcbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMzAzICYmIGluaXQuYm9keSAhPSBudWxsICYmICh0eXBlb2YgbWF5YmVOb2RlU3RyZWFtQm9keS5waXBlID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIG1heWJlU3RyZWFtQm9keS5waXBlVG8gPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGZvbGxvdyByZWRpcmVjdCB3aXRoIGJvZHkgYmVpbmcgYSByZWFkYWJsZSBzdHJlYW1cIik7XG4gIH1cbiAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMzAzIHx8IChyZXNwb25zZS5zdGF0dXMgPT09IDMwMSB8fCByZXNwb25zZS5zdGF0dXMgPT09IDMwMikgJiYgaW5pdC5tZXRob2QgPT09IFwiUE9TVFwiKSB7XG4gICAgaW5pdC5tZXRob2QgPSBcIkdFVFwiO1xuICAgIGluaXQuYm9keSA9IHZvaWQgMDtcbiAgICBkZWxldGVIZWFkZXIoaW5pdCwgXCJjb250ZW50LWxlbmd0aFwiKTtcbiAgfVxuICBpZiAocmVzcG9uc2UuaGVhZGVycy5oYXMoXCJyZWZlcnJlci1wb2xpY3lcIikpIHtcbiAgICBpbml0LnJlZmVycmVyUG9saWN5ID0gcGFyc2VSZWZlcnJlclBvbGljeShyZXNwb25zZS5oZWFkZXJzLmdldChcInJlZmVycmVyLXBvbGljeVwiKSk7XG4gIH1cbiAgZGVsZXRlSGVhZGVyKGluaXQsIFwiaG9zdFwiKTtcbiAgcmV0dXJuIGF3YWl0IGZldGNoSW1wbChyZWRpcmVjdFVybCwgaW5pdCk7XG59XG5mdW5jdGlvbiBhZGRDb29raWVzVG9SZXF1ZXN0KGlucHV0LCBpbml0LCBjb29raWUpIHtcbiAgaWYgKGNvb2tpZSA9PT0gXCJcIikge1xuICAgIHJldHVybiBpbml0O1xuICB9XG4gIGNvbnN0IG1heWJlUmVxdWVzdCA9IGlucHV0O1xuICBjb25zdCBtYXliZUhlYWRlcnMgPSBpbml0LmhlYWRlcnM7XG4gIGlmIChtYXliZVJlcXVlc3QuaGVhZGVycyAmJiB0eXBlb2YgbWF5YmVSZXF1ZXN0LmhlYWRlcnMuYXBwZW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBtYXliZVJlcXVlc3QuaGVhZGVycy5hcHBlbmQoXCJjb29raWVcIiwgY29va2llKTtcbiAgfSBlbHNlIGlmIChtYXliZUhlYWRlcnMgJiYgdHlwZW9mIG1heWJlSGVhZGVycy5hcHBlbmQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIG1heWJlSGVhZGVycy5hcHBlbmQoXCJjb29raWVcIiwgY29va2llKTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGluaXQuaGVhZGVycykpIHtcbiAgICBjb25zdCBoZWFkZXJzID0gWy4uLmluaXQuaGVhZGVyc107XG4gICAgY29uc3QgY29va2llSGVhZGVySW5kZXggPSBoZWFkZXJzLmZpbmRJbmRleCgoaGVhZGVyKSA9PiBoZWFkZXJbMF0udG9Mb3dlckNhc2UoKSA9PT0gXCJjb29raWVcIik7XG4gICAgaWYgKGNvb2tpZUhlYWRlckluZGV4ID09PSAtMSkge1xuICAgICAgaGVhZGVycy5wdXNoKFtcImNvb2tpZVwiLCBjb29raWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyc1tjb29raWVIZWFkZXJJbmRleF0gPSBbXCJjb29raWVcIiwgY29va2llXTtcbiAgICB9XG4gICAgaW5pdCA9IHsgLi4uaW5pdCwgaGVhZGVycyB9O1xuICB9IGVsc2Uge1xuICAgIGluaXQgPSB7IC4uLmluaXQsIGhlYWRlcnM6IHsgLi4uaW5pdC5oZWFkZXJzLCBjb29raWUgfSB9O1xuICB9XG4gIHJldHVybiBpbml0O1xufVxuZnVuY3Rpb24gZ2V0Q29va2llc0Zyb21SZXNwb25zZShyZXNwb25zZSkge1xuICBjb25zdCBtYXliZU5vZGVGZXRjaEhlYWRlcnMgPSByZXNwb25zZS5oZWFkZXJzO1xuICBpZiAodHlwZW9mIG1heWJlTm9kZUZldGNoSGVhZGVycy5nZXRBbGwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBtYXliZU5vZGVGZXRjaEhlYWRlcnMuZ2V0QWxsKFwic2V0LWNvb2tpZVwiKTtcbiAgfVxuICBpZiAodHlwZW9mIG1heWJlTm9kZUZldGNoSGVhZGVycy5yYXcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBtYXliZU5vZGVGZXRjaEhlYWRlcnMucmF3KCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyc1tcInNldC1jb29raWVcIl0pKSB7XG4gICAgICByZXR1cm4gaGVhZGVyc1tcInNldC1jb29raWVcIl07XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBjb29raWVTdHJpbmcgPSByZXNwb25zZS5oZWFkZXJzLmdldChcInNldC1jb29raWVcIik7XG4gIGlmIChjb29raWVTdHJpbmcgIT09IG51bGwpIHtcbiAgICByZXR1cm4gc3BsaXRDb29raWVzU3RyaW5nKGNvb2tpZVN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuZnVuY3Rpb24gZmV0Y2hDb29raWUoZmV0Y2gsIGphciwgaWdub3JlRXJyb3IgPSB0cnVlKSB7XG4gIGNvbnN0IGFjdHVhbEZldGNoID0gZmV0Y2g7XG4gIGNvbnN0IGFjdHVhbEphciA9IGphciA/PyBuZXcgdG91Z2guQ29va2llSmFyKCk7XG4gIGFzeW5jIGZ1bmN0aW9uIGZldGNoQ29va2llV3JhcHBlcihpbnB1dCwgaW5pdCkge1xuICAgIGNvbnN0IG9yaWdpbmFsSW5pdCA9IGluaXQgPz8ge307XG4gICAgaW5pdCA9IHsgLi4uaW5pdCwgcmVkaXJlY3Q6IFwibWFudWFsXCIgfTtcbiAgICBjb25zdCByZXF1ZXN0VXJsID0gdHlwZW9mIGlucHV0ID09PSBcInN0cmluZ1wiID8gaW5wdXQgOiBcImhyZWZcIiBpbiBpbnB1dCA/IGlucHV0LmhyZWYgOiBpbnB1dC51cmw7XG4gICAgY29uc3QgY29va2llID0gYXdhaXQgYWN0dWFsSmFyLmdldENvb2tpZVN0cmluZyhyZXF1ZXN0VXJsKTtcbiAgICBpbml0ID0gYWRkQ29va2llc1RvUmVxdWVzdChpbnB1dCwgaW5pdCwgY29va2llKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFjdHVhbEZldGNoKGlucHV0LCBpbml0KTtcbiAgICBjb25zdCBjb29raWVzID0gZ2V0Q29va2llc0Zyb21SZXNwb25zZShyZXNwb25zZSk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoY29va2llcy5tYXAoYXN5bmMgKGNvb2tpZTIpID0+IGF3YWl0IGFjdHVhbEphci5zZXRDb29raWUoY29va2llMiwgcmVzcG9uc2UudXJsLCB7IGlnbm9yZUVycm9yIH0pKSk7XG4gICAgaWYgKChpbml0LnJlZGlyZWN0Q291bnQgPz8gMCkgPiAwKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UsIFwicmVkaXJlY3RlZFwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIH1cbiAgICBpZiAoIWlzUmVkaXJlY3QocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgaGFuZGxlUmVkaXJlY3QoZmV0Y2hDb29raWVXcmFwcGVyLCBvcmlnaW5hbEluaXQsIHJlc3BvbnNlKTtcbiAgfVxuICBmZXRjaENvb2tpZVdyYXBwZXIudG91Z2hDb29raWUgPSB0b3VnaDtcbiAgZmV0Y2hDb29raWVXcmFwcGVyLmNvb2tpZUphciA9IGFjdHVhbEphcjtcbiAgcmV0dXJuIGZldGNoQ29va2llV3JhcHBlcjtcbn1cbmZldGNoQ29va2llLnRvdWdoQ29va2llID0gdG91Z2g7XG5leHBvcnQge1xuICBmZXRjaENvb2tpZSBhcyBkZWZhdWx0XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fetch-cookie/esm/index.js\n");

/***/ })

};
;