"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/starknet";
exports.ids = ["vendor-chunks/starknet"];
exports.modules = {

/***/ "(ssr)/./node_modules/starknet/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/starknet/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Account: () => (/* binding */ Account),\n/* harmony export */   AccountInterface: () => (/* binding */ AccountInterface),\n/* harmony export */   BlockStatus: () => (/* binding */ BlockStatus),\n/* harmony export */   BlockTag: () => (/* binding */ BlockTag),\n/* harmony export */   CairoCustomEnum: () => (/* binding */ CairoCustomEnum),\n/* harmony export */   CairoOption: () => (/* binding */ CairoOption),\n/* harmony export */   CairoOptionVariant: () => (/* binding */ CairoOptionVariant),\n/* harmony export */   CairoResult: () => (/* binding */ CairoResult),\n/* harmony export */   CairoResultVariant: () => (/* binding */ CairoResultVariant),\n/* harmony export */   CairoUint256: () => (/* binding */ CairoUint256),\n/* harmony export */   CairoUint512: () => (/* binding */ CairoUint512),\n/* harmony export */   CallData: () => (/* binding */ CallData),\n/* harmony export */   Contract: () => (/* binding */ Contract),\n/* harmony export */   ContractFactory: () => (/* binding */ ContractFactory),\n/* harmony export */   ContractInterface: () => (/* binding */ ContractInterface),\n/* harmony export */   CustomError: () => (/* binding */ CustomError),\n/* harmony export */   EntryPointType: () => (/* binding */ EntryPointType),\n/* harmony export */   EthSigner: () => (/* binding */ EthSigner),\n/* harmony export */   GatewayError: () => (/* binding */ GatewayError),\n/* harmony export */   HttpError: () => (/* binding */ HttpError),\n/* harmony export */   LibraryError: () => (/* binding */ LibraryError),\n/* harmony export */   Literal: () => (/* binding */ Literal),\n/* harmony export */   Provider: () => (/* binding */ RpcProvider2),\n/* harmony export */   ProviderInterface: () => (/* binding */ ProviderInterface),\n/* harmony export */   RPC: () => (/* binding */ api_exports),\n/* harmony export */   RPC06: () => (/* binding */ rpc_0_6_exports),\n/* harmony export */   RPC07: () => (/* binding */ rpc_0_7_exports),\n/* harmony export */   RPCResponseParser: () => (/* binding */ RPCResponseParser),\n/* harmony export */   ReceiptTx: () => (/* binding */ ReceiptTx),\n/* harmony export */   ResponseParser: () => (/* binding */ ResponseParser),\n/* harmony export */   RpcChannel: () => (/* binding */ RpcChannel2),\n/* harmony export */   RpcProvider: () => (/* binding */ RpcProvider2),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   SignerInterface: () => (/* binding */ SignerInterface),\n/* harmony export */   TransactionExecutionStatus: () => (/* binding */ TransactionExecutionStatus),\n/* harmony export */   TransactionFinalityStatus: () => (/* binding */ TransactionFinalityStatus),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType),\n/* harmony export */   TypedDataRevision: () => (/* reexport safe */ starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision),\n/* harmony export */   UINT_128_MAX: () => (/* binding */ UINT_128_MAX),\n/* harmony export */   UINT_128_MIN: () => (/* binding */ UINT_128_MIN),\n/* harmony export */   UINT_256_HIGH_MAX: () => (/* binding */ UINT_256_HIGH_MAX),\n/* harmony export */   UINT_256_HIGH_MIN: () => (/* binding */ UINT_256_HIGH_MIN),\n/* harmony export */   UINT_256_LOW_MAX: () => (/* binding */ UINT_256_LOW_MAX),\n/* harmony export */   UINT_256_LOW_MIN: () => (/* binding */ UINT_256_LOW_MIN),\n/* harmony export */   UINT_256_MAX: () => (/* binding */ UINT_256_MAX),\n/* harmony export */   UINT_256_MIN: () => (/* binding */ UINT_256_MIN),\n/* harmony export */   UINT_512_MAX: () => (/* binding */ UINT_512_MAX),\n/* harmony export */   UINT_512_MIN: () => (/* binding */ UINT_512_MIN),\n/* harmony export */   Uint: () => (/* binding */ Uint),\n/* harmony export */   ValidateType: () => (/* binding */ ValidateType),\n/* harmony export */   WalletAccount: () => (/* binding */ WalletAccount),\n/* harmony export */   addAddressPadding: () => (/* binding */ addAddressPadding),\n/* harmony export */   buildUrl: () => (/* binding */ buildUrl),\n/* harmony export */   byteArray: () => (/* binding */ byteArray_exports),\n/* harmony export */   cairo: () => (/* binding */ cairo_exports),\n/* harmony export */   constants: () => (/* binding */ constants_exports),\n/* harmony export */   contractClassResponseToLegacyCompiledContract: () => (/* binding */ contractClassResponseToLegacyCompiledContract),\n/* harmony export */   defaultProvider: () => (/* binding */ defaultProvider),\n/* harmony export */   ec: () => (/* binding */ ec_exports),\n/* harmony export */   encode: () => (/* binding */ encode_exports),\n/* harmony export */   eth: () => (/* binding */ eth_exports),\n/* harmony export */   events: () => (/* binding */ events_exports),\n/* harmony export */   extractContractHashes: () => (/* binding */ extractContractHashes),\n/* harmony export */   fixProto: () => (/* binding */ fixProto),\n/* harmony export */   fixStack: () => (/* binding */ fixStack),\n/* harmony export */   getCalldata: () => (/* binding */ getCalldata),\n/* harmony export */   getChecksumAddress: () => (/* binding */ getChecksumAddress),\n/* harmony export */   hash: () => (/* binding */ hash_exports),\n/* harmony export */   isSierra: () => (/* binding */ isSierra),\n/* harmony export */   isUrl: () => (/* binding */ isUrl),\n/* harmony export */   json: () => (/* binding */ json_exports),\n/* harmony export */   merkle: () => (/* binding */ merkle_exports),\n/* harmony export */   num: () => (/* binding */ num_exports),\n/* harmony export */   number: () => (/* binding */ number),\n/* harmony export */   parseCalldataField: () => (/* binding */ parseCalldataField),\n/* harmony export */   provider: () => (/* binding */ provider_exports),\n/* harmony export */   selector: () => (/* binding */ selector_exports),\n/* harmony export */   shortString: () => (/* binding */ shortString_exports),\n/* harmony export */   splitArgsAndOptions: () => (/* binding */ splitArgsAndOptions),\n/* harmony export */   stark: () => (/* binding */ stark_exports),\n/* harmony export */   starknetId: () => (/* binding */ starknetId_exports),\n/* harmony export */   transaction: () => (/* binding */ transaction_exports),\n/* harmony export */   typedData: () => (/* binding */ typedData_exports),\n/* harmony export */   types: () => (/* binding */ types_exports),\n/* harmony export */   uint256: () => (/* binding */ uint256_exports),\n/* harmony export */   v2hash: () => (/* binding */ v2_exports),\n/* harmony export */   v3hash: () => (/* binding */ v3_exports),\n/* harmony export */   validateAndParseAddress: () => (/* binding */ validateAndParseAddress),\n/* harmony export */   validateChecksumAddress: () => (/* binding */ validateChecksumAddress),\n/* harmony export */   wallet: () => (/* binding */ connect_exports)\n/* harmony export */ });\n/* harmony import */ var starknet_types_07__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! starknet-types-07 */ \"(ssr)/./node_modules/starknet-types-07/dist/esm/index.js\");\n/* harmony import */ var starknet_types_07__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! starknet-types-07 */ \"(ssr)/./node_modules/starknet-types-07/dist/esm/api/nonspec.js\");\n/* harmony import */ var _scure_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @scure/base */ \"(ssr)/./node_modules/@scure/base/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var starknet_types_07__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! starknet-types-07 */ \"(ssr)/./node_modules/starknet-types-07/dist/esm/wallet-api/typedData.js\");\n/* harmony import */ var _scure_starknet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @scure/starknet */ \"(ssr)/./node_modules/@scure/starknet/lib/esm/index.js\");\n/* harmony import */ var _noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @noble/curves/abstract/poseidon */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/poseidon.js\");\n/* harmony import */ var _noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/curves/abstract/weierstrass */ \"(ssr)/./node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/* harmony import */ var lossless_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lossless-json */ \"(ssr)/./node_modules/lossless-json/lib/esm/index.js\");\n/* harmony import */ var pako__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pako */ \"(ssr)/./node_modules/pako/dist/pako.esm.mjs\");\n/* harmony import */ var _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@noble/curves/esm/secp256k1.js\");\n/* harmony import */ var fetch_cookie__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! fetch-cookie */ \"(ssr)/./node_modules/fetch-cookie/esm/index.js\");\n/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! isomorphic-fetch */ \"(ssr)/./node_modules/isomorphic-fetch/fetch-npm-node.js\");\n/* harmony import */ var ts_mixer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ts-mixer */ \"(ssr)/./node_modules/ts-mixer/dist/esm/index.js\");\n/* harmony import */ var url_join__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! url-join */ \"(ssr)/./node_modules/url-join/lib/url-join.js\");\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// src/constants.ts\nvar constants_exports = {};\n__export(constants_exports, {\n  ADDR_BOUND: () => ADDR_BOUND,\n  API_VERSION: () => API_VERSION,\n  BaseUrl: () => BaseUrl,\n  FeeMarginPercentage: () => FeeMarginPercentage,\n  IS_BROWSER: () => IS_BROWSER,\n  MASK_250: () => MASK_250,\n  MAX_STORAGE_ITEM_SIZE: () => MAX_STORAGE_ITEM_SIZE,\n  NetworkName: () => NetworkName,\n  PRIME: () => PRIME,\n  RANGE_FELT: () => RANGE_FELT,\n  RANGE_I128: () => RANGE_I128,\n  RANGE_U128: () => RANGE_U128,\n  RPC_DEFAULT_VERSION: () => RPC_DEFAULT_VERSION,\n  RPC_NODES: () => RPC_NODES,\n  StarknetChainId: () => StarknetChainId,\n  TEXT_TO_FELT_MAX_LEN: () => TEXT_TO_FELT_MAX_LEN,\n  TRANSACTION_VERSION: () => api_exports.ETransactionVersion,\n  TransactionHashPrefix: () => TransactionHashPrefix,\n  UDC: () => UDC,\n  ZERO: () => ZERO\n});\n\n// src/types/api/index.ts\nvar api_exports = {};\n__export(api_exports, {\n  JRPC: () => jsonrpc_exports,\n  RPCSPEC06: () => rpcspec_0_6_exports,\n  RPCSPEC07: () => starknet_types_07__WEBPACK_IMPORTED_MODULE_0__\n});\n\n// src/types/api/jsonrpc/index.ts\nvar jsonrpc_exports = {};\n\n// src/types/api/rpcspec_0_6/index.ts\nvar rpcspec_0_6_exports = {};\n__export(rpcspec_0_6_exports, {\n  EBlockTag: () => EBlockTag,\n  EDAMode: () => EDAMode,\n  EDataAvailabilityMode: () => EDataAvailabilityMode,\n  ESimulationFlag: () => ESimulationFlag,\n  ETransactionExecutionStatus: () => ETransactionExecutionStatus,\n  ETransactionFinalityStatus: () => ETransactionFinalityStatus,\n  ETransactionStatus: () => ETransactionStatus,\n  ETransactionType: () => ETransactionType,\n  ETransactionVersion: () => ETransactionVersion,\n  ETransactionVersion2: () => ETransactionVersion2,\n  ETransactionVersion3: () => ETransactionVersion3,\n  Errors: () => errors_exports,\n  SPEC: () => components_exports\n});\n\n// src/types/api/rpcspec_0_6/errors.ts\nvar errors_exports = {};\n\n// src/types/api/rpcspec_0_6/components.ts\nvar components_exports = {};\n\n// src/types/api/rpcspec_0_6/nonspec.ts\nvar ETransactionType = /* @__PURE__ */ ((ETransactionType2) => {\n  ETransactionType2[\"DECLARE\"] = \"DECLARE\";\n  ETransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  ETransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  ETransactionType2[\"INVOKE\"] = \"INVOKE\";\n  ETransactionType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  return ETransactionType2;\n})(ETransactionType || {});\nvar ESimulationFlag = /* @__PURE__ */ ((ESimulationFlag2) => {\n  ESimulationFlag2[\"SKIP_VALIDATE\"] = \"SKIP_VALIDATE\";\n  ESimulationFlag2[\"SKIP_FEE_CHARGE\"] = \"SKIP_FEE_CHARGE\";\n  return ESimulationFlag2;\n})(ESimulationFlag || {});\nvar ETransactionStatus = /* @__PURE__ */ ((ETransactionStatus2) => {\n  ETransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  ETransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  ETransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionStatus2;\n})(ETransactionStatus || {});\nvar ETransactionFinalityStatus = /* @__PURE__ */ ((ETransactionFinalityStatus2) => {\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  ETransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return ETransactionFinalityStatus2;\n})(ETransactionFinalityStatus || {});\nvar ETransactionExecutionStatus = /* @__PURE__ */ ((ETransactionExecutionStatus2) => {\n  ETransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  ETransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return ETransactionExecutionStatus2;\n})(ETransactionExecutionStatus || {});\nvar EBlockTag = /* @__PURE__ */ ((EBlockTag2) => {\n  EBlockTag2[\"PENDING\"] = \"pending\";\n  EBlockTag2[\"LATEST\"] = \"latest\";\n  return EBlockTag2;\n})(EBlockTag || {});\nvar EDataAvailabilityMode = /* @__PURE__ */ ((EDataAvailabilityMode3) => {\n  EDataAvailabilityMode3[\"L1\"] = \"L1\";\n  EDataAvailabilityMode3[\"L2\"] = \"L2\";\n  return EDataAvailabilityMode3;\n})(EDataAvailabilityMode || {});\nvar EDAMode = /* @__PURE__ */ ((EDAMode4) => {\n  EDAMode4[EDAMode4[\"L1\"] = 0] = \"L1\";\n  EDAMode4[EDAMode4[\"L2\"] = 1] = \"L2\";\n  return EDAMode4;\n})(EDAMode || {});\nvar ETransactionVersion = /* @__PURE__ */ ((ETransactionVersion10) => {\n  ETransactionVersion10[\"V0\"] = \"0x0\";\n  ETransactionVersion10[\"V1\"] = \"0x1\";\n  ETransactionVersion10[\"V2\"] = \"0x2\";\n  ETransactionVersion10[\"V3\"] = \"0x3\";\n  ETransactionVersion10[\"F0\"] = \"0x100000000000000000000000000000000\";\n  ETransactionVersion10[\"F1\"] = \"0x100000000000000000000000000000001\";\n  ETransactionVersion10[\"F2\"] = \"0x100000000000000000000000000000002\";\n  ETransactionVersion10[\"F3\"] = \"0x100000000000000000000000000000003\";\n  return ETransactionVersion10;\n})(ETransactionVersion || {});\nvar ETransactionVersion2 = /* @__PURE__ */ ((ETransactionVersion25) => {\n  ETransactionVersion25[\"V0\"] = \"0x0\";\n  ETransactionVersion25[\"V1\"] = \"0x1\";\n  ETransactionVersion25[\"V2\"] = \"0x2\";\n  ETransactionVersion25[\"F0\"] = \"0x100000000000000000000000000000000\";\n  ETransactionVersion25[\"F1\"] = \"0x100000000000000000000000000000001\";\n  ETransactionVersion25[\"F2\"] = \"0x100000000000000000000000000000002\";\n  return ETransactionVersion25;\n})(ETransactionVersion2 || {});\nvar ETransactionVersion3 = /* @__PURE__ */ ((ETransactionVersion36) => {\n  ETransactionVersion36[\"V3\"] = \"0x3\";\n  ETransactionVersion36[\"F3\"] = \"0x100000000000000000000000000000003\";\n  return ETransactionVersion36;\n})(ETransactionVersion3 || {});\n\n// src/types/api/index.ts\n__reExport(api_exports, starknet_types_07__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n// src/utils/encode.ts\nvar encode_exports = {};\n__export(encode_exports, {\n  IS_BROWSER: () => IS_BROWSER,\n  addHexPrefix: () => addHexPrefix,\n  arrayBufferToString: () => arrayBufferToString,\n  atobUniversal: () => atobUniversal,\n  btoaUniversal: () => btoaUniversal,\n  buf2hex: () => buf2hex,\n  calcByteLength: () => calcByteLength,\n  padLeft: () => padLeft,\n  pascalToSnake: () => pascalToSnake,\n  removeHexPrefix: () => removeHexPrefix,\n  sanitizeBytes: () => sanitizeBytes,\n  sanitizeHex: () => sanitizeHex,\n  stringToArrayBuffer: () => stringToArrayBuffer,\n  utf8ToArray: () => utf8ToArray\n});\n\nvar IS_BROWSER = typeof window !== \"undefined\";\nvar STRING_ZERO = \"0\";\nfunction arrayBufferToString(array) {\n  return new Uint8Array(array).reduce((data, byte) => data + String.fromCharCode(byte), \"\");\n}\nfunction utf8ToArray(str) {\n  return new TextEncoder().encode(str);\n}\nfunction stringToArrayBuffer(str) {\n  return utf8ToArray(str);\n}\nfunction atobUniversal(a) {\n  return _scure_base__WEBPACK_IMPORTED_MODULE_1__.base64.decode(a);\n}\nfunction btoaUniversal(b) {\n  return _scure_base__WEBPACK_IMPORTED_MODULE_1__.base64.encode(new Uint8Array(b));\n}\nfunction buf2hex(buffer) {\n  return buffer.reduce((r, x) => r + x.toString(16).padStart(2, \"0\"), \"\");\n}\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/i, \"\");\n}\nfunction addHexPrefix(hex) {\n  return `0x${removeHexPrefix(hex)}`;\n}\nfunction padString(str, length, left, padding = STRING_ZERO) {\n  const diff = length - str.length;\n  let result = str;\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n  return result;\n}\nfunction padLeft(str, length, padding = STRING_ZERO) {\n  return padString(str, length, true, padding);\n}\nfunction calcByteLength(str, byteSize = 8) {\n  const { length } = str;\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n  return padLeft(str, calcByteLength(str, byteSize), padding);\n}\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n  return hex;\n}\nvar pascalToSnake = (text) => /[a-z]/.test(text) ? text.split(/(?=[A-Z])/).join(\"_\").toUpperCase() : text;\n\n// src/constants.ts\nvar TEXT_TO_FELT_MAX_LEN = 31;\nvar ZERO = 0n;\nvar MASK_250 = 2n ** 250n - 1n;\nvar API_VERSION = ZERO;\nvar PRIME = 2n ** 251n + 17n * 2n ** 192n + 1n;\nvar MAX_STORAGE_ITEM_SIZE = 256n;\nvar ADDR_BOUND = 2n ** 251n - MAX_STORAGE_ITEM_SIZE;\nvar range = (min, max) => ({ min, max });\nvar RANGE_FELT = range(ZERO, PRIME - 1n);\nvar RANGE_I128 = range(-(2n ** 127n), 2n ** 127n - 1n);\nvar RANGE_U128 = range(ZERO, 2n ** 128n - 1n);\nvar BaseUrl = /* @__PURE__ */ ((BaseUrl2) => {\n  BaseUrl2[\"SN_MAIN\"] = \"https://alpha-mainnet.starknet.io\";\n  BaseUrl2[\"SN_SEPOLIA\"] = \"https://alpha-sepolia.starknet.io\";\n  return BaseUrl2;\n})(BaseUrl || {});\nvar NetworkName = /* @__PURE__ */ ((NetworkName2) => {\n  NetworkName2[\"SN_MAIN\"] = \"SN_MAIN\";\n  NetworkName2[\"SN_SEPOLIA\"] = \"SN_SEPOLIA\";\n  return NetworkName2;\n})(NetworkName || {});\nvar StarknetChainId = /* @__PURE__ */ ((StarknetChainId6) => {\n  StarknetChainId6[\"SN_MAIN\"] = \"0x534e5f4d41494e\";\n  StarknetChainId6[\"SN_SEPOLIA\"] = \"0x534e5f5345504f4c4941\";\n  return StarknetChainId6;\n})(StarknetChainId || {});\nvar TransactionHashPrefix = /* @__PURE__ */ ((TransactionHashPrefix2) => {\n  TransactionHashPrefix2[\"DECLARE\"] = \"0x6465636c617265\";\n  TransactionHashPrefix2[\"DEPLOY\"] = \"0x6465706c6f79\";\n  TransactionHashPrefix2[\"DEPLOY_ACCOUNT\"] = \"0x6465706c6f795f6163636f756e74\";\n  TransactionHashPrefix2[\"INVOKE\"] = \"0x696e766f6b65\";\n  TransactionHashPrefix2[\"L1_HANDLER\"] = \"0x6c315f68616e646c6572\";\n  return TransactionHashPrefix2;\n})(TransactionHashPrefix || {});\nvar FeeMarginPercentage = /* @__PURE__ */ ((FeeMarginPercentage2) => {\n  FeeMarginPercentage2[FeeMarginPercentage2[\"L1_BOUND_MAX_AMOUNT\"] = 50] = \"L1_BOUND_MAX_AMOUNT\";\n  FeeMarginPercentage2[FeeMarginPercentage2[\"L1_BOUND_MAX_PRICE_PER_UNIT\"] = 50] = \"L1_BOUND_MAX_PRICE_PER_UNIT\";\n  FeeMarginPercentage2[FeeMarginPercentage2[\"MAX_FEE\"] = 50] = \"MAX_FEE\";\n  return FeeMarginPercentage2;\n})(FeeMarginPercentage || {});\nvar UDC = {\n  ADDRESS: \"0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf\",\n  ENTRYPOINT: \"deployContract\"\n};\nvar RPC_DEFAULT_VERSION = \"v0_7\";\nvar RPC_NODES = {\n  SN_MAIN: [\n    `https://starknet-mainnet.public.blastapi.io/rpc/${RPC_DEFAULT_VERSION}`,\n    `https://free-rpc.nethermind.io/mainnet-juno/${RPC_DEFAULT_VERSION}`\n  ],\n  SN_SEPOLIA: [\n    `https://starknet-sepolia.public.blastapi.io/rpc/${RPC_DEFAULT_VERSION}`,\n    `https://free-rpc.nethermind.io/sepolia-juno/${RPC_DEFAULT_VERSION}`\n  ]\n};\n\n// src/provider/rpc.ts\n\n\n\n// src/channel/rpc_0_6.ts\nvar rpc_0_6_exports = {};\n__export(rpc_0_6_exports, {\n  RpcChannel: () => RpcChannel\n});\n\n// src/provider/errors.ts\nfunction fixStack(target, fn = target.constructor) {\n  const { captureStackTrace } = Error;\n  captureStackTrace && captureStackTrace(target, fn);\n}\nfunction fixProto(target, prototype) {\n  const { setPrototypeOf } = Object;\n  setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;\n}\nvar CustomError = class extends Error {\n  name;\n  constructor(message) {\n    super(message);\n    Object.defineProperty(this, \"name\", {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true\n    });\n    fixProto(this, new.target.prototype);\n    fixStack(this);\n  }\n};\nvar LibraryError = class extends CustomError {\n};\nvar GatewayError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\nvar HttpError = class extends LibraryError {\n  constructor(message, errorCode) {\n    super(message);\n    this.errorCode = errorCode;\n  }\n};\n\n// src/types/index.ts\nvar types_exports = {};\n__export(types_exports, {\n  BlockStatus: () => BlockStatus,\n  BlockTag: () => BlockTag,\n  EntryPointType: () => EntryPointType,\n  Literal: () => Literal,\n  RPC: () => api_exports,\n  TransactionExecutionStatus: () => TransactionExecutionStatus,\n  TransactionFinalityStatus: () => TransactionFinalityStatus,\n  TransactionStatus: () => TransactionStatus,\n  TransactionType: () => TransactionType,\n  TypedDataRevision: () => starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision,\n  Uint: () => Uint,\n  ValidateType: () => ValidateType\n});\n\n// src/types/calldata.ts\nvar ValidateType = /* @__PURE__ */ ((ValidateType2) => {\n  ValidateType2[\"DEPLOY\"] = \"DEPLOY\";\n  ValidateType2[\"CALL\"] = \"CALL\";\n  ValidateType2[\"INVOKE\"] = \"INVOKE\";\n  return ValidateType2;\n})(ValidateType || {});\nvar Uint = /* @__PURE__ */ ((Uint2) => {\n  Uint2[\"u8\"] = \"core::integer::u8\";\n  Uint2[\"u16\"] = \"core::integer::u16\";\n  Uint2[\"u32\"] = \"core::integer::u32\";\n  Uint2[\"u64\"] = \"core::integer::u64\";\n  Uint2[\"u128\"] = \"core::integer::u128\";\n  Uint2[\"u256\"] = \"core::integer::u256\";\n  Uint2[\"u512\"] = \"core::integer::u512\";\n  return Uint2;\n})(Uint || {});\nvar Literal = /* @__PURE__ */ ((Literal2) => {\n  Literal2[\"ClassHash\"] = \"core::starknet::class_hash::ClassHash\";\n  Literal2[\"ContractAddress\"] = \"core::starknet::contract_address::ContractAddress\";\n  Literal2[\"Secp256k1Point\"] = \"core::starknet::secp256k1::Secp256k1Point\";\n  return Literal2;\n})(Literal || {});\n\n// src/types/lib/contract/index.ts\nvar EntryPointType = /* @__PURE__ */ ((EntryPointType2) => {\n  EntryPointType2[\"EXTERNAL\"] = \"EXTERNAL\";\n  EntryPointType2[\"L1_HANDLER\"] = \"L1_HANDLER\";\n  EntryPointType2[\"CONSTRUCTOR\"] = \"CONSTRUCTOR\";\n  return EntryPointType2;\n})(EntryPointType || {});\n\n// src/types/lib/index.ts\nvar TransactionType = /* @__PURE__ */ ((TransactionType2) => {\n  TransactionType2[\"DECLARE\"] = \"DECLARE\";\n  TransactionType2[\"DEPLOY\"] = \"DEPLOY\";\n  TransactionType2[\"DEPLOY_ACCOUNT\"] = \"DEPLOY_ACCOUNT\";\n  TransactionType2[\"INVOKE\"] = \"INVOKE_FUNCTION\";\n  return TransactionType2;\n})(TransactionType || {});\nvar TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {\n  TransactionStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  TransactionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionStatus2[\"REVERTED\"] = \"REVERTED\";\n  return TransactionStatus2;\n})(TransactionStatus || {});\nvar TransactionFinalityStatus = /* @__PURE__ */ ((TransactionFinalityStatus2) => {\n  TransactionFinalityStatus2[\"NOT_RECEIVED\"] = \"NOT_RECEIVED\";\n  TransactionFinalityStatus2[\"RECEIVED\"] = \"RECEIVED\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  TransactionFinalityStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  return TransactionFinalityStatus2;\n})(TransactionFinalityStatus || {});\nvar TransactionExecutionStatus = /* @__PURE__ */ ((TransactionExecutionStatus2) => {\n  TransactionExecutionStatus2[\"REJECTED\"] = \"REJECTED\";\n  TransactionExecutionStatus2[\"REVERTED\"] = \"REVERTED\";\n  TransactionExecutionStatus2[\"SUCCEEDED\"] = \"SUCCEEDED\";\n  return TransactionExecutionStatus2;\n})(TransactionExecutionStatus || {});\nvar BlockStatus = /* @__PURE__ */ ((BlockStatus2) => {\n  BlockStatus2[\"PENDING\"] = \"PENDING\";\n  BlockStatus2[\"ACCEPTED_ON_L1\"] = \"ACCEPTED_ON_L1\";\n  BlockStatus2[\"ACCEPTED_ON_L2\"] = \"ACCEPTED_ON_L2\";\n  BlockStatus2[\"REJECTED\"] = \"REJECTED\";\n  return BlockStatus2;\n})(BlockStatus || {});\nvar BlockTag = /* @__PURE__ */ ((BlockTag2) => {\n  BlockTag2[\"PENDING\"] = \"pending\";\n  BlockTag2[\"LATEST\"] = \"latest\";\n  return BlockTag2;\n})(BlockTag || {});\n\n// src/types/typedData.ts\n\n\n// src/utils/assert.ts\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || \"Assertion failure\");\n  }\n}\n\n// src/utils/num.ts\nvar num_exports = {};\n__export(num_exports, {\n  addPercent: () => addPercent,\n  assertInRange: () => assertInRange,\n  bigNumberishArrayToDecimalStringArray: () => bigNumberishArrayToDecimalStringArray,\n  bigNumberishArrayToHexadecimalStringArray: () => bigNumberishArrayToHexadecimalStringArray,\n  cleanHex: () => cleanHex,\n  getDecimalString: () => getDecimalString,\n  getHexString: () => getHexString,\n  getHexStringArray: () => getHexStringArray,\n  hexToBytes: () => hexToBytes,\n  hexToDecimalString: () => hexToDecimalString,\n  isBigInt: () => isBigInt,\n  isBoolean: () => isBoolean,\n  isHex: () => isHex,\n  isNumber: () => isNumber,\n  isStringWholeNumber: () => isStringWholeNumber,\n  toBigInt: () => toBigInt,\n  toCairoBool: () => toCairoBool,\n  toHex: () => toHex,\n  toHexString: () => toHexString,\n  toStorageKey: () => toStorageKey\n});\n\nfunction isHex(hex) {\n  return /^0x[0-9a-f]*$/i.test(hex);\n}\nfunction toBigInt(value) {\n  return BigInt(value);\n}\nfunction isBigInt(value) {\n  return typeof value === \"bigint\";\n}\nfunction toHex(value) {\n  return addHexPrefix(toBigInt(value).toString(16));\n}\nvar toHexString = toHex;\nfunction toStorageKey(number2) {\n  return addHexPrefix(toBigInt(number2).toString(16).padStart(64, \"0\"));\n}\nfunction hexToDecimalString(hex) {\n  return BigInt(addHexPrefix(hex)).toString(10);\n}\nfunction cleanHex(hex) {\n  return hex.toLowerCase().replace(/^(0x)0+/, \"$1\");\n}\nfunction assertInRange(input, lowerBound, upperBound, inputName = \"\") {\n  const messageSuffix = inputName === \"\" ? \"invalid length\" : `invalid ${inputName} length`;\n  const inputBigInt = BigInt(input);\n  const lowerBoundBigInt = BigInt(lowerBound);\n  const upperBoundBigInt = BigInt(upperBound);\n  assert(\n    inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt,\n    `Message not signable, ${messageSuffix}.`\n  );\n}\nfunction bigNumberishArrayToDecimalStringArray(data) {\n  return data.map((x) => toBigInt(x).toString(10));\n}\nfunction bigNumberishArrayToHexadecimalStringArray(data) {\n  return data.map((x) => toHex(x));\n}\nfunction isStringWholeNumber(str) {\n  return /^\\d+$/.test(str);\n}\nfunction getDecimalString(str) {\n  if (isHex(str)) {\n    return hexToDecimalString(str);\n  }\n  if (isStringWholeNumber(str)) {\n    return str;\n  }\n  throw new Error(`${str} needs to be a hex-string or whole-number-string`);\n}\nfunction getHexString(str) {\n  if (isHex(str)) {\n    return str;\n  }\n  if (isStringWholeNumber(str)) {\n    return toHexString(str);\n  }\n  throw new Error(`${str} needs to be a hex-string or whole-number-string`);\n}\nfunction getHexStringArray(array) {\n  return array.map(getHexString);\n}\nfunction toCairoBool(value) {\n  return (+value).toString();\n}\nfunction hexToBytes(str) {\n  if (!isHex(str))\n    throw new Error(`${str} needs to be a hex-string`);\n  let adaptedValue = removeHexPrefix(str);\n  if (adaptedValue.length % 2 !== 0) {\n    adaptedValue = `0${adaptedValue}`;\n  }\n  return (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(adaptedValue);\n}\nfunction addPercent(number2, percent) {\n  const bigIntNum = BigInt(number2);\n  return bigIntNum + bigIntNum * BigInt(percent) / 100n;\n}\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nfunction isBoolean(value) {\n  return typeof value === \"boolean\";\n}\n\n// src/utils/hash/selector.ts\nvar selector_exports = {};\n__export(selector_exports, {\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  keccakBn: () => keccakBn,\n  starknetKeccak: () => starknetKeccak\n});\n\nfunction keccakBn(value) {\n  const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));\n  const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;\n  return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.keccak)(hexToBytes(addHexPrefix(evenHex))).toString(16));\n}\nfunction keccakHex(str) {\n  return addHexPrefix((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.keccak)(utf8ToArray(str)).toString(16));\n}\nfunction starknetKeccak(str) {\n  const hash = BigInt(keccakHex(str));\n  return hash & MASK_250;\n}\nfunction getSelectorFromName(funcName) {\n  return toHex(starknetKeccak(funcName));\n}\nfunction getSelector(value) {\n  if (isHex(value)) {\n    return value;\n  }\n  if (isStringWholeNumber(value)) {\n    return toHexString(value);\n  }\n  return getSelectorFromName(value);\n}\n\n// src/utils/shortString.ts\nvar shortString_exports = {};\n__export(shortString_exports, {\n  decodeShortString: () => decodeShortString,\n  encodeShortString: () => encodeShortString,\n  isASCII: () => isASCII,\n  isDecimalString: () => isDecimalString,\n  isLongText: () => isLongText,\n  isShortString: () => isShortString,\n  isShortText: () => isShortText,\n  isString: () => isString,\n  isText: () => isText,\n  splitLongString: () => splitLongString\n});\nfunction isASCII(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\nfunction isShortString(str) {\n  return str.length <= TEXT_TO_FELT_MAX_LEN;\n}\nfunction isDecimalString(str) {\n  return /^[0-9]*$/i.test(str);\n}\nfunction isString(value) {\n  return typeof value === \"string\";\n}\nfunction isText(val) {\n  return isString(val) && !isHex(val) && !isStringWholeNumber(val);\n}\nvar isShortText = (val) => isText(val) && isShortString(val);\nvar isLongText = (val) => isText(val) && !isShortString(val);\nfunction splitLongString(longStr) {\n  const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, \"g\");\n  return longStr.match(regex) || [];\n}\nfunction encodeShortString(str) {\n  if (!isASCII(str))\n    throw new Error(`${str} is not an ASCII string`);\n  if (!isShortString(str))\n    throw new Error(`${str} is too long`);\n  return addHexPrefix(str.replace(/./g, (char) => char.charCodeAt(0).toString(16)));\n}\nfunction decodeShortString(str) {\n  if (!isASCII(str))\n    throw new Error(`${str} is not an ASCII string`);\n  if (isHex(str)) {\n    return removeHexPrefix(str).replace(/.{2}/g, (hex) => String.fromCharCode(parseInt(hex, 16)));\n  }\n  if (isDecimalString(str)) {\n    return decodeShortString(\"0X\".concat(BigInt(str).toString(16)));\n  }\n  throw new Error(`${str} is not Hex or decimal`);\n}\n\n// src/utils/calldata/byteArray.ts\nvar byteArray_exports = {};\n__export(byteArray_exports, {\n  byteArrayFromString: () => byteArrayFromString,\n  stringFromByteArray: () => stringFromByteArray\n});\nfunction stringFromByteArray(myByteArray) {\n  const pending_word = BigInt(myByteArray.pending_word) === 0n ? \"\" : decodeShortString(toHex(myByteArray.pending_word));\n  return myByteArray.data.reduce((cumuledString, encodedString) => {\n    const add = BigInt(encodedString) === 0n ? \"\" : decodeShortString(toHex(encodedString));\n    return cumuledString + add;\n  }, \"\") + pending_word;\n}\nfunction byteArrayFromString(targetString) {\n  const shortStrings = splitLongString(targetString);\n  const remainder = shortStrings[shortStrings.length - 1];\n  const shortStringsEncoded = shortStrings.map(encodeShortString);\n  const [pendingWord, pendingWordLength] = remainder === void 0 || remainder.length === 31 ? [\"0x00\", 0] : [shortStringsEncoded.pop(), remainder.length];\n  return {\n    data: shortStringsEncoded.length === 0 ? [] : shortStringsEncoded,\n    pending_word: pendingWord,\n    pending_word_len: pendingWordLength\n  };\n}\n\n// src/utils/calldata/cairo.ts\nvar cairo_exports = {};\n__export(cairo_exports, {\n  felt: () => felt,\n  getAbiContractVersion: () => getAbiContractVersion,\n  getArrayType: () => getArrayType,\n  isCairo1Abi: () => isCairo1Abi,\n  isCairo1Type: () => isCairo1Type,\n  isLen: () => isLen,\n  isTypeArray: () => isTypeArray,\n  isTypeBool: () => isTypeBool,\n  isTypeByteArray: () => isTypeByteArray,\n  isTypeBytes31: () => isTypeBytes31,\n  isTypeContractAddress: () => isTypeContractAddress,\n  isTypeEnum: () => isTypeEnum,\n  isTypeEthAddress: () => isTypeEthAddress,\n  isTypeFelt: () => isTypeFelt,\n  isTypeLiteral: () => isTypeLiteral,\n  isTypeNamedTuple: () => isTypeNamedTuple,\n  isTypeNonZero: () => isTypeNonZero,\n  isTypeOption: () => isTypeOption,\n  isTypeResult: () => isTypeResult,\n  isTypeSecp256k1Point: () => isTypeSecp256k1Point,\n  isTypeStruct: () => isTypeStruct,\n  isTypeTuple: () => isTypeTuple,\n  isTypeUint: () => isTypeUint,\n  isTypeUint256: () => isTypeUint256,\n  tuple: () => tuple,\n  uint256: () => uint256,\n  uint512: () => uint512\n});\n\n// src/utils/cairoDataTypes/felt.ts\nfunction CairoFelt(it) {\n  if (isBigInt(it) || Number.isInteger(it)) {\n    return it.toString();\n  }\n  if (isString(it)) {\n    if (isHex(it)) {\n      return BigInt(it).toString();\n    }\n    if (isText(it)) {\n      if (!isShortString(it)) {\n        throw new Error(\n          `${it} is a long string > 31 chars. Please split it into an array of short strings.`\n        );\n      }\n      return BigInt(encodeShortString(it)).toString();\n    }\n    if (isStringWholeNumber(it)) {\n      return it;\n    }\n  }\n  if (isBoolean(it)) {\n    return `${+it}`;\n  }\n  throw new Error(`${it} can't be computed by felt()`);\n}\n\n// src/utils/cairoDataTypes/uint256.ts\nvar UINT_128_MAX = (1n << 128n) - 1n;\nvar UINT_256_MAX = (1n << 256n) - 1n;\nvar UINT_256_MIN = 0n;\nvar UINT_256_LOW_MAX = 340282366920938463463374607431768211455n;\nvar UINT_256_HIGH_MAX = 340282366920938463463374607431768211455n;\nvar UINT_256_LOW_MIN = 0n;\nvar UINT_256_HIGH_MIN = 0n;\nvar CairoUint256 = class _CairoUint256 {\n  low;\n  high;\n  static abiSelector = \"core::integer::u256\";\n  constructor(...arr) {\n    if (typeof arr[0] === \"object\" && arr.length === 1 && \"low\" in arr[0] && \"high\" in arr[0]) {\n      const props = _CairoUint256.validateProps(arr[0].low, arr[0].high);\n      this.low = props.low;\n      this.high = props.high;\n    } else if (arr.length === 1) {\n      const bigInt = _CairoUint256.validate(arr[0]);\n      this.low = bigInt & UINT_128_MAX;\n      this.high = bigInt >> 128n;\n    } else if (arr.length === 2) {\n      const props = _CairoUint256.validateProps(arr[0], arr[1]);\n      this.low = props.low;\n      this.high = props.high;\n    } else {\n      throw Error(\"Incorrect constructor parameters\");\n    }\n  }\n  /**\n   * Validate if BigNumberish can be represented as Unit256\n   */\n  static validate(bigNumberish) {\n    const bigInt = BigInt(bigNumberish);\n    if (bigInt < UINT_256_MIN)\n      throw Error(\"bigNumberish is smaller than UINT_256_MIN\");\n    if (bigInt > UINT_256_MAX)\n      throw new Error(\"bigNumberish is bigger than UINT_256_MAX\");\n    return bigInt;\n  }\n  /**\n   * Validate if low and high can be represented as Unit256\n   */\n  static validateProps(low, high) {\n    const bigIntLow = BigInt(low);\n    const bigIntHigh = BigInt(high);\n    if (bigIntLow < UINT_256_LOW_MIN || bigIntLow > UINT_256_LOW_MAX) {\n      throw new Error(\"low is out of range UINT_256_LOW_MIN - UINT_256_LOW_MAX\");\n    }\n    if (bigIntHigh < UINT_256_HIGH_MIN || bigIntHigh > UINT_256_HIGH_MAX) {\n      throw new Error(\"high is out of range UINT_256_HIGH_MIN - UINT_256_HIGH_MAX\");\n    }\n    return { low: bigIntLow, high: bigIntHigh };\n  }\n  /**\n   * Check if BigNumberish can be represented as Unit256\n   */\n  static is(bigNumberish) {\n    try {\n      _CairoUint256.validate(bigNumberish);\n    } catch (error) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Check if provided abi type is this data type\n   */\n  static isAbiType(abiType) {\n    return abiType === _CairoUint256.abiSelector;\n  }\n  /**\n   * Return bigint representation\n   */\n  toBigInt() {\n    return (this.high << 128n) + this.low;\n  }\n  /**\n   * Return Uint256 structure with HexString props\n   * {low: HexString, high: HexString}\n   */\n  toUint256HexString() {\n    return {\n      low: addHexPrefix(this.low.toString(16)),\n      high: addHexPrefix(this.high.toString(16))\n    };\n  }\n  /**\n   * Return Uint256 structure with DecimalString props\n   * {low: DecString, high: DecString}\n   */\n  toUint256DecimalString() {\n    return {\n      low: this.low.toString(10),\n      high: this.high.toString(10)\n    };\n  }\n  /**\n   * Return api requests representation witch is felt array\n   */\n  toApiRequest() {\n    return [CairoFelt(this.low), CairoFelt(this.high)];\n  }\n};\n\n// src/utils/cairoDataTypes/uint512.ts\nvar UINT_512_MAX = (1n << 512n) - 1n;\nvar UINT_512_MIN = 0n;\nvar UINT_128_MIN = 0n;\nvar CairoUint512 = class _CairoUint512 {\n  limb0;\n  limb1;\n  limb2;\n  limb3;\n  static abiSelector = \"core::integer::u512\";\n  constructor(...arr) {\n    if (typeof arr[0] === \"object\" && arr.length === 1 && \"limb0\" in arr[0] && \"limb1\" in arr[0] && \"limb2\" in arr[0] && \"limb3\" in arr[0]) {\n      const props = _CairoUint512.validateProps(\n        arr[0].limb0,\n        arr[0].limb1,\n        arr[0].limb2,\n        arr[0].limb3\n      );\n      this.limb0 = props.limb0;\n      this.limb1 = props.limb1;\n      this.limb2 = props.limb2;\n      this.limb3 = props.limb3;\n    } else if (arr.length === 1) {\n      const bigInt = _CairoUint512.validate(arr[0]);\n      this.limb0 = bigInt & UINT_128_MAX;\n      this.limb1 = (bigInt & UINT_128_MAX << 128n) >> 128n;\n      this.limb2 = (bigInt & UINT_128_MAX << 256n) >> 256n;\n      this.limb3 = bigInt >> 384n;\n    } else if (arr.length === 4) {\n      const props = _CairoUint512.validateProps(arr[0], arr[1], arr[2], arr[3]);\n      this.limb0 = props.limb0;\n      this.limb1 = props.limb1;\n      this.limb2 = props.limb2;\n      this.limb3 = props.limb3;\n    } else {\n      throw Error(\"Incorrect Uint512 constructor parameters\");\n    }\n  }\n  /**\n   * Validate if BigNumberish can be represented as Uint512\n   */\n  static validate(bigNumberish) {\n    const bigInt = BigInt(bigNumberish);\n    if (bigInt < UINT_512_MIN)\n      throw Error(\"bigNumberish is smaller than UINT_512_MIN.\");\n    if (bigInt > UINT_512_MAX)\n      throw Error(\"bigNumberish is bigger than UINT_512_MAX.\");\n    return bigInt;\n  }\n  /**\n   * Validate if limbs can be represented as Uint512\n   */\n  static validateProps(limb0, limb1, limb2, limb3) {\n    const l0 = BigInt(limb0);\n    const l1 = BigInt(limb1);\n    const l2 = BigInt(limb2);\n    const l3 = BigInt(limb3);\n    [l0, l1, l2, l3].forEach((value, index) => {\n      if (value < UINT_128_MIN || value > UINT_128_MAX) {\n        throw Error(`limb${index} is not in the range of a u128 number`);\n      }\n    });\n    return { limb0: l0, limb1: l1, limb2: l2, limb3: l3 };\n  }\n  /**\n   * Check if BigNumberish can be represented as Uint512\n   */\n  static is(bigNumberish) {\n    try {\n      _CairoUint512.validate(bigNumberish);\n    } catch (error) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Check if provided abi type is this data type\n   */\n  static isAbiType(abiType) {\n    return abiType === _CairoUint512.abiSelector;\n  }\n  /**\n   * Return bigint representation\n   */\n  toBigInt() {\n    return (this.limb3 << 384n) + (this.limb2 << 256n) + (this.limb1 << 128n) + this.limb0;\n  }\n  /**\n   * Return Uint512 structure with HexString props\n   * limbx: HexString\n   */\n  toUint512HexString() {\n    return {\n      limb0: addHexPrefix(this.limb0.toString(16)),\n      limb1: addHexPrefix(this.limb1.toString(16)),\n      limb2: addHexPrefix(this.limb2.toString(16)),\n      limb3: addHexPrefix(this.limb3.toString(16))\n    };\n  }\n  /**\n   * Return Uint512 structure with DecimalString props\n   * limbx DecString\n   */\n  toUint512DecimalString() {\n    return {\n      limb0: this.limb0.toString(10),\n      limb1: this.limb1.toString(10),\n      limb2: this.limb2.toString(10),\n      limb3: this.limb3.toString(10)\n    };\n  }\n  /**\n   * Return api requests representation witch is felt array\n   */\n  toApiRequest() {\n    return [\n      CairoFelt(this.limb0),\n      CairoFelt(this.limb1),\n      CairoFelt(this.limb2),\n      CairoFelt(this.limb3)\n    ];\n  }\n};\n\n// src/utils/calldata/cairo.ts\nvar isLen = (name) => /_len$/.test(name);\nvar isTypeFelt = (type) => type === \"felt\" || type === \"core::felt252\";\nvar isTypeArray = (type) => /\\*/.test(type) || type.startsWith(\"core::array::Array::\") || type.startsWith(\"core::array::Span::\");\nvar isTypeTuple = (type) => /^\\(.*\\)$/i.test(type);\nvar isTypeNamedTuple = (type) => /\\(.*\\)/i.test(type) && type.includes(\":\");\nvar isTypeStruct = (type, structs) => type in structs;\nvar isTypeEnum = (type, enums) => type in enums;\nvar isTypeOption = (type) => type.startsWith(\"core::option::Option::\");\nvar isTypeResult = (type) => type.startsWith(\"core::result::Result::\");\nvar isTypeUint = (type) => Object.values(Uint).includes(type);\nvar isTypeUint256 = (type) => CairoUint256.isAbiType(type);\nvar isTypeLiteral = (type) => Object.values(Literal).includes(type);\nvar isTypeBool = (type) => type === \"core::bool\";\nvar isTypeContractAddress = (type) => type === \"core::starknet::contract_address::ContractAddress\";\nvar isTypeEthAddress = (type) => type === \"core::starknet::eth_address::EthAddress\";\nvar isTypeBytes31 = (type) => type === \"core::bytes_31::bytes31\";\nvar isTypeByteArray = (type) => type === \"core::byte_array::ByteArray\";\nvar isTypeSecp256k1Point = (type) => type === \"core::starknet::secp256k1::Secp256k1Point\";\nvar isCairo1Type = (type) => type.includes(\"::\");\nvar getArrayType = (type) => {\n  if (isCairo1Type(type)) {\n    return type.substring(type.indexOf(\"<\") + 1, type.lastIndexOf(\">\"));\n  }\n  return type.replace(\"*\", \"\");\n};\nfunction isCairo1Abi(abi) {\n  const { cairo } = getAbiContractVersion(abi);\n  if (cairo === void 0) {\n    throw Error(\"Unable to determine Cairo version\");\n  }\n  return cairo === \"1\";\n}\nfunction isTypeNonZero(type) {\n  return type.startsWith(\"core::zeroable::NonZero::\");\n}\nfunction getAbiContractVersion(abi) {\n  if (abi.find((it) => it.type === \"interface\")) {\n    return { cairo: \"1\", compiler: \"2\" };\n  }\n  const testFunction = abi.find(\n    (it) => it.type === \"function\" && (it.inputs.length || it.outputs.length)\n  );\n  if (!testFunction) {\n    return { cairo: void 0, compiler: void 0 };\n  }\n  const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;\n  if (isCairo1Type(io[0].type)) {\n    return { cairo: \"1\", compiler: \"1\" };\n  }\n  return { cairo: \"0\", compiler: \"0\" };\n}\nvar uint256 = (it) => {\n  return new CairoUint256(it).toUint256DecimalString();\n};\nvar uint512 = (it) => {\n  return new CairoUint512(it).toUint512DecimalString();\n};\nvar tuple = (...args) => ({ ...args });\nfunction felt(it) {\n  return CairoFelt(it);\n}\n\n// src/utils/calldata/enum/CairoCustomEnum.ts\nvar CairoCustomEnum = class {\n  /**\n   * direct readonly access to variants of the Cairo Custom Enum.\n   * @returns a value of type any\n   * @example\n   * ```typescript\n   * const successValue = myCairoEnum.variant.Success;\n   */\n  variant;\n  /**\n   * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.\n   */\n  constructor(enumContent) {\n    const variantsList = Object.values(enumContent);\n    if (variantsList.length === 0) {\n      throw new Error(\"This Enum must have at least 1 variant\");\n    }\n    const nbActiveVariants = variantsList.filter(\n      (content) => typeof content !== \"undefined\"\n    ).length;\n    if (nbActiveVariants !== 1) {\n      throw new Error(\"This Enum must have exactly one active variant\");\n    }\n    this.variant = enumContent;\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   */\n  unwrap() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return void 0;\n    }\n    return activeVariant[1];\n  }\n  /**\n   *\n   * @returns the name of the valid variant of a Cairo custom Enum.\n   */\n  activeVariant() {\n    const variants = Object.entries(this.variant);\n    const activeVariant = variants.find((item) => typeof item[1] !== \"undefined\");\n    if (typeof activeVariant === \"undefined\") {\n      return \"\";\n    }\n    return activeVariant[0];\n  }\n};\n\n// src/utils/calldata/enum/CairoOption.ts\nvar CairoOptionVariant = /* @__PURE__ */ ((CairoOptionVariant2) => {\n  CairoOptionVariant2[CairoOptionVariant2[\"Some\"] = 0] = \"Some\";\n  CairoOptionVariant2[CairoOptionVariant2[\"None\"] = 1] = \"None\";\n  return CairoOptionVariant2;\n})(CairoOptionVariant || {});\nvar CairoOption = class {\n  Some;\n  None;\n  constructor(variant, someContent) {\n    if (!(variant in CairoOptionVariant)) {\n      throw new Error(\"Wrong variant : should be CairoOptionVariant.Some or .None.\");\n    }\n    if (variant === 0 /* Some */) {\n      if (typeof someContent === \"undefined\") {\n        throw new Error(\n          'The creation of a Cairo Option with \"Some\" variant needs a content as input.'\n        );\n      }\n      this.Some = someContent;\n      this.None = void 0;\n    } else {\n      this.Some = void 0;\n      this.None = true;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo custom Enum.\n   *  If None, returns 'undefined'.\n   */\n  unwrap() {\n    if (this.None) {\n      return void 0;\n    }\n    return this.Some;\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isSome'.\n   */\n  isSome() {\n    return !(typeof this.Some === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isNone'.\n   */\n  isNone() {\n    return this.None === true;\n  }\n};\n\n// src/utils/calldata/enum/CairoResult.ts\nvar CairoResultVariant = /* @__PURE__ */ ((CairoResultVariant2) => {\n  CairoResultVariant2[CairoResultVariant2[\"Ok\"] = 0] = \"Ok\";\n  CairoResultVariant2[CairoResultVariant2[\"Err\"] = 1] = \"Err\";\n  return CairoResultVariant2;\n})(CairoResultVariant || {});\nvar CairoResult = class {\n  Ok;\n  Err;\n  constructor(variant, resultContent) {\n    if (!(variant in CairoResultVariant)) {\n      throw new Error(\"Wrong variant : should be CairoResultVariant.Ok or .Err.\");\n    }\n    if (variant === 0 /* Ok */) {\n      this.Ok = resultContent;\n      this.Err = void 0;\n    } else {\n      this.Ok = void 0;\n      this.Err = resultContent;\n    }\n  }\n  /**\n   *\n   * @returns the content of the valid variant of a Cairo Result.\n   */\n  unwrap() {\n    if (typeof this.Ok !== \"undefined\") {\n      return this.Ok;\n    }\n    if (typeof this.Err !== \"undefined\") {\n      return this.Err;\n    }\n    throw new Error(\"Both Result.Ok and .Err are undefined. Not authorized.\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'Ok'.\n   */\n  isOk() {\n    return !(typeof this.Ok === \"undefined\");\n  }\n  /**\n   *\n   * @returns true if the valid variant is 'isErr'.\n   */\n  isErr() {\n    return !(typeof this.Err === \"undefined\");\n  }\n};\n\n// src/utils/calldata/formatter.ts\nvar guard = {\n  isBN: (data, type, key) => {\n    if (!isBigInt(data[key]))\n      throw new Error(\n        `Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${data[key]} to be BN instead it is ${typeof data[key]}`\n      );\n  },\n  unknown: (data, type, key) => {\n    throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);\n  }\n};\nfunction formatter(data, type, sameType) {\n  return Object.entries(data).reduce(\n    (acc, [key, value]) => {\n      const elType = sameType ?? type[key];\n      if (!(key in type) && !sameType) {\n        acc[key] = value;\n        return acc;\n      }\n      if (elType === \"string\") {\n        if (Array.isArray(data[key])) {\n          const arrayStr = formatter(\n            data[key],\n            data[key].map((_) => elType)\n          );\n          acc[key] = Object.values(arrayStr).join(\"\");\n          return acc;\n        }\n        guard.isBN(data, type, key);\n        acc[key] = decodeShortString(value);\n        return acc;\n      }\n      if (elType === \"number\") {\n        guard.isBN(data, type, key);\n        acc[key] = Number(value);\n        return acc;\n      }\n      if (typeof elType === \"function\") {\n        acc[key] = elType(value);\n        return acc;\n      }\n      if (Array.isArray(elType)) {\n        const arrayObj = formatter(data[key], elType, elType[0]);\n        acc[key] = Object.values(arrayObj);\n        return acc;\n      }\n      if (typeof elType === \"object\") {\n        acc[key] = formatter(data[key], elType);\n        return acc;\n      }\n      guard.unknown(data, type, key);\n      return acc;\n    },\n    {}\n  );\n}\n\n// src/utils/calldata/parser/parser-0-1.1.0.ts\nvar AbiParser1 = class {\n  abi;\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length without '_len' inputs\n   * cairo 0 reducer\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.reduce((acc, input) => !isLen(input.name) ? acc + 1 : acc, 0);\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    return this.abi.find((it) => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi;\n  }\n};\n\n// src/utils/calldata/parser/parser-2.0.0.ts\nvar AbiParser2 = class {\n  abi;\n  constructor(abi) {\n    this.abi = abi;\n  }\n  /**\n   * abi method inputs length\n   * @param abiMethod FunctionAbi\n   * @returns number\n   */\n  methodInputsLength(abiMethod) {\n    return abiMethod.inputs.length;\n  }\n  /**\n   * get method definition from abi\n   * @param name string\n   * @returns FunctionAbi | undefined\n   */\n  getMethod(name) {\n    const intf = this.abi.find(\n      (it) => it.type === \"interface\"\n    );\n    return intf.items.find((it) => it.name === name);\n  }\n  /**\n   * Get Abi in legacy format\n   * @returns Abi\n   */\n  getLegacyFormat() {\n    return this.abi.flatMap((e) => {\n      if (e.type === \"interface\") {\n        return e.items;\n      }\n      return e;\n    });\n  }\n};\n\n// src/utils/calldata/parser/index.ts\nfunction createAbiParser(abi) {\n  const version = getAbiVersion(abi);\n  if (version === 0 || version === 1) {\n    return new AbiParser1(abi);\n  }\n  if (version === 2) {\n    return new AbiParser2(abi);\n  }\n  throw Error(`Unsupported ABI version ${version}`);\n}\nfunction getAbiVersion(abi) {\n  if (abi.find((it) => it.type === \"interface\"))\n    return 2;\n  if (isCairo1Abi(abi))\n    return 1;\n  return 0;\n}\nfunction isNoConstructorValid(method, argsCalldata, abiMethod) {\n  return method === \"constructor\" && !abiMethod && !argsCalldata.length;\n}\n\n// src/utils/calldata/tuple.ts\nfunction parseNamedTuple(namedTuple) {\n  const name = namedTuple.substring(0, namedTuple.indexOf(\":\"));\n  const type = namedTuple.substring(name.length + \":\".length);\n  return { name, type };\n}\nfunction parseSubTuple(s) {\n  if (!s.includes(\"(\"))\n    return { subTuple: [], result: s };\n  const subTuple = [];\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \"(\") {\n      let counter = 1;\n      const lBracket = i;\n      i++;\n      while (counter) {\n        if (s[i] === \")\")\n          counter--;\n        if (s[i] === \"(\")\n          counter++;\n        i++;\n      }\n      subTuple.push(s.substring(lBracket, i));\n      result += \" \";\n      i--;\n    } else {\n      result += s[i];\n    }\n    i++;\n  }\n  return {\n    subTuple,\n    result\n  };\n}\nfunction extractCairo0Tuple(type) {\n  const cleanType = type.replace(/\\s/g, \"\").slice(1, -1);\n  const { subTuple, result } = parseSubTuple(cleanType);\n  let recomposed = result.split(\",\").map((it) => {\n    return subTuple.length ? it.replace(\" \", subTuple.shift()) : it;\n  });\n  if (isTypeNamedTuple(type)) {\n    recomposed = recomposed.reduce((acc, it) => {\n      return acc.concat(parseNamedTuple(it));\n    }, []);\n  }\n  return recomposed;\n}\nfunction getClosureOffset(input, open, close) {\n  for (let i = 0, counter = 0; i < input.length; i++) {\n    if (input[i] === open) {\n      counter++;\n    } else if (input[i] === close && --counter === 0) {\n      return i;\n    }\n  }\n  return Number.POSITIVE_INFINITY;\n}\nfunction extractCairo1Tuple(type) {\n  const input = type.slice(1, -1);\n  const result = [];\n  let currentIndex = 0;\n  let limitIndex;\n  while (currentIndex < input.length) {\n    switch (true) {\n      case input[currentIndex] === \"(\": {\n        limitIndex = currentIndex + getClosureOffset(input.slice(currentIndex), \"(\", \")\") + 1;\n        break;\n      }\n      case (input.startsWith(\"core::result::Result::<\", currentIndex) || input.startsWith(\"core::array::Array::<\", currentIndex) || input.startsWith(\"core::option::Option::<\", currentIndex)): {\n        limitIndex = currentIndex + getClosureOffset(input.slice(currentIndex), \"<\", \">\") + 1;\n        break;\n      }\n      default: {\n        const commaIndex = input.indexOf(\",\", currentIndex);\n        limitIndex = commaIndex !== -1 ? commaIndex : Number.POSITIVE_INFINITY;\n      }\n    }\n    result.push(input.slice(currentIndex, limitIndex));\n    currentIndex = limitIndex + 2;\n  }\n  return result;\n}\nfunction extractTupleMemberTypes(type) {\n  if (isCairo1Type(type)) {\n    return extractCairo1Tuple(type);\n  }\n  return extractCairo0Tuple(type);\n}\n\n// src/utils/calldata/propertyOrder.ts\nfunction errorU256(key) {\n  return Error(\n    `Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`\n  );\n}\nfunction errorU512(key) {\n  return Error(\n    `Your object includes the property : ${key}, containing an Uint512 object without the 'limb0' to 'limb3' keys.`\n  );\n}\nfunction orderPropsByAbi(unorderedObject, abiOfObject, structs, enums) {\n  const orderInput = (unorderedItem, abiType) => {\n    if (isTypeArray(abiType)) {\n      return orderArray(unorderedItem, abiType);\n    }\n    if (isTypeEnum(abiType, enums)) {\n      const abiObj = enums[abiType];\n      return orderEnum(unorderedItem, abiObj);\n    }\n    if (isTypeTuple(abiType)) {\n      return orderTuple(unorderedItem, abiType);\n    }\n    if (isTypeEthAddress(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeNonZero(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeByteArray(abiType)) {\n      return unorderedItem;\n    }\n    if (isTypeSecp256k1Point(abiType)) {\n      return unorderedItem;\n    }\n    if (CairoUint256.isAbiType(abiType)) {\n      const u256 = unorderedItem;\n      if (typeof u256 !== \"object\") {\n        return u256;\n      }\n      if (!(\"low\" in u256 && \"high\" in u256)) {\n        throw errorU256(abiType);\n      }\n      return { low: u256.low, high: u256.high };\n    }\n    if (CairoUint512.isAbiType(abiType)) {\n      const u512 = unorderedItem;\n      if (typeof u512 !== \"object\") {\n        return u512;\n      }\n      if (![\"limb0\", \"limb1\", \"limb2\", \"limb3\"].every((key) => key in u512)) {\n        throw errorU512(abiType);\n      }\n      return { limb0: u512.limb0, limb1: u512.limb1, limb2: u512.limb2, limb3: u512.limb3 };\n    }\n    if (isTypeStruct(abiType, structs)) {\n      const abiOfStruct = structs[abiType].members;\n      return orderStruct(unorderedItem, abiOfStruct);\n    }\n    return unorderedItem;\n  };\n  const orderStruct = (unorderedObject2, abiObject) => {\n    const orderedObject2 = abiObject.reduce((orderedObject, abiParam) => {\n      const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {\n        enumerable: true,\n        value: value ?? unorderedObject2[abiParam.name]\n      });\n      if (unorderedObject2[abiParam.name] === \"undefined\") {\n        if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {\n          throw Error(`Your object needs a property with key : ${abiParam.name} .`);\n        }\n      }\n      setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  };\n  function orderArray(myArray, abiParam) {\n    const typeInArray = getArrayType(abiParam);\n    if (isString(myArray)) {\n      return myArray;\n    }\n    return myArray.map((myElem) => orderInput(myElem, typeInArray));\n  }\n  function orderTuple(unorderedObject2, abiParam) {\n    const typeList = extractTupleMemberTypes(abiParam);\n    const orderedObject2 = typeList.reduce((orderedObject, abiTypeCairoX, index) => {\n      const myObjKeys = Object.keys(unorderedObject2);\n      const setProperty = (value) => Object.defineProperty(orderedObject, index.toString(), {\n        enumerable: true,\n        value: value ?? unorderedObject2[myObjKeys[index]]\n      });\n      const abiType = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX;\n      setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));\n      return orderedObject;\n    }, {});\n    return orderedObject2;\n  }\n  const orderEnum = (unorderedObject2, abiObject) => {\n    if (isTypeResult(abiObject.name)) {\n      const unorderedResult = unorderedObject2;\n      const resultOkType = abiObject.name.substring(\n        abiObject.name.indexOf(\"<\") + 1,\n        abiObject.name.lastIndexOf(\",\")\n      );\n      const resultErrType = abiObject.name.substring(\n        abiObject.name.indexOf(\",\") + 1,\n        abiObject.name.lastIndexOf(\">\")\n      );\n      if (unorderedResult.isOk()) {\n        return new CairoResult(\n          0 /* Ok */,\n          orderInput(unorderedObject2.unwrap(), resultOkType)\n        );\n      }\n      return new CairoResult(\n        1 /* Err */,\n        orderInput(unorderedObject2.unwrap(), resultErrType)\n      );\n    }\n    if (isTypeOption(abiObject.name)) {\n      const unorderedOption = unorderedObject2;\n      const resultSomeType = abiObject.name.substring(\n        abiObject.name.indexOf(\"<\") + 1,\n        abiObject.name.lastIndexOf(\">\")\n      );\n      if (unorderedOption.isSome()) {\n        return new CairoOption(\n          0 /* Some */,\n          orderInput(unorderedOption.unwrap(), resultSomeType)\n        );\n      }\n      return new CairoOption(1 /* None */, {});\n    }\n    const unorderedCustomEnum = unorderedObject2;\n    const variants = Object.entries(unorderedCustomEnum.variant);\n    const newEntries = variants.map((variant) => {\n      if (typeof variant[1] === \"undefined\") {\n        return variant;\n      }\n      const variantType = abiObject.type.substring(\n        abiObject.type.lastIndexOf(\"<\") + 1,\n        abiObject.type.lastIndexOf(\">\")\n      );\n      if (variantType === \"()\") {\n        return variant;\n      }\n      return [variant[0], orderInput(unorderedCustomEnum.unwrap(), variantType)];\n    });\n    return new CairoCustomEnum(Object.fromEntries(newEntries));\n  };\n  const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam) => {\n    const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {\n      enumerable: true,\n      value\n    });\n    if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {\n      return orderedObject;\n    }\n    setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));\n    return orderedObject;\n  }, {});\n  return finalOrderedObject;\n}\n\n// src/utils/calldata/requestParser.ts\nfunction parseBaseTypes(type, val) {\n  switch (true) {\n    case CairoUint256.isAbiType(type):\n      return new CairoUint256(val).toApiRequest();\n    case CairoUint512.isAbiType(type):\n      return new CairoUint512(val).toApiRequest();\n    case isTypeBytes31(type):\n      return encodeShortString(val.toString());\n    case isTypeSecp256k1Point(type): {\n      const pubKeyETH = removeHexPrefix(toHex(val)).padStart(128, \"0\");\n      const pubKeyETHy = uint256(addHexPrefix(pubKeyETH.slice(-64)));\n      const pubKeyETHx = uint256(addHexPrefix(pubKeyETH.slice(0, -64)));\n      return [\n        felt(pubKeyETHx.low),\n        felt(pubKeyETHx.high),\n        felt(pubKeyETHy.low),\n        felt(pubKeyETHy.high)\n      ];\n    }\n    default:\n      return felt(val);\n  }\n}\nfunction parseTuple(element, typeStr) {\n  const memberTypes = extractTupleMemberTypes(typeStr);\n  const elements = Object.values(element);\n  if (elements.length !== memberTypes.length) {\n    throw Error(\n      `ParseTuple: provided and expected abi tuple size do not match.\n      provided: ${elements} \n      expected: ${memberTypes}`\n    );\n  }\n  return memberTypes.map((it, dx) => {\n    return {\n      element: elements[dx],\n      type: it.type ?? it\n    };\n  });\n}\nfunction parseByteArray(element) {\n  const myByteArray = byteArrayFromString(element);\n  return [\n    myByteArray.data.length.toString(),\n    ...myByteArray.data.map((bn) => bn.toString()),\n    myByteArray.pending_word.toString(),\n    myByteArray.pending_word_len.toString()\n  ];\n}\nfunction parseCalldataValue(element, type, structs, enums) {\n  if (element === void 0) {\n    throw Error(`Missing parameter for type ${type}`);\n  }\n  if (Array.isArray(element)) {\n    const result = [];\n    result.push(felt(element.length));\n    const arrayType = getArrayType(type);\n    return element.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(it, arrayType, structs, enums));\n    }, result);\n  }\n  if (structs[type] && structs[type].members.length) {\n    if (CairoUint256.isAbiType(type)) {\n      return new CairoUint256(element).toApiRequest();\n    }\n    if (CairoUint512.isAbiType(type)) {\n      return new CairoUint512(element).toApiRequest();\n    }\n    if (type === \"core::starknet::eth_address::EthAddress\")\n      return parseBaseTypes(type, element);\n    if (type === \"core::byte_array::ByteArray\")\n      return parseByteArray(element);\n    const { members } = structs[type];\n    const subElement = element;\n    return members.reduce((acc, it) => {\n      return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));\n    }, []);\n  }\n  if (isTypeTuple(type)) {\n    const tupled = parseTuple(element, type);\n    return tupled.reduce((acc, it) => {\n      const parsedData = parseCalldataValue(it.element, it.type, structs, enums);\n      return acc.concat(parsedData);\n    }, []);\n  }\n  if (CairoUint256.isAbiType(type)) {\n    return new CairoUint256(element).toApiRequest();\n  }\n  if (CairoUint512.isAbiType(type)) {\n    return new CairoUint512(element).toApiRequest();\n  }\n  if (isTypeEnum(type, enums)) {\n    const { variants } = enums[type];\n    if (isTypeOption(type)) {\n      const myOption = element;\n      if (myOption.isSome()) {\n        const listTypeVariant2 = variants.find((variant) => variant.name === \"Some\");\n        if (typeof listTypeVariant2 === \"undefined\") {\n          throw Error(`Error in abi : Option has no 'Some' variant.`);\n        }\n        const typeVariantSome = listTypeVariant2.type;\n        if (typeVariantSome === \"()\") {\n          return 0 /* Some */.toString();\n        }\n        const parsedParameter2 = parseCalldataValue(\n          myOption.unwrap(),\n          typeVariantSome,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter2)) {\n          return [0 /* Some */.toString(), ...parsedParameter2];\n        }\n        return [0 /* Some */.toString(), parsedParameter2];\n      }\n      return 1 /* None */.toString();\n    }\n    if (isTypeResult(type)) {\n      const myResult = element;\n      if (myResult.isOk()) {\n        const listTypeVariant3 = variants.find((variant) => variant.name === \"Ok\");\n        if (typeof listTypeVariant3 === \"undefined\") {\n          throw Error(`Error in abi : Result has no 'Ok' variant.`);\n        }\n        const typeVariantOk = listTypeVariant3.type;\n        if (typeVariantOk === \"()\") {\n          return 0 /* Ok */.toString();\n        }\n        const parsedParameter3 = parseCalldataValue(\n          myResult.unwrap(),\n          typeVariantOk,\n          structs,\n          enums\n        );\n        if (Array.isArray(parsedParameter3)) {\n          return [0 /* Ok */.toString(), ...parsedParameter3];\n        }\n        return [0 /* Ok */.toString(), parsedParameter3];\n      }\n      const listTypeVariant2 = variants.find((variant) => variant.name === \"Err\");\n      if (typeof listTypeVariant2 === \"undefined\") {\n        throw Error(`Error in abi : Result has no 'Err' variant.`);\n      }\n      const typeVariantErr = listTypeVariant2.type;\n      if (typeVariantErr === \"()\") {\n        return 1 /* Err */.toString();\n      }\n      const parsedParameter2 = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);\n      if (Array.isArray(parsedParameter2)) {\n        return [1 /* Err */.toString(), ...parsedParameter2];\n      }\n      return [1 /* Err */.toString(), parsedParameter2];\n    }\n    const myEnum = element;\n    const activeVariant = myEnum.activeVariant();\n    const listTypeVariant = variants.find((variant) => variant.name === activeVariant);\n    if (typeof listTypeVariant === \"undefined\") {\n      throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);\n    }\n    const typeActiveVariant = listTypeVariant.type;\n    const numActiveVariant = variants.findIndex((variant) => variant.name === activeVariant);\n    if (typeActiveVariant === \"()\") {\n      return numActiveVariant.toString();\n    }\n    const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);\n    if (Array.isArray(parsedParameter)) {\n      return [numActiveVariant.toString(), ...parsedParameter];\n    }\n    return [numActiveVariant.toString(), parsedParameter];\n  }\n  if (isTypeNonZero(type)) {\n    return parseBaseTypes(getArrayType(type), element);\n  }\n  if (typeof element === \"object\") {\n    throw Error(`Parameter ${element} do not align with abi parameter ${type}`);\n  }\n  return parseBaseTypes(type, element);\n}\nfunction parseCalldataField(argsIterator, input, structs, enums) {\n  const { name, type } = input;\n  let { value } = argsIterator.next();\n  switch (true) {\n    case isTypeArray(type):\n      if (!Array.isArray(value) && !isText(value)) {\n        throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);\n      }\n      if (isString(value)) {\n        value = splitLongString(value);\n      }\n      return parseCalldataValue(value, input.type, structs, enums);\n    case isTypeNonZero(type):\n      return parseBaseTypes(getArrayType(type), value);\n    case type === \"core::starknet::eth_address::EthAddress\":\n      return parseBaseTypes(type, value);\n    case (isTypeStruct(type, structs) || isTypeTuple(type) || CairoUint256.isAbiType(type) || CairoUint256.isAbiType(type)):\n      return parseCalldataValue(value, type, structs, enums);\n    case isTypeEnum(type, enums):\n      return parseCalldataValue(\n        value,\n        type,\n        structs,\n        enums\n      );\n    default:\n      return parseBaseTypes(type, value);\n  }\n}\n\n// src/utils/calldata/responseParser.ts\nfunction parseBaseTypes2(type, it) {\n  let temp;\n  switch (true) {\n    case isTypeBool(type):\n      temp = it.next().value;\n      return Boolean(BigInt(temp));\n    case CairoUint256.isAbiType(type):\n      const low = it.next().value;\n      const high = it.next().value;\n      return new CairoUint256(low, high).toBigInt();\n    case CairoUint512.isAbiType(type):\n      const limb0 = it.next().value;\n      const limb1 = it.next().value;\n      const limb2 = it.next().value;\n      const limb3 = it.next().value;\n      return new CairoUint512(limb0, limb1, limb2, limb3).toBigInt();\n    case type === \"core::starknet::eth_address::EthAddress\":\n      temp = it.next().value;\n      return BigInt(temp);\n    case type === \"core::bytes_31::bytes31\":\n      temp = it.next().value;\n      return decodeShortString(temp);\n    case isTypeSecp256k1Point(type):\n      const xLow = removeHexPrefix(it.next().value).padStart(32, \"0\");\n      const xHigh = removeHexPrefix(it.next().value).padStart(32, \"0\");\n      const yLow = removeHexPrefix(it.next().value).padStart(32, \"0\");\n      const yHigh = removeHexPrefix(it.next().value).padStart(32, \"0\");\n      const pubK = BigInt(addHexPrefix(xHigh + xLow + yHigh + yLow));\n      return pubK;\n    default:\n      temp = it.next().value;\n      return BigInt(temp);\n  }\n}\nfunction parseResponseValue(responseIterator, element, structs, enums) {\n  if (element.type === \"()\") {\n    return {};\n  }\n  if (CairoUint256.isAbiType(element.type)) {\n    const low = responseIterator.next().value;\n    const high = responseIterator.next().value;\n    return new CairoUint256(low, high).toBigInt();\n  }\n  if (CairoUint512.isAbiType(element.type)) {\n    const limb0 = responseIterator.next().value;\n    const limb1 = responseIterator.next().value;\n    const limb2 = responseIterator.next().value;\n    const limb3 = responseIterator.next().value;\n    return new CairoUint512(limb0, limb1, limb2, limb3).toBigInt();\n  }\n  if (isTypeByteArray(element.type)) {\n    const parsedBytes31Arr = [];\n    const bytes31ArrLen = BigInt(responseIterator.next().value);\n    while (parsedBytes31Arr.length < bytes31ArrLen) {\n      parsedBytes31Arr.push(toHex(responseIterator.next().value));\n    }\n    const pending_word = toHex(responseIterator.next().value);\n    const pending_word_len = BigInt(responseIterator.next().value);\n    const myByteArray = {\n      data: parsedBytes31Arr,\n      pending_word,\n      pending_word_len\n    };\n    return stringFromByteArray(myByteArray);\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = { name: \"\", type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  if (isTypeNonZero(element.type)) {\n    const el = { name: \"\", type: getArrayType(element.type) };\n    return parseResponseValue(responseIterator, el, structs, enums);\n  }\n  if (structs && element.type in structs && structs[element.type]) {\n    if (element.type === \"core::starknet::eth_address::EthAddress\") {\n      return parseBaseTypes2(element.type, responseIterator);\n    }\n    return structs[element.type].members.reduce((acc, el) => {\n      acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (enums && element.type in enums && enums[element.type]) {\n    const variantNum = Number(responseIterator.next().value);\n    const rawEnum = enums[element.type].variants.reduce((acc, variant, num) => {\n      if (num === variantNum) {\n        acc[variant.name] = parseResponseValue(\n          responseIterator,\n          { name: \"\", type: variant.type },\n          structs,\n          enums\n        );\n        return acc;\n      }\n      acc[variant.name] = void 0;\n      return acc;\n    }, {});\n    if (element.type.startsWith(\"core::option::Option\")) {\n      const content = variantNum === 0 /* Some */ ? rawEnum.Some : void 0;\n      return new CairoOption(variantNum, content);\n    }\n    if (element.type.startsWith(\"core::result::Result\")) {\n      let content;\n      if (variantNum === 0 /* Ok */) {\n        content = rawEnum.Ok;\n      } else {\n        content = rawEnum.Err;\n      }\n      return new CairoResult(variantNum, content);\n    }\n    const customEnum = new CairoCustomEnum(rawEnum);\n    return customEnum;\n  }\n  if (isTypeTuple(element.type)) {\n    const memberTypes = extractTupleMemberTypes(element.type);\n    return memberTypes.reduce((acc, it, idx) => {\n      const name = it?.name ? it.name : idx;\n      const type = it?.type ? it.type : it;\n      const el = { name, type };\n      acc[name] = parseResponseValue(responseIterator, el, structs, enums);\n      return acc;\n    }, {});\n  }\n  if (isTypeArray(element.type)) {\n    const parsedDataArr = [];\n    const el = { name: \"\", type: getArrayType(element.type) };\n    const len = BigInt(responseIterator.next().value);\n    while (parsedDataArr.length < len) {\n      parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));\n    }\n    return parsedDataArr;\n  }\n  return parseBaseTypes2(element.type, responseIterator);\n}\nfunction responseParser(responseIterator, output, structs, enums, parsedResult) {\n  const { name, type } = output;\n  let temp;\n  switch (true) {\n    case isLen(name):\n      temp = responseIterator.next().value;\n      return BigInt(temp);\n    case (structs && type in structs || isTypeTuple(type)):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case (enums && isTypeEnum(type, enums)):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    case isTypeArray(type):\n      if (isCairo1Type(type)) {\n        return parseResponseValue(responseIterator, output, structs, enums);\n      }\n      const parsedDataArr = [];\n      if (parsedResult && parsedResult[`${name}_len`]) {\n        const arrLen = parsedResult[`${name}_len`];\n        while (parsedDataArr.length < arrLen) {\n          parsedDataArr.push(\n            parseResponseValue(\n              responseIterator,\n              { name, type: output.type.replace(\"*\", \"\") },\n              structs,\n              enums\n            )\n          );\n        }\n      }\n      return parsedDataArr;\n    case isTypeNonZero(type):\n      return parseResponseValue(responseIterator, output, structs, enums);\n    default:\n      return parseBaseTypes2(type, responseIterator);\n  }\n}\n\n// src/utils/calldata/validate.ts\nvar validateFelt = (parameter, input) => {\n  assert(\n    isString(parameter) || isNumber(parameter) || isBigInt(parameter),\n    `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`\n  );\n  if (isString(parameter) && !isHex(parameter))\n    return;\n  const param = BigInt(parameter.toString(10));\n  assert(\n    // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266\n    param >= 0n && param <= 2n ** 252n - 1n,\n    `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n  );\n};\nvar validateBytes31 = (parameter, input) => {\n  assert(isString(parameter), `Validate: arg ${input.name} should be a string.`);\n  assert(\n    parameter.length < 32,\n    `Validate: arg ${input.name} cairo typed ${input.type} should be a string of less than 32 characters.`\n  );\n};\nvar validateByteArray = (parameter, input) => {\n  assert(isString(parameter), `Validate: arg ${input.name} should be a string.`);\n};\nvar validateUint = (parameter, input) => {\n  if (isNumber(parameter)) {\n    assert(\n      parameter <= Number.MAX_SAFE_INTEGER,\n      `Validation: Parameter is to large to be typed as Number use (BigInt or String)`\n    );\n  }\n  assert(\n    isString(parameter) || isNumber(parameter) || isBigInt(parameter) || typeof parameter === \"object\" && \"low\" in parameter && \"high\" in parameter || typeof parameter === \"object\" && [\"limb0\", \"limb1\", \"limb2\", \"limb3\"].every((key) => key in parameter),\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`\n  );\n  let param;\n  switch (input.type) {\n    case \"core::integer::u256\" /* u256 */:\n      param = new CairoUint256(parameter).toBigInt();\n      break;\n    case \"core::integer::u512\" /* u512 */:\n      param = new CairoUint512(parameter).toBigInt();\n      break;\n    default:\n      param = toBigInt(parameter);\n  }\n  switch (input.type) {\n    case \"core::integer::u8\" /* u8 */:\n      assert(\n        param >= 0n && param <= 255n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`\n      );\n      break;\n    case \"core::integer::u16\" /* u16 */:\n      assert(\n        param >= 0n && param <= 65535n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`\n      );\n      break;\n    case \"core::integer::u32\" /* u32 */:\n      assert(\n        param >= 0n && param <= 4294967295n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`\n      );\n      break;\n    case \"core::integer::u64\" /* u64 */:\n      assert(\n        param >= 0n && param <= 2n ** 64n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`\n      );\n      break;\n    case \"core::integer::u128\" /* u128 */:\n      assert(\n        param >= 0n && param <= 2n ** 128n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`\n      );\n      break;\n    case \"core::integer::u256\" /* u256 */:\n      assert(\n        param >= 0n && param <= 2n ** 256n - 1n,\n        `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`\n      );\n      break;\n    case \"core::integer::u512\" /* u512 */:\n      assert(CairoUint512.is(param), `Validate: arg ${input.name} is ${input.type} 0 - 2^512-1`);\n      break;\n    case \"core::starknet::class_hash::ClassHash\" /* ClassHash */:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    case \"core::starknet::contract_address::ContractAddress\" /* ContractAddress */:\n      assert(\n        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245\n        param >= 0n && param <= 2n ** 252n - 1n,\n        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`\n      );\n      break;\n    case \"core::starknet::secp256k1::Secp256k1Point\" /* Secp256k1Point */: {\n      assert(\n        param >= 0n && param <= 2n ** 512n - 1n,\n        `Validate: arg ${input.name} must be ${input.type} : a 512 bits number.`\n      );\n      break;\n    }\n    default:\n      break;\n  }\n};\nvar validateBool = (parameter, input) => {\n  assert(\n    isBoolean(parameter),\n    `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`\n  );\n};\nvar validateStruct = (parameter, input, structs) => {\n  if (input.type === \"core::integer::u256\" /* u256 */ || input.type === \"core::integer::u512\" /* u512 */) {\n    validateUint(parameter, input);\n    return;\n  }\n  if (input.type === \"core::starknet::eth_address::EthAddress\") {\n    assert(\n      typeof parameter !== \"object\",\n      `EthAddress type is waiting a BigNumberish. Got ${parameter}`\n    );\n    const param = BigInt(parameter.toString(10));\n    assert(\n      // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259\n      param >= 0n && param <= 2n ** 160n - 1n,\n      `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`\n    );\n    return;\n  }\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`\n  );\n  structs[input.type].members.forEach(({ name }) => {\n    assert(\n      Object.keys(parameter).includes(name),\n      `Validate: arg ${input.name} should have a property ${name}`\n    );\n  });\n};\nvar validateEnum = (parameter, input) => {\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`\n  );\n  const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));\n  const keys = [...Object.getOwnPropertyNames(parameter), ...methodsKeys];\n  if (isTypeOption(input.type) && keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n    return;\n  }\n  if (isTypeResult(input.type) && keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n    return;\n  }\n  if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n    return;\n  }\n  throw new Error(\n    `Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`\n  );\n};\nvar validateTuple = (parameter, input) => {\n  assert(\n    typeof parameter === \"object\" && !Array.isArray(parameter),\n    `Validate: arg ${input.name} should be a tuple (defined as object)`\n  );\n};\nvar validateArray = (parameter, input, structs, enums) => {\n  const baseType = getArrayType(input.type);\n  if (isTypeFelt(baseType) && isLongText(parameter)) {\n    return;\n  }\n  assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);\n  switch (true) {\n    case isTypeFelt(baseType):\n      parameter.forEach((param) => validateFelt(param, input));\n      break;\n    case isTypeTuple(baseType):\n      parameter.forEach((it) => validateTuple(it, { name: input.name, type: baseType }));\n      break;\n    case isTypeArray(baseType):\n      parameter.forEach(\n        (param) => validateArray(param, { name: \"\", type: baseType }, structs, enums)\n      );\n      break;\n    case isTypeStruct(baseType, structs):\n      parameter.forEach(\n        (it) => validateStruct(it, { name: input.name, type: baseType }, structs)\n      );\n      break;\n    case isTypeEnum(baseType, enums):\n      parameter.forEach((it) => validateEnum(it, { name: input.name, type: baseType }));\n      break;\n    case (isTypeUint(baseType) || isTypeLiteral(baseType)):\n      parameter.forEach((param) => validateUint(param, { name: \"\", type: baseType }));\n      break;\n    case isTypeBool(baseType):\n      parameter.forEach((param) => validateBool(param, input));\n      break;\n    default:\n      throw new Error(\n        `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n      );\n  }\n};\nvar validateNonZero = (parameter, input) => {\n  const baseType = getArrayType(input.type);\n  assert(\n    isTypeUint(baseType) && baseType !== CairoUint512.abiSelector || isTypeFelt(baseType),\n    `Validate: ${input.name} type is not authorized for NonZero type.`\n  );\n  switch (true) {\n    case isTypeFelt(baseType):\n      validateFelt(parameter, input);\n      assert(\n        BigInt(parameter.toString(10)) > 0,\n        \"Validate: value 0 is not authorized in NonZero felt252 type.\"\n      );\n      break;\n    case isTypeUint(baseType):\n      validateUint(parameter, { name: \"\", type: baseType });\n      switch (input.type) {\n        case \"core::integer::u256\" /* u256 */:\n          assert(\n            new CairoUint256(parameter).toBigInt() > 0,\n            \"Validate: value 0 is not authorized in NonZero uint256 type.\"\n          );\n          break;\n        default:\n          assert(\n            toBigInt(parameter) > 0,\n            \"Validate: value 0 is not authorized in NonZero uint type.\"\n          );\n      }\n      break;\n    default:\n      throw new Error(\n        `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n      );\n  }\n};\nfunction validateFields(abiMethod, args, structs, enums) {\n  abiMethod.inputs.reduce((acc, input) => {\n    const parameter = args[acc];\n    switch (true) {\n      case isLen(input.name):\n        return acc;\n      case isTypeFelt(input.type):\n        validateFelt(parameter, input);\n        break;\n      case isTypeBytes31(input.type):\n        validateBytes31(parameter, input);\n        break;\n      case (isTypeUint(input.type) || isTypeLiteral(input.type)):\n        validateUint(parameter, input);\n        break;\n      case isTypeBool(input.type):\n        validateBool(parameter, input);\n        break;\n      case isTypeByteArray(input.type):\n        validateByteArray(parameter, input);\n        break;\n      case isTypeArray(input.type):\n        validateArray(parameter, input, structs, enums);\n        break;\n      case isTypeStruct(input.type, structs):\n        validateStruct(parameter, input, structs);\n        break;\n      case isTypeEnum(input.type, enums):\n        validateEnum(parameter, input);\n        break;\n      case isTypeTuple(input.type):\n        validateTuple(parameter, input);\n        break;\n      case isTypeNonZero(input.type):\n        validateNonZero(parameter, input);\n        break;\n      default:\n        throw new Error(\n          `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`\n        );\n    }\n    return acc + 1;\n  }, 0);\n}\n\n// src/utils/calldata/index.ts\nvar CallData = class _CallData {\n  abi;\n  parser;\n  structs;\n  enums;\n  constructor(abi) {\n    this.structs = _CallData.getAbiStruct(abi);\n    this.enums = _CallData.getAbiEnum(abi);\n    this.parser = createAbiParser(abi);\n    this.abi = this.parser.getLegacyFormat();\n  }\n  /**\n   * Validate arguments passed to the method as corresponding to the ones in the abi\n   * @param type ValidateType - type of the method\n   * @param method string - name of the method\n   * @param args ArgsOrCalldata - arguments that are passed to the method\n   */\n  validate(type, method, args = []) {\n    if (type !== \"DEPLOY\" /* DEPLOY */) {\n      const invocableFunctionNames = this.abi.filter((abi) => {\n        if (abi.type !== \"function\")\n          return false;\n        const isView = abi.stateMutability === \"view\" || abi.state_mutability === \"view\";\n        return type === \"INVOKE\" /* INVOKE */ ? !isView : isView;\n      }).map((abi) => abi.name);\n      assert(\n        invocableFunctionNames.includes(method),\n        `${type === \"INVOKE\" /* INVOKE */ ? \"invocable\" : \"viewable\"} method not found in abi`\n      );\n    }\n    const abiMethod = this.abi.find(\n      (abi) => type === \"DEPLOY\" /* DEPLOY */ ? abi.name === method && abi.type === \"constructor\" : abi.name === method && abi.type === \"function\"\n    );\n    if (isNoConstructorValid(method, args, abiMethod)) {\n      return;\n    }\n    const inputsLength = this.parser.methodInputsLength(abiMethod);\n    if (args.length !== inputsLength) {\n      throw Error(\n        `Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`\n      );\n    }\n    validateFields(abiMethod, args, this.structs, this.enums);\n  }\n  /**\n   * Compile contract callData with abi\n   * Parse the calldata by using input fields from the abi for that method\n   * @param method string - method name\n   * @param argsCalldata RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).\n   * @return Calldata - parsed arguments in format that contract is expecting\n   * @example\n   * ```typescript\n   * const calldata = myCallData.compile(\"constructor\", [\"0x34a\", [1, 3n]]);\n   * ```\n   * ```typescript\n   * const calldata2 = myCallData.compile(\"constructor\", {list:[1, 3n], balance:\"0x34\"}); // wrong order is valid\n   * ```\n   */\n  compile(method, argsCalldata) {\n    const abiMethod = this.abi.find((abiFunction) => abiFunction.name === method);\n    if (isNoConstructorValid(method, argsCalldata, abiMethod)) {\n      return [];\n    }\n    let args;\n    if (Array.isArray(argsCalldata)) {\n      args = argsCalldata;\n    } else {\n      const orderedObject = orderPropsByAbi(\n        argsCalldata,\n        abiMethod.inputs,\n        this.structs,\n        this.enums\n      );\n      args = Object.values(orderedObject);\n      validateFields(abiMethod, args, this.structs, this.enums);\n    }\n    const argsIterator = args[Symbol.iterator]();\n    const callArray = abiMethod.inputs.reduce(\n      (acc, input) => isLen(input.name) && !isCairo1Type(input.type) ? acc : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)),\n      []\n    );\n    Object.defineProperty(callArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callArray;\n  }\n  /**\n   * Compile contract callData without abi\n   * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data\n   * @returns Calldata\n   */\n  static compile(rawArgs) {\n    const createTree = (obj) => {\n      const getEntries = (o, prefix = \".\") => {\n        const oe = Array.isArray(o) ? [o.length.toString(), ...o] : o;\n        return Object.entries(oe).flatMap(([k, v]) => {\n          let value = v;\n          if (k === \"entrypoint\")\n            value = getSelectorFromName(value);\n          else if (isLongText(value))\n            value = byteArrayFromString(value);\n          const kk = Array.isArray(oe) && k === \"0\" ? \"$$len\" : k;\n          if (isBigInt(value))\n            return [[`${prefix}${kk}`, felt(value)]];\n          if (Object(value) === value) {\n            const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));\n            const keys = [...Object.getOwnPropertyNames(value), ...methodsKeys];\n            if (keys.includes(\"isSome\") && keys.includes(\"isNone\")) {\n              const myOption = value;\n              const variantNb = myOption.isSome() ? 0 /* Some */ : 1 /* None */;\n              if (myOption.isSome())\n                return getEntries({ 0: variantNb, 1: myOption.unwrap() }, `${prefix}${kk}.`);\n              return [[`${prefix}${kk}`, felt(variantNb)]];\n            }\n            if (keys.includes(\"isOk\") && keys.includes(\"isErr\")) {\n              const myResult = value;\n              const variantNb = myResult.isOk() ? 0 /* Ok */ : 1 /* Err */;\n              return getEntries({ 0: variantNb, 1: myResult.unwrap() }, `${prefix}${kk}.`);\n            }\n            if (keys.includes(\"variant\") && keys.includes(\"activeVariant\")) {\n              const myEnum = value;\n              const activeVariant = myEnum.activeVariant();\n              const listVariants = Object.keys(myEnum.variant);\n              const activeVariantNb = listVariants.findIndex(\n                (variant) => variant === activeVariant\n              );\n              if (typeof myEnum.unwrap() === \"object\" && Object.keys(myEnum.unwrap()).length === 0) {\n                return [[`${prefix}${kk}`, felt(activeVariantNb)]];\n              }\n              return getEntries({ 0: activeVariantNb, 1: myEnum.unwrap() }, `${prefix}${kk}.`);\n            }\n            return getEntries(value, `${prefix}${kk}.`);\n          }\n          return [[`${prefix}${kk}`, felt(value)]];\n        });\n      };\n      const result = Object.fromEntries(getEntries(obj));\n      return result;\n    };\n    let callTreeArray;\n    if (!Array.isArray(rawArgs)) {\n      const callTree = createTree(rawArgs);\n      callTreeArray = Object.values(callTree);\n    } else {\n      const callObj = { ...rawArgs };\n      const callTree = createTree(callObj);\n      callTreeArray = Object.values(callTree);\n    }\n    Object.defineProperty(callTreeArray, \"__compiled__\", {\n      enumerable: false,\n      writable: false,\n      value: true\n    });\n    return callTreeArray;\n  }\n  /**\n   * Parse elements of the response array and structuring them into response object\n   * @param method string - method name\n   * @param response string[] - response from the method\n   * @return Result - parsed response corresponding to the abi\n   */\n  parse(method, response) {\n    const { outputs } = this.abi.find((abi) => abi.name === method);\n    const responseIterator = response.flat()[Symbol.iterator]();\n    const parsed = outputs.flat().reduce((acc, output, idx) => {\n      const propName = output.name ?? idx;\n      acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);\n      if (acc[propName] && acc[`${propName}_len`]) {\n        delete acc[`${propName}_len`];\n      }\n      return acc;\n    }, {});\n    return Object.keys(parsed).length === 1 && 0 in parsed ? parsed[0] : parsed;\n  }\n  /**\n   * Format cairo method response data to native js values based on provided format schema\n   * @param method string - cairo method name\n   * @param response string[] - cairo method response\n   * @param format object - formatter object schema\n   * @returns Result - parsed and formatted response object\n   */\n  format(method, response, format) {\n    const parsed = this.parse(method, response);\n    return formatter(parsed, format);\n  }\n  /**\n   * Helper to extract structs from abi\n   * @param abi Abi\n   * @returns AbiStructs - structs from abi\n   */\n  static getAbiStruct(abi) {\n    return abi.filter((abiEntry) => abiEntry.type === \"struct\").reduce(\n      (acc, abiEntry) => ({\n        ...acc,\n        [abiEntry.name]: abiEntry\n      }),\n      {}\n    );\n  }\n  /**\n   * Helper to extract enums from abi\n   * @param abi Abi\n   * @returns AbiEnums - enums from abi\n   */\n  static getAbiEnum(abi) {\n    const fullEnumList = abi.filter((abiEntry) => abiEntry.type === \"enum\").reduce(\n      (acc, abiEntry) => ({\n        ...acc,\n        [abiEntry.name]: abiEntry\n      }),\n      {}\n    );\n    delete fullEnumList[\"core::bool\"];\n    return fullEnumList;\n  }\n  /**\n   * Helper: Compile HexCalldata | RawCalldata | RawArgs\n   * @param rawCalldata HexCalldata | RawCalldata | RawArgs\n   * @returns Calldata\n   */\n  static toCalldata(rawCalldata = []) {\n    return _CallData.compile(rawCalldata);\n  }\n  /**\n   * Helper: Convert raw to HexCalldata\n   * @param raw HexCalldata | RawCalldata | RawArgs\n   * @returns HexCalldata\n   */\n  static toHex(raw = []) {\n    const calldata = _CallData.compile(raw);\n    return calldata.map((it) => toHex(it));\n  }\n  /**\n   * Parse the elements of a contract response and structure them into one or several Result.\n   * In Cairo 0, arrays are not supported.\n   * @param typeCairo string or string[] - Cairo type name, ex : \"hello::hello::UserData\"\n   * @param response string[] - serialized data corresponding to typeCairo.\n   * @return Result or Result[] - parsed response corresponding to typeData.\n   * @example\n   * const res2=helloCallData.decodeParameters(\"hello::hello::UserData\",[\"0x123456\",\"0x1\"]);\n   * result = { address: 1193046n, is_claimed: true }\n   */\n  decodeParameters(typeCairo, response) {\n    const typeCairoArray = Array.isArray(typeCairo) ? typeCairo : [typeCairo];\n    const responseIterator = response.flat()[Symbol.iterator]();\n    const decodedArray = typeCairoArray.map(\n      (typeParam) => responseParser(\n        responseIterator,\n        { name: \"\", type: typeParam },\n        this.structs,\n        this.enums\n      )\n    );\n    return decodedArray.length === 1 ? decodedArray[0] : decodedArray;\n  }\n};\n\n// src/utils/hash/index.ts\nvar hash_exports = {};\n__export(hash_exports, {\n  calculateContractAddressFromHash: () => calculateContractAddressFromHash,\n  calculateDeclareTransactionHash: () => calculateDeclareTransactionHash3,\n  calculateDeployAccountTransactionHash: () => calculateDeployAccountTransactionHash3,\n  calculateInvokeTransactionHash: () => calculateInvokeTransactionHash2,\n  computeCompiledClassHash: () => computeCompiledClassHash,\n  computeContractClassHash: () => computeContractClassHash,\n  computeHashOnElements: () => computeHashOnElements2,\n  computeHintedClassHash: () => computeHintedClassHash,\n  computeLegacyContractClassHash: () => computeLegacyContractClassHash,\n  computePedersenHash: () => computePedersenHash,\n  computePedersenHashOnElements: () => computePedersenHashOnElements,\n  computePoseidonHash: () => computePoseidonHash,\n  computePoseidonHashOnElements: () => computePoseidonHashOnElements,\n  computeSierraContractClassHash: () => computeSierraContractClassHash,\n  formatSpaces: () => formatSpaces,\n  getSelector: () => getSelector,\n  getSelectorFromName: () => getSelectorFromName,\n  hashByteCodeSegments: () => hashByteCodeSegments,\n  keccakBn: () => keccakBn,\n  poseidon: () => _noble_curves_abstract_poseidon__WEBPACK_IMPORTED_MODULE_5__,\n  starknetKeccak: () => starknetKeccak\n});\n\n\n// src/utils/hash/transactionHash/v2.ts\nvar v2_exports = {};\n__export(v2_exports, {\n  calculateDeclareTransactionHash: () => calculateDeclareTransactionHash,\n  calculateDeployAccountTransactionHash: () => calculateDeployAccountTransactionHash,\n  calculateTransactionHash: () => calculateTransactionHash,\n  calculateTransactionHashCommon: () => calculateTransactionHashCommon,\n  computeHashOnElements: () => computeHashOnElements\n});\n\n// src/utils/ec.ts\nvar ec_exports = {};\n__export(ec_exports, {\n  starkCurve: () => _scure_starknet__WEBPACK_IMPORTED_MODULE_4__,\n  weierstrass: () => _noble_curves_abstract_weierstrass__WEBPACK_IMPORTED_MODULE_6__\n});\n\n\n\n// src/utils/hash/transactionHash/v2.ts\nfunction computeHashOnElements(data) {\n  return [...data, data.length].reduce((x, y) => _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.pedersen(toBigInt(x), toBigInt(y)), 0).toString();\n}\nfunction calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData = []) {\n  const calldataHash = computeHashOnElements(calldata);\n  const dataToHash = [\n    txHashPrefix,\n    version,\n    contractAddress,\n    entryPointSelector,\n    calldataHash,\n    maxFee,\n    chainId,\n    ...additionalData\n  ];\n  return computeHashOnElements(dataToHash);\n}\nfunction calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash) {\n  return calculateTransactionHashCommon(\n    \"0x6465636c617265\" /* DECLARE */,\n    version,\n    senderAddress,\n    0,\n    [classHash],\n    maxFee,\n    chainId,\n    [nonce, ...compiledClassHash ? [compiledClassHash] : []]\n  );\n}\nfunction calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {\n  const calldata = [classHash, salt, ...constructorCalldata];\n  return calculateTransactionHashCommon(\n    \"0x6465706c6f795f6163636f756e74\" /* DEPLOY_ACCOUNT */,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\nfunction calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {\n  return calculateTransactionHashCommon(\n    \"0x696e766f6b65\" /* INVOKE */,\n    version,\n    contractAddress,\n    0,\n    calldata,\n    maxFee,\n    chainId,\n    [nonce]\n  );\n}\n\n// src/utils/hash/transactionHash/v3.ts\nvar v3_exports = {};\n__export(v3_exports, {\n  calculateDeclareTransactionHash: () => calculateDeclareTransactionHash2,\n  calculateDeployAccountTransactionHash: () => calculateDeployAccountTransactionHash2,\n  calculateInvokeTransactionHash: () => calculateInvokeTransactionHash,\n  calculateTransactionHashCommon: () => calculateTransactionHashCommon2,\n  hashDAMode: () => hashDAMode,\n  hashFeeField: () => hashFeeField\n});\n\nvar AToBI = (array) => array.map((it) => BigInt(it));\nvar DATA_AVAILABILITY_MODE_BITS = 32n;\nvar MAX_AMOUNT_BITS = 64n;\nvar MAX_PRICE_PER_UNIT_BITS = 128n;\nvar RESOURCE_VALUE_OFFSET = MAX_AMOUNT_BITS + MAX_PRICE_PER_UNIT_BITS;\nvar L1_GAS_NAME = BigInt(encodeShortString(\"L1_GAS\"));\nvar L2_GAS_NAME = BigInt(encodeShortString(\"L2_GAS\"));\nfunction hashDAMode(nonceDAMode, feeDAMode) {\n  return (BigInt(nonceDAMode) << DATA_AVAILABILITY_MODE_BITS) + BigInt(feeDAMode);\n}\nfunction hashFeeField(tip, bounds) {\n  const L1Bound = (L1_GAS_NAME << RESOURCE_VALUE_OFFSET) + (BigInt(bounds.l1_gas.max_amount) << MAX_PRICE_PER_UNIT_BITS) + BigInt(bounds.l1_gas.max_price_per_unit);\n  const L2Bound = (L2_GAS_NAME << RESOURCE_VALUE_OFFSET) + (BigInt(bounds.l2_gas.max_amount) << MAX_PRICE_PER_UNIT_BITS) + BigInt(bounds.l2_gas.max_price_per_unit);\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)([BigInt(tip), L1Bound, L2Bound]);\n}\nfunction calculateTransactionHashCommon2(txHashPrefix, version, senderAddress, chainId, nonce, tip, paymasterData, nonceDataAvailabilityMode, feeDataAvailabilityMode, resourceBounds, additionalData = []) {\n  const feeFieldHash = hashFeeField(tip, resourceBounds);\n  const dAModeHash = hashDAMode(nonceDataAvailabilityMode, feeDataAvailabilityMode);\n  const dataToHash = AToBI([\n    txHashPrefix,\n    version,\n    senderAddress,\n    feeFieldHash,\n    (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(AToBI(paymasterData)),\n    chainId,\n    nonce,\n    dAModeHash,\n    ...AToBI(additionalData)\n  ]);\n  return toHex((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(dataToHash));\n}\nfunction calculateDeployAccountTransactionHash2(contractAddress, classHash, compiledConstructorCalldata, salt, version, chainId, nonce, nonceDataAvailabilityMode, feeDataAvailabilityMode, resourceBounds, tip, paymasterData) {\n  return calculateTransactionHashCommon2(\n    \"0x6465706c6f795f6163636f756e74\" /* DEPLOY_ACCOUNT */,\n    version,\n    contractAddress,\n    chainId,\n    nonce,\n    tip,\n    paymasterData,\n    nonceDataAvailabilityMode,\n    feeDataAvailabilityMode,\n    resourceBounds,\n    [(0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(AToBI(compiledConstructorCalldata)), classHash, salt]\n  );\n}\nfunction calculateDeclareTransactionHash2(classHash, compiledClassHash, senderAddress, version, chainId, nonce, accountDeploymentData, nonceDataAvailabilityMode, feeDataAvailabilityMode, resourceBounds, tip, paymasterData) {\n  return calculateTransactionHashCommon2(\n    \"0x6465636c617265\" /* DECLARE */,\n    version,\n    senderAddress,\n    chainId,\n    nonce,\n    tip,\n    AToBI(paymasterData),\n    nonceDataAvailabilityMode,\n    feeDataAvailabilityMode,\n    resourceBounds,\n    [(0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(AToBI(accountDeploymentData)), classHash, compiledClassHash]\n  );\n}\nfunction calculateInvokeTransactionHash(senderAddress, version, compiledCalldata, chainId, nonce, accountDeploymentData, nonceDataAvailabilityMode, feeDataAvailabilityMode, resourceBounds, tip, paymasterData) {\n  return calculateTransactionHashCommon2(\n    \"0x696e766f6b65\" /* INVOKE */,\n    version,\n    senderAddress,\n    chainId,\n    nonce,\n    tip,\n    paymasterData,\n    nonceDataAvailabilityMode,\n    feeDataAvailabilityMode,\n    resourceBounds,\n    [(0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(AToBI(accountDeploymentData)), (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(AToBI(compiledCalldata))]\n  );\n}\n\n// src/utils/hash/transactionHash/index.ts\nfunction isV3InvokeTx(args) {\n  return [api_exports.ETransactionVersion.V3, api_exports.ETransactionVersion.F3].includes(args.version);\n}\nfunction calculateInvokeTransactionHash2(args) {\n  if (isV3InvokeTx(args)) {\n    return calculateInvokeTransactionHash(\n      args.senderAddress,\n      args.version,\n      args.compiledCalldata,\n      args.chainId,\n      args.nonce,\n      args.accountDeploymentData,\n      args.nonceDataAvailabilityMode,\n      args.feeDataAvailabilityMode,\n      args.resourceBounds,\n      args.tip,\n      args.paymasterData\n    );\n  }\n  return calculateTransactionHash(\n    args.senderAddress,\n    args.version,\n    args.compiledCalldata,\n    args.maxFee,\n    args.chainId,\n    args.nonce\n  );\n}\nfunction isV3DeclareTx(args) {\n  return [api_exports.ETransactionVersion.V3, api_exports.ETransactionVersion.F3].includes(args.version);\n}\nfunction calculateDeclareTransactionHash3(args) {\n  if (isV3DeclareTx(args)) {\n    return calculateDeclareTransactionHash2(\n      args.classHash,\n      args.compiledClassHash,\n      args.senderAddress,\n      args.version,\n      args.chainId,\n      args.nonce,\n      args.accountDeploymentData,\n      args.nonceDataAvailabilityMode,\n      args.feeDataAvailabilityMode,\n      args.resourceBounds,\n      args.tip,\n      args.paymasterData\n    );\n  }\n  return calculateDeclareTransactionHash(\n    args.classHash,\n    args.senderAddress,\n    args.version,\n    args.maxFee,\n    args.chainId,\n    args.nonce,\n    args.compiledClassHash\n  );\n}\nfunction isV3DeployAccountTx(args) {\n  return [api_exports.ETransactionVersion.V3, api_exports.ETransactionVersion.F3].includes(args.version);\n}\nfunction calculateDeployAccountTransactionHash3(args) {\n  if (isV3DeployAccountTx(args)) {\n    return calculateDeployAccountTransactionHash2(\n      args.contractAddress,\n      args.classHash,\n      args.compiledConstructorCalldata,\n      args.salt,\n      args.version,\n      args.chainId,\n      args.nonce,\n      args.nonceDataAvailabilityMode,\n      args.feeDataAvailabilityMode,\n      args.resourceBounds,\n      args.tip,\n      args.paymasterData\n    );\n  }\n  return calculateDeployAccountTransactionHash(\n    args.contractAddress,\n    args.classHash,\n    args.constructorCalldata,\n    args.salt,\n    args.version,\n    args.maxFee,\n    args.chainId,\n    args.nonce\n  );\n}\n\n// src/utils/hash/classHash.ts\n\n\n// src/utils/json.ts\nvar json_exports = {};\n__export(json_exports, {\n  parse: () => parse2,\n  parseAlwaysAsBig: () => parseAlwaysAsBig,\n  stringify: () => stringify2,\n  stringifyAlwaysAsBig: () => stringifyAlwaysAsBig\n});\n\nvar parseIntAsNumberOrBigInt = (str) => {\n  if (!lossless_json__WEBPACK_IMPORTED_MODULE_7__.isInteger(str))\n    return parseFloat(str);\n  const num = parseInt(str, 10);\n  return Number.isSafeInteger(num) ? num : BigInt(str);\n};\nvar parse2 = (str) => lossless_json__WEBPACK_IMPORTED_MODULE_7__.parse(String(str), void 0, parseIntAsNumberOrBigInt);\nvar parseAlwaysAsBig = (str) => lossless_json__WEBPACK_IMPORTED_MODULE_7__.parse(String(str), void 0, lossless_json__WEBPACK_IMPORTED_MODULE_7__.parseNumberAndBigInt);\nvar stringify2 = (value, replacer, space, numberStringifiers) => lossless_json__WEBPACK_IMPORTED_MODULE_7__.stringify(value, replacer, space, numberStringifiers);\nvar stringifyAlwaysAsBig = stringify2;\n\n// src/utils/hash/classHash.ts\nfunction computePedersenHash(a, b) {\n  return _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.pedersen(BigInt(a), BigInt(b));\n}\nfunction computePoseidonHash(a, b) {\n  return toHex(_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHash(BigInt(a), BigInt(b)));\n}\nfunction computeHashOnElements2(data) {\n  return [...data, data.length].reduce((x, y) => _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.pedersen(BigInt(x), BigInt(y)), 0).toString();\n}\nvar computePedersenHashOnElements = computeHashOnElements2;\nfunction computePoseidonHashOnElements(data) {\n  return toHex((0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(data.map((x) => BigInt(x))));\n}\nfunction calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {\n  const compiledCalldata = CallData.compile(constructorCalldata);\n  const constructorCalldataHash = computeHashOnElements2(compiledCalldata);\n  const CONTRACT_ADDRESS_PREFIX = felt(\"0x535441524b4e45545f434f4e54524143545f41444452455353\");\n  const hash = computeHashOnElements2([\n    CONTRACT_ADDRESS_PREFIX,\n    deployerAddress,\n    salt,\n    classHash,\n    constructorCalldataHash\n  ]);\n  return toHex(BigInt(hash) % ADDR_BOUND);\n}\nfunction nullSkipReplacer(key, value) {\n  if (key === \"attributes\" || key === \"accessible_scopes\") {\n    return Array.isArray(value) && value.length === 0 ? void 0 : value;\n  }\n  if (key === \"debug_info\") {\n    return null;\n  }\n  return value === null ? void 0 : value;\n}\nfunction formatSpaces(json2) {\n  let insideQuotes = false;\n  const newString = [];\n  for (const char of json2) {\n    if (char === '\"' && (newString.length > 0 && newString.slice(-1)[0] === \"\\\\\") === false) {\n      insideQuotes = !insideQuotes;\n    }\n    if (insideQuotes) {\n      newString.push(char);\n    } else {\n      newString.push(char === \":\" ? \": \" : char === \",\" ? \", \" : char);\n    }\n  }\n  return newString.join(\"\");\n}\nfunction computeHintedClassHash(compiledContract) {\n  const { abi, program } = compiledContract;\n  const contractClass = { abi, program };\n  const serializedJson = formatSpaces(stringify2(contractClass, nullSkipReplacer));\n  return addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.keccak(utf8ToArray(serializedJson)).toString(16));\n}\nfunction computeLegacyContractClassHash(contract) {\n  const compiledContract = isString(contract) ? parse2(contract) : contract;\n  const apiVersion = toHex(API_VERSION);\n  const externalEntryPointsHash = computeHashOnElements2(\n    compiledContract.entry_points_by_type.EXTERNAL.flatMap((e) => [e.selector, e.offset])\n  );\n  const l1HandlerEntryPointsHash = computeHashOnElements2(\n    compiledContract.entry_points_by_type.L1_HANDLER.flatMap((e) => [e.selector, e.offset])\n  );\n  const constructorEntryPointHash = computeHashOnElements2(\n    compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap((e) => [e.selector, e.offset])\n  );\n  const builtinsHash = computeHashOnElements2(\n    compiledContract.program.builtins.map((s) => encodeShortString(s))\n  );\n  const hintedClassHash = computeHintedClassHash(compiledContract);\n  const dataHash = computeHashOnElements2(compiledContract.program.data);\n  return computeHashOnElements2([\n    apiVersion,\n    externalEntryPointsHash,\n    l1HandlerEntryPointsHash,\n    constructorEntryPointHash,\n    builtinsHash,\n    hintedClassHash,\n    dataHash\n  ]);\n}\nfunction hashBuiltins(builtins) {\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(\n    builtins.flatMap((it) => {\n      return BigInt(encodeShortString(it));\n    })\n  );\n}\nfunction hashEntryPoint(data) {\n  const base = data.flatMap((it) => {\n    return [BigInt(it.selector), BigInt(it.offset), hashBuiltins(it.builtins)];\n  });\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(base);\n}\nfunction hashByteCodeSegments(casm) {\n  const byteCode = casm.bytecode.map((n) => BigInt(n));\n  const bytecodeSegmentLengths = casm.bytecode_segment_lengths ?? [];\n  let segmentStart = 0;\n  const hashLeaves = bytecodeSegmentLengths.flatMap((len) => {\n    const segment = byteCode.slice(segmentStart, segmentStart += len);\n    return [BigInt(len), (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(segment)];\n  });\n  return 1n + (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(hashLeaves);\n}\nfunction computeCompiledClassHash(casm) {\n  const COMPILED_CLASS_VERSION = \"COMPILED_CLASS_V1\";\n  const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);\n  const bytecode = casm.bytecode_segment_lengths ? hashByteCodeSegments(casm) : (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(casm.bytecode.map((it) => BigInt(it)));\n  return toHex(\n    (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      bytecode\n    ])\n  );\n}\nfunction hashEntryPointSierra(data) {\n  const base = data.flatMap((it) => {\n    return [BigInt(it.selector), BigInt(it.function_idx)];\n  });\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(base);\n}\nfunction hashAbi(sierra) {\n  const indentString = formatSpaces(stringify2(sierra.abi, null));\n  return BigInt(addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.keccak(utf8ToArray(indentString)).toString(16)));\n}\nfunction computeSierraContractClassHash(sierra) {\n  const CONTRACT_CLASS_VERSION = \"CONTRACT_CLASS_V0.1.0\";\n  const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));\n  const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);\n  const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);\n  const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);\n  const abiHash = hashAbi(sierra);\n  const sierraProgram = (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)(sierra.sierra_program.map((it) => BigInt(it)));\n  return toHex(\n    (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.poseidonHashMany)([\n      compiledClassVersion,\n      externalEntryPointsHash,\n      l1Handlers,\n      constructor,\n      abiHash,\n      sierraProgram\n    ])\n  );\n}\nfunction computeContractClassHash(contract) {\n  const compiledContract = isString(contract) ? parse2(contract) : contract;\n  if (\"sierra_program\" in compiledContract) {\n    return computeSierraContractClassHash(compiledContract);\n  }\n  return computeLegacyContractClassHash(compiledContract);\n}\n\n// src/utils/stark.ts\nvar stark_exports = {};\n__export(stark_exports, {\n  compressProgram: () => compressProgram,\n  decompressProgram: () => decompressProgram,\n  estimateFeeToBounds: () => estimateFeeToBounds,\n  estimatedFeeToMaxFee: () => estimatedFeeToMaxFee,\n  formatSignature: () => formatSignature,\n  intDAM: () => intDAM,\n  makeAddress: () => makeAddress,\n  randomAddress: () => randomAddress,\n  reduceV2: () => reduceV2,\n  signatureToDecimalArray: () => signatureToDecimalArray,\n  signatureToHexArray: () => signatureToHexArray,\n  toFeeVersion: () => toFeeVersion,\n  toTransactionVersion: () => toTransactionVersion,\n  v3Details: () => v3Details\n});\n\n\nfunction compressProgram(jsonProgram) {\n  const stringified = isString(jsonProgram) ? jsonProgram : stringify2(jsonProgram);\n  const compressedProgram = (0,pako__WEBPACK_IMPORTED_MODULE_8__.gzip)(stringified);\n  return btoaUniversal(compressedProgram);\n}\nfunction decompressProgram(base642) {\n  if (Array.isArray(base642))\n    return base642;\n  const decompressed = arrayBufferToString((0,pako__WEBPACK_IMPORTED_MODULE_8__.ungzip)(atobUniversal(base642)));\n  return parse2(decompressed);\n}\nfunction randomAddress() {\n  const randomKeyPair = _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.utils.randomPrivateKey();\n  return (0,_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.getStarkKey)(randomKeyPair);\n}\nfunction makeAddress(input) {\n  return addHexPrefix(input).toLowerCase();\n}\nfunction formatSignature(sig) {\n  if (!sig)\n    throw Error(\"formatSignature: provided signature is undefined\");\n  if (Array.isArray(sig)) {\n    return sig.map((it) => toHex(it));\n  }\n  try {\n    const { r, s } = sig;\n    return [toHex(r), toHex(s)];\n  } catch (e) {\n    throw new Error(\"Signature need to be weierstrass.SignatureType or an array for custom\");\n  }\n}\nfunction signatureToDecimalArray(sig) {\n  return bigNumberishArrayToDecimalStringArray(formatSignature(sig));\n}\nfunction signatureToHexArray(sig) {\n  return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));\n}\nfunction estimatedFeeToMaxFee(estimatedFee, overhead = 50 /* MAX_FEE */) {\n  return addPercent(estimatedFee, overhead);\n}\nfunction estimateFeeToBounds(estimate, amountOverhead = 50 /* L1_BOUND_MAX_AMOUNT */, priceOverhead = 50 /* L1_BOUND_MAX_PRICE_PER_UNIT */) {\n  if (isBigInt(estimate)) {\n    return {\n      l2_gas: { max_amount: \"0x0\", max_price_per_unit: \"0x0\" },\n      l1_gas: { max_amount: \"0x0\", max_price_per_unit: \"0x0\" }\n    };\n  }\n  if (typeof estimate.gas_consumed === \"undefined\" || typeof estimate.gas_price === \"undefined\") {\n    throw Error(\"estimateFeeToBounds: estimate is undefined\");\n  }\n  const maxUnits = estimate.data_gas_consumed !== void 0 && estimate.data_gas_price !== void 0 ? toHex(addPercent(BigInt(estimate.overall_fee) / BigInt(estimate.gas_price), amountOverhead)) : toHex(addPercent(estimate.gas_consumed, amountOverhead));\n  const maxUnitPrice = toHex(addPercent(estimate.gas_price, priceOverhead));\n  return {\n    l2_gas: { max_amount: \"0x0\", max_price_per_unit: \"0x0\" },\n    l1_gas: { max_amount: maxUnits, max_price_per_unit: maxUnitPrice }\n  };\n}\nfunction intDAM(dam) {\n  if (dam === api_exports.EDataAvailabilityMode.L1)\n    return api_exports.EDAMode.L1;\n  if (dam === api_exports.EDataAvailabilityMode.L2)\n    return api_exports.EDAMode.L2;\n  throw Error(\"EDAM conversion\");\n}\nfunction toTransactionVersion(defaultVersion, providedVersion) {\n  const providedVersion0xs = providedVersion ? toHex(providedVersion) : void 0;\n  const defaultVersion0xs = toHex(defaultVersion);\n  if (providedVersion && !Object.values(api_exports.ETransactionVersion).includes(providedVersion0xs)) {\n    throw Error(`providedVersion ${providedVersion} is not ETransactionVersion`);\n  }\n  if (!Object.values(api_exports.ETransactionVersion).includes(defaultVersion0xs)) {\n    throw Error(`defaultVersion ${defaultVersion} is not ETransactionVersion`);\n  }\n  return providedVersion ? providedVersion0xs : defaultVersion0xs;\n}\nfunction toFeeVersion(providedVersion) {\n  if (!providedVersion)\n    return void 0;\n  const version = toHex(providedVersion);\n  if (version === api_exports.ETransactionVersion.V0)\n    return api_exports.ETransactionVersion.F0;\n  if (version === api_exports.ETransactionVersion.V1)\n    return api_exports.ETransactionVersion.F1;\n  if (version === api_exports.ETransactionVersion.V2)\n    return api_exports.ETransactionVersion.F2;\n  if (version === api_exports.ETransactionVersion.V3)\n    return api_exports.ETransactionVersion.F3;\n  throw Error(`toFeeVersion: ${version} is not supported`);\n}\nfunction v3Details(details) {\n  return {\n    tip: details.tip || 0,\n    paymasterData: details.paymasterData || [],\n    accountDeploymentData: details.accountDeploymentData || [],\n    nonceDataAvailabilityMode: details.nonceDataAvailabilityMode || api_exports.EDataAvailabilityMode.L1,\n    feeDataAvailabilityMode: details.feeDataAvailabilityMode || api_exports.EDataAvailabilityMode.L1,\n    resourceBounds: details.resourceBounds ?? estimateFeeToBounds(ZERO)\n  };\n}\nfunction reduceV2(providedVersion) {\n  if (providedVersion === api_exports.ETransactionVersion.F2)\n    return api_exports.ETransactionVersion.F1;\n  if (providedVersion === api_exports.ETransactionVersion.V2)\n    return api_exports.ETransactionVersion.V1;\n  return providedVersion;\n}\n\n// src/utils/contract.ts\nfunction isSierra(contract) {\n  const compiledContract = isString(contract) ? parse2(contract) : contract;\n  return \"sierra_program\" in compiledContract;\n}\nfunction extractContractHashes(payload) {\n  const response = { ...payload };\n  if (isSierra(payload.contract)) {\n    if (!payload.compiledClassHash && payload.casm) {\n      response.compiledClassHash = computeCompiledClassHash(payload.casm);\n    }\n    if (!response.compiledClassHash)\n      throw new Error(\n        \"Extract compiledClassHash failed, provide (CairoAssembly).casm file or compiledClassHash\"\n      );\n  }\n  response.classHash = payload.classHash ?? computeContractClassHash(payload.contract);\n  if (!response.classHash)\n    throw new Error(\"Extract classHash failed, provide (CompiledContract).json file or classHash\");\n  return response;\n}\nfunction contractClassResponseToLegacyCompiledContract(ccr) {\n  if (isSierra(ccr)) {\n    throw Error(\"ContractClassResponse need to be LegacyContractClass (cairo0 response class)\");\n  }\n  const contract = ccr;\n  return { ...contract, program: decompressProgram(contract.program) };\n}\n\n// src/utils/eth.ts\nvar eth_exports = {};\n__export(eth_exports, {\n  ethRandomPrivateKey: () => ethRandomPrivateKey,\n  validateAndParseEthAddress: () => validateAndParseEthAddress\n});\n\nfunction ethRandomPrivateKey() {\n  return sanitizeHex(buf2hex(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__.secp256k1.utils.randomPrivateKey()));\n}\nfunction validateAndParseEthAddress(address) {\n  assertInRange(address, ZERO, 2n ** 160n - 1n, \"Ethereum Address \");\n  const result = addHexPrefix(removeHexPrefix(toHex(address)).padStart(40, \"0\"));\n  assert(Boolean(result.match(/^(0x)?[0-9a-f]{40}$/)), \"Invalid Ethereum Address Format\");\n  return result;\n}\n\n// src/utils/fetchPonyfill.ts\n\n\nvar fetchPonyfill_default = typeof window !== \"undefined\" && window.fetch || // use buildin fetch in browser if available\ntypeof global !== \"undefined\" && (0,fetch_cookie__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(global.fetch) || // use buildin fetch in node, react-native and service worker if available\nisomorphic_fetch__WEBPACK_IMPORTED_MODULE_11__;\n\n// src/utils/provider.ts\nvar provider_exports = {};\n__export(provider_exports, {\n  Block: () => Block,\n  createSierraContractClass: () => createSierraContractClass,\n  getDefaultNodeUrl: () => getDefaultNodeUrl,\n  isPendingBlock: () => isPendingBlock,\n  isPendingStateUpdate: () => isPendingStateUpdate,\n  isPendingTransaction: () => isPendingTransaction,\n  isV3Tx: () => isV3Tx,\n  isVersion: () => isVersion,\n  parseContract: () => parseContract,\n  validBlockTags: () => validBlockTags,\n  wait: () => wait\n});\nfunction wait(delay) {\n  return new Promise((res) => {\n    setTimeout(res, delay);\n  });\n}\nfunction createSierraContractClass(contract) {\n  const result = { ...contract };\n  delete result.sierra_program_debug_info;\n  result.abi = formatSpaces(stringify2(contract.abi));\n  result.sierra_program = formatSpaces(stringify2(contract.sierra_program));\n  result.sierra_program = compressProgram(result.sierra_program);\n  return result;\n}\nfunction parseContract(contract) {\n  const parsedContract = isString(contract) ? parse2(contract) : contract;\n  if (!isSierra(contract)) {\n    return {\n      ...parsedContract,\n      ...\"program\" in parsedContract && { program: compressProgram(parsedContract.program) }\n    };\n  }\n  return createSierraContractClass(parsedContract);\n}\nvar getDefaultNodeUrl = (networkName, mute = false) => {\n  if (!mute) {\n    console.warn(\"Using default public node url, please provide nodeUrl in provider options!\");\n  }\n  const nodes = RPC_NODES[networkName ?? \"SN_SEPOLIA\" /* SN_SEPOLIA */];\n  const randIdx = Math.floor(Math.random() * nodes.length);\n  return nodes[randIdx];\n};\nvar validBlockTags = Object.values(BlockTag);\nvar Block = class {\n  /**\n   * @param {BlockIdentifier} hash if not null, contains the block hash\n   */\n  hash = null;\n  /**\n   * @param {BlockIdentifier} number if not null, contains the block number\n   */\n  number = null;\n  /**\n   * @param {BlockIdentifier} tag if not null, contains \"pending\" or \"latest\"\n   */\n  tag = null;\n  setIdentifier(__identifier) {\n    if (isString(__identifier)) {\n      if (isDecimalString(__identifier)) {\n        this.number = parseInt(__identifier, 10);\n      } else if (isHex(__identifier)) {\n        this.hash = __identifier;\n      } else if (validBlockTags.includes(__identifier)) {\n        this.tag = __identifier;\n      } else {\n        throw TypeError(`Block identifier unmanaged: ${__identifier}`);\n      }\n    } else if (isBigInt(__identifier)) {\n      this.hash = toHex(__identifier);\n    } else if (isNumber(__identifier)) {\n      this.number = __identifier;\n    } else {\n      this.tag = \"pending\" /* PENDING */;\n    }\n    if (isNumber(this.number) && this.number < 0) {\n      throw TypeError(`Block number (${this.number}) can't be negative`);\n    }\n  }\n  /**\n   * Create a Block instance\n   * @param {BlockIdentifier} _identifier  hex string and BigInt are detected as block hashes.\n   * decimal string and number are detected as block numbers.\n   * text string are detected as block tag.\n   * null is considered as a 'pending' block tag.\n   */\n  constructor(_identifier) {\n    this.setIdentifier(_identifier);\n  }\n  // TODO: fix any\n  /**\n   * @returns {any} the identifier as a string\n   * @example\n   * ```typescript\n   * const result = new provider.Block(123456n).queryIdentifier;\n   * // result = \"blockHash=0x1e240\"\n   * ```\n   */\n  get queryIdentifier() {\n    if (this.number !== null) {\n      return `blockNumber=${this.number}`;\n    }\n    if (this.hash !== null) {\n      return `blockHash=${this.hash}`;\n    }\n    return `blockNumber=${this.tag}`;\n  }\n  // TODO: fix any\n  /**\n   * @returns {any} the identifier as an object\n   * @example\n   * ```typescript\n   * const result = new provider.Block(56789).identifier;\n   * // result = { block_number: 56789 }\n   * ```\n   */\n  get identifier() {\n    if (this.number !== null) {\n      return { block_number: this.number };\n    }\n    if (this.hash !== null) {\n      return { block_hash: this.hash };\n    }\n    return this.tag;\n  }\n  /**\n   * change the identifier of an existing Block instance\n   * @example\n   * ```typescript\n   * const myBlock = new provider.Block(\"latest\");\n   * myBlock.identifier =\"0x3456789abc\";\n   * const result = myBlock.identifier;\n   * // result = { block_hash: '0x3456789abc' }\n   * ```\n   */\n  set identifier(_identifier) {\n    this.setIdentifier(_identifier);\n  }\n  valueOf = () => this.number;\n  toString = () => this.hash;\n};\nfunction isV3Tx(details) {\n  const version = details.version ? toHex(details.version) : api_exports.ETransactionVersion.V3;\n  return version === api_exports.ETransactionVersion.V3 || version === api_exports.ETransactionVersion.F3;\n}\nfunction isVersion(version, response) {\n  const [majorS, minorS] = version.split(\".\");\n  const [majorR, minorR] = response.split(\".\");\n  return majorS === majorR && minorS === minorR;\n}\nfunction isPendingBlock(response) {\n  return response.status === \"PENDING\";\n}\nfunction isPendingTransaction(response) {\n  return !(\"block_hash\" in response);\n}\nfunction isPendingStateUpdate(response) {\n  return !(\"block_hash\" in response);\n}\n\n// src/utils/transaction.ts\nvar transaction_exports = {};\n__export(transaction_exports, {\n  buildUDCCall: () => buildUDCCall,\n  fromCallsToExecuteCalldata: () => fromCallsToExecuteCalldata,\n  fromCallsToExecuteCalldataWithNonce: () => fromCallsToExecuteCalldataWithNonce,\n  fromCallsToExecuteCalldata_cairo1: () => fromCallsToExecuteCalldata_cairo1,\n  getExecuteCalldata: () => getExecuteCalldata,\n  getVersionsByType: () => getVersionsByType,\n  transformCallsToMulticallArrays: () => transformCallsToMulticallArrays,\n  transformCallsToMulticallArrays_cairo1: () => transformCallsToMulticallArrays_cairo1\n});\nvar transformCallsToMulticallArrays = (calls) => {\n  const callArray = [];\n  const calldata = [];\n  calls.forEach((call) => {\n    const data = CallData.compile(call.calldata || []);\n    callArray.push({\n      to: toBigInt(call.contractAddress).toString(10),\n      selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n      data_offset: calldata.length.toString(),\n      data_len: data.length.toString()\n    });\n    calldata.push(...data);\n  });\n  return {\n    callArray,\n    calldata: CallData.compile({ calldata })\n  };\n};\nvar fromCallsToExecuteCalldata = (calls) => {\n  const { callArray, calldata } = transformCallsToMulticallArrays(calls);\n  const compiledCalls = CallData.compile({ callArray });\n  return [...compiledCalls, ...calldata];\n};\nvar fromCallsToExecuteCalldataWithNonce = (calls, nonce) => {\n  return [...fromCallsToExecuteCalldata(calls), toBigInt(nonce).toString()];\n};\nvar transformCallsToMulticallArrays_cairo1 = (calls) => {\n  const callArray = calls.map((call) => ({\n    to: toBigInt(call.contractAddress).toString(10),\n    selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),\n    calldata: CallData.compile(call.calldata || [])\n  }));\n  return callArray;\n};\nvar fromCallsToExecuteCalldata_cairo1 = (calls) => {\n  const orderCalls = calls.map((call) => ({\n    contractAddress: call.contractAddress,\n    entrypoint: call.entrypoint,\n    calldata: Array.isArray(call.calldata) && \"__compiled__\" in call.calldata ? call.calldata : CallData.compile(call.calldata)\n    // RawArgsObject | RawArgsArray type\n  }));\n  return CallData.compile({ orderCalls });\n};\nvar getExecuteCalldata = (calls, cairoVersion = \"0\") => {\n  if (cairoVersion === \"1\") {\n    return fromCallsToExecuteCalldata_cairo1(calls);\n  }\n  return fromCallsToExecuteCalldata(calls);\n};\nfunction buildUDCCall(payload, address) {\n  const params = [].concat(payload).map((it) => {\n    const {\n      classHash,\n      salt,\n      unique = true,\n      constructorCalldata = []\n    } = it;\n    const compiledConstructorCallData = CallData.compile(constructorCalldata);\n    const deploySalt = salt ?? randomAddress();\n    return {\n      call: {\n        contractAddress: UDC.ADDRESS,\n        entrypoint: UDC.ENTRYPOINT,\n        calldata: [\n          classHash,\n          deploySalt,\n          toCairoBool(unique),\n          compiledConstructorCallData.length,\n          ...compiledConstructorCallData\n        ]\n      },\n      address: calculateContractAddressFromHash(\n        unique ? _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.pedersen(address, deploySalt) : deploySalt,\n        classHash,\n        compiledConstructorCallData,\n        unique ? UDC.ADDRESS : 0\n      )\n    };\n  });\n  return {\n    calls: params.map((it) => it.call),\n    addresses: params.map((it) => it.address)\n  };\n}\nfunction getVersionsByType(versionType) {\n  return versionType === \"fee\" ? {\n    v1: api_exports.ETransactionVersion.F1,\n    v2: api_exports.ETransactionVersion.F2,\n    v3: api_exports.ETransactionVersion.F3\n  } : { v1: api_exports.ETransactionVersion.V1, v2: api_exports.ETransactionVersion.V2, v3: api_exports.ETransactionVersion.V3 };\n}\n\n// src/channel/rpc_0_6.ts\nvar defaultOptions = {\n  headers: { \"Content-Type\": \"application/json\" },\n  blockIdentifier: \"pending\" /* PENDING */,\n  retries: 200\n};\nvar RpcChannel = class {\n  nodeUrl;\n  headers;\n  retries;\n  requestId;\n  blockIdentifier;\n  chainId;\n  specVersion;\n  waitMode;\n  // behave like web2 rpc and return when tx is processed\n  constructor(optionsOrProvider) {\n    const { nodeUrl, retries, headers, blockIdentifier, chainId, specVersion, waitMode } = optionsOrProvider || {};\n    if (Object.values(NetworkName).includes(nodeUrl)) {\n      this.nodeUrl = getDefaultNodeUrl(nodeUrl, optionsOrProvider?.default);\n    } else if (nodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = getDefaultNodeUrl(void 0, optionsOrProvider?.default);\n    }\n    this.retries = retries || defaultOptions.retries;\n    this.headers = { ...defaultOptions.headers, ...headers };\n    this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;\n    this.chainId = chainId;\n    this.specVersion = specVersion;\n    this.waitMode = waitMode || false;\n    this.requestId = 0;\n  }\n  setChainId(chainId) {\n    this.chainId = chainId;\n  }\n  fetch(method, params, id = 0) {\n    const rpcRequestBody = {\n      id,\n      jsonrpc: \"2.0\",\n      method,\n      ...params && { params }\n    };\n    return fetchPonyfill_default(this.nodeUrl, {\n      method: \"POST\",\n      body: stringify2(rpcRequestBody),\n      headers: this.headers\n    });\n  }\n  errorHandler(method, params, rpcError, otherError) {\n    if (rpcError) {\n      const { code, message, data } = rpcError;\n      throw new LibraryError(\n        `RPC: ${method} with params ${stringify2(params, null, 2)}\n\n        ${code}: ${message}: ${stringify2(data)}`\n      );\n    }\n    if (otherError instanceof LibraryError) {\n      throw otherError;\n    }\n    if (otherError) {\n      throw Error(otherError.message);\n    }\n  }\n  async fetchEndpoint(method, params) {\n    try {\n      const rawResult = await this.fetch(method, params, this.requestId += 1);\n      const { error, result } = await rawResult.json();\n      this.errorHandler(method, params, error);\n      return result;\n    } catch (error) {\n      this.errorHandler(method, params, error?.response?.data, error);\n      throw error;\n    }\n  }\n  async getChainId() {\n    this.chainId ??= await this.fetchEndpoint(\"starknet_chainId\");\n    return this.chainId;\n  }\n  async getSpecVersion() {\n    this.specVersion ??= await this.fetchEndpoint(\"starknet_specVersion\");\n    return this.specVersion;\n  }\n  getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getNonce\", {\n      contract_address,\n      block_id\n    });\n  }\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  getBlockLatestAccepted() {\n    return this.fetchEndpoint(\"starknet_blockHashAndNumber\");\n  }\n  /**\n   * Get the most recent accepted block number\n   * redundant use getBlockLatestAccepted();\n   * @returns Number of the latest block\n   */\n  getBlockNumber() {\n    return this.fetchEndpoint(\"starknet_blockNumber\");\n  }\n  getBlockWithTxHashes(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxHashes\", { block_id });\n  }\n  getBlockWithTxs(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxs\", { block_id });\n  }\n  getBlockStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStateUpdate\", { block_id });\n  }\n  getBlockTransactionsTraces(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_traceBlockTransactions\", { block_id });\n  }\n  getBlockTransactionCount(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockTransactionCount\", { block_id });\n  }\n  getTransactionByHash(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionByHash\", {\n      transaction_hash\n    });\n  }\n  getTransactionByBlockIdAndIndex(blockIdentifier, index) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getTransactionByBlockIdAndIndex\", { block_id, index });\n  }\n  getTransactionReceipt(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionReceipt\", { transaction_hash });\n  }\n  getTransactionTrace(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_traceTransaction\", { transaction_hash });\n  }\n  /**\n   * Get the status of a transaction\n   */\n  getTransactionStatus(transactionHash) {\n    const transaction_hash = toHex(transactionHash);\n    return this.fetchEndpoint(\"starknet_getTransactionStatus\", { transaction_hash });\n  }\n  /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  simulateTransaction(invocations, simulateTransactionOptions = {}) {\n    const {\n      blockIdentifier = this.blockIdentifier,\n      skipValidate = true,\n      skipFeeCharge = true\n    } = simulateTransactionOptions;\n    const block_id = new Block(blockIdentifier).identifier;\n    const simulationFlags = [];\n    if (skipValidate)\n      simulationFlags.push(rpcspec_0_6_exports.ESimulationFlag.SKIP_VALIDATE);\n    if (skipFeeCharge)\n      simulationFlags.push(rpcspec_0_6_exports.ESimulationFlag.SKIP_FEE_CHARGE);\n    return this.fetchEndpoint(\"starknet_simulateTransactions\", {\n      block_id,\n      transactions: invocations.map((it) => this.buildTransaction(it)),\n      simulation_flags: simulationFlags\n    });\n  }\n  async waitForTransaction(txHash, options) {\n    const transactionHash = toHex(txHash);\n    let { retries } = this;\n    let onchain = false;\n    let isErrorState = false;\n    const retryInterval = options?.retryInterval ?? 5e3;\n    const errorStates = options?.errorStates ?? [\n      rpcspec_0_6_exports.ETransactionStatus.REJECTED\n      // TODO: commented out to preserve the long-standing behavior of \"reverted\" not being treated as an error by default\n      // should decide which behavior to keep in the future\n      // RPC.ETransactionExecutionStatus.REVERTED,\n    ];\n    const successStates = options?.successStates ?? [\n      rpcspec_0_6_exports.ETransactionExecutionStatus.SUCCEEDED,\n      rpcspec_0_6_exports.ETransactionStatus.ACCEPTED_ON_L2,\n      rpcspec_0_6_exports.ETransactionStatus.ACCEPTED_ON_L1\n    ];\n    let txStatus;\n    while (!onchain) {\n      await wait(retryInterval);\n      try {\n        txStatus = await this.getTransactionStatus(transactionHash);\n        const executionStatus = txStatus.execution_status;\n        const finalityStatus = txStatus.finality_status;\n        if (!finalityStatus) {\n          const error = new Error(\"waiting for transaction status\");\n          throw error;\n        }\n        if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n          const message = `${executionStatus}: ${finalityStatus}`;\n          const error = new Error(message);\n          error.response = txStatus;\n          isErrorState = true;\n          throw error;\n        } else if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n          onchain = true;\n        }\n      } catch (error) {\n        if (error instanceof Error && isErrorState) {\n          throw error;\n        }\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n    }\n    let txReceipt = null;\n    while (txReceipt === null) {\n      try {\n        txReceipt = await this.getTransactionReceipt(transactionHash);\n      } catch (error) {\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n      await wait(retryInterval);\n    }\n    return txReceipt;\n  }\n  getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const parsedKey = toStorageKey(key);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStorageAt\", {\n      contract_address,\n      key: parsedKey,\n      block_id\n    });\n  }\n  getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassHashAt\", {\n      block_id,\n      contract_address\n    });\n  }\n  getClass(classHash, blockIdentifier = this.blockIdentifier) {\n    const class_hash = toHex(classHash);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClass\", {\n      class_hash,\n      block_id\n    });\n  }\n  getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassAt\", {\n      block_id,\n      contract_address\n    });\n  }\n  async getEstimateFee(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = true }) {\n    const block_id = new Block(blockIdentifier).identifier;\n    let flags = {};\n    if (!isVersion(\"0.5\", await this.getSpecVersion())) {\n      flags = {\n        simulation_flags: skipValidate ? [rpcspec_0_6_exports.ESimulationFlag.SKIP_VALIDATE] : []\n      };\n    }\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: invocations.map((it) => this.buildTransaction(it, \"fee\")),\n      block_id,\n      ...flags\n    });\n  }\n  async invoke(functionInvocation, details) {\n    let promise;\n    if (!isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n        invoke_transaction: {\n          sender_address: functionInvocation.contractAddress,\n          calldata: CallData.toHex(functionInvocation.calldata),\n          type: rpcspec_0_6_exports.ETransactionType.INVOKE,\n          max_fee: toHex(details.maxFee || 0),\n          version: rpcspec_0_6_exports.ETransactionVersion.V1,\n          signature: signatureToHexArray(functionInvocation.signature),\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else {\n      promise = this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n        invoke_transaction: {\n          type: rpcspec_0_6_exports.ETransactionType.INVOKE,\n          sender_address: functionInvocation.contractAddress,\n          calldata: CallData.toHex(functionInvocation.calldata),\n          version: rpcspec_0_6_exports.ETransactionVersion.V3,\n          signature: signatureToHexArray(functionInvocation.signature),\n          nonce: toHex(details.nonce),\n          resource_bounds: details.resourceBounds,\n          tip: toHex(details.tip),\n          paymaster_data: details.paymasterData.map((it) => toHex(it)),\n          account_deployment_data: details.accountDeploymentData.map((it) => toHex(it)),\n          nonce_data_availability_mode: details.nonceDataAvailabilityMode,\n          fee_data_availability_mode: details.feeDataAvailabilityMode\n        }\n      });\n    }\n    return this.waitMode ? this.waitForTransaction((await promise).transaction_hash) : promise;\n  }\n  async declare({ contract, signature, senderAddress, compiledClassHash }, details) {\n    let promise;\n    if (!isSierra(contract) && !isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: rpcspec_0_6_exports.ETransactionType.DECLARE,\n          contract_class: {\n            program: contract.program,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          version: rpcspec_0_6_exports.ETransactionVersion.V1,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else if (isSierra(contract) && !isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: rpcspec_0_6_exports.ETransactionType.DECLARE,\n          contract_class: {\n            sierra_program: decompressProgram(contract.sierra_program),\n            contract_class_version: contract.contract_class_version,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          compiled_class_hash: compiledClassHash || \"\",\n          version: rpcspec_0_6_exports.ETransactionVersion.V2,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else if (isSierra(contract) && isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: rpcspec_0_6_exports.ETransactionType.DECLARE,\n          sender_address: senderAddress,\n          compiled_class_hash: compiledClassHash || \"\",\n          version: rpcspec_0_6_exports.ETransactionVersion.V3,\n          signature: signatureToHexArray(signature),\n          nonce: toHex(details.nonce),\n          contract_class: {\n            sierra_program: decompressProgram(contract.sierra_program),\n            contract_class_version: contract.contract_class_version,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          resource_bounds: details.resourceBounds,\n          tip: toHex(details.tip),\n          paymaster_data: details.paymasterData.map((it) => toHex(it)),\n          account_deployment_data: details.accountDeploymentData.map((it) => toHex(it)),\n          nonce_data_availability_mode: details.nonceDataAvailabilityMode,\n          fee_data_availability_mode: details.feeDataAvailabilityMode\n        }\n      });\n    } else {\n      throw Error(\"declare unspotted parameters\");\n    }\n    return this.waitMode ? this.waitForTransaction((await promise).transaction_hash) : promise;\n  }\n  async deployAccount({ classHash, constructorCalldata, addressSalt, signature }, details) {\n    let promise;\n    if (!isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n        deploy_account_transaction: {\n          constructor_calldata: CallData.toHex(constructorCalldata || []),\n          class_hash: toHex(classHash),\n          contract_address_salt: toHex(addressSalt || 0),\n          type: rpcspec_0_6_exports.ETransactionType.DEPLOY_ACCOUNT,\n          max_fee: toHex(details.maxFee || 0),\n          version: rpcspec_0_6_exports.ETransactionVersion.V1,\n          signature: signatureToHexArray(signature),\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else {\n      promise = this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n        deploy_account_transaction: {\n          type: rpcspec_0_6_exports.ETransactionType.DEPLOY_ACCOUNT,\n          version: rpcspec_0_6_exports.ETransactionVersion.V3,\n          signature: signatureToHexArray(signature),\n          nonce: toHex(details.nonce),\n          contract_address_salt: toHex(addressSalt || 0),\n          constructor_calldata: CallData.toHex(constructorCalldata || []),\n          class_hash: toHex(classHash),\n          resource_bounds: details.resourceBounds,\n          tip: toHex(details.tip),\n          paymaster_data: details.paymasterData.map((it) => toHex(it)),\n          nonce_data_availability_mode: details.nonceDataAvailabilityMode,\n          fee_data_availability_mode: details.feeDataAvailabilityMode\n        }\n      });\n    }\n    return this.waitMode ? this.waitForTransaction((await promise).transaction_hash) : promise;\n  }\n  callContract(call, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_call\", {\n      request: {\n        contract_address: call.contractAddress,\n        entry_point_selector: getSelectorFromName(call.entrypoint),\n        calldata: CallData.toHex(call.calldata)\n      },\n      block_id\n    });\n  }\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  estimateMessageFee(message, blockIdentifier = this.blockIdentifier) {\n    const { from_address, to_address, entry_point_selector, payload } = message;\n    const formattedMessage = {\n      from_address: validateAndParseEthAddress(from_address),\n      to_address: toHex(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateMessageFee\", {\n      message: formattedMessage,\n      block_id\n    });\n  }\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  getSyncingStats() {\n    return this.fetchEndpoint(\"starknet_syncing\");\n  }\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  getEvents(eventFilter) {\n    return this.fetchEndpoint(\"starknet_getEvents\", { filter: eventFilter });\n  }\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    let details;\n    if (!isV3Tx(invocation)) {\n      details = {\n        signature: signatureToHexArray(invocation.signature),\n        nonce: toHex(invocation.nonce),\n        max_fee: toHex(invocation.maxFee || 0)\n      };\n    } else {\n      details = {\n        signature: signatureToHexArray(invocation.signature),\n        nonce: toHex(invocation.nonce),\n        resource_bounds: invocation.resourceBounds,\n        tip: toHex(invocation.tip),\n        paymaster_data: invocation.paymasterData.map((it) => toHex(it)),\n        nonce_data_availability_mode: invocation.nonceDataAvailabilityMode,\n        fee_data_availability_mode: invocation.feeDataAvailabilityMode,\n        account_deployment_data: invocation.accountDeploymentData.map((it) => toHex(it))\n      };\n    }\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        // v0 v1 v3\n        type: rpcspec_0_6_exports.ETransactionType.INVOKE,\n        sender_address: invocation.contractAddress,\n        calldata: CallData.toHex(invocation.calldata),\n        version: toHex(invocation.version || defaultVersions.v3),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          ...details\n        };\n      }\n      return {\n        // Cairo 1 - v2 v3\n        type: invocation.type,\n        contract_class: {\n          ...invocation.contract,\n          sierra_program: decompressProgram(invocation.contract.sierra_program)\n        },\n        compiled_class_hash: invocation.compiledClassHash || \"\",\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v3),\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      const { account_deployment_data, ...restDetails } = details;\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v3),\n        ...restDetails\n      };\n    }\n    throw Error(\"RPC buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/channel/rpc_0_7.ts\nvar rpc_0_7_exports = {};\n__export(rpc_0_7_exports, {\n  RpcChannel: () => RpcChannel2\n});\nvar defaultOptions2 = {\n  headers: { \"Content-Type\": \"application/json\" },\n  blockIdentifier: \"pending\" /* PENDING */,\n  retries: 200\n};\nvar RpcChannel2 = class {\n  nodeUrl;\n  headers;\n  retries;\n  requestId;\n  blockIdentifier;\n  chainId;\n  specVersion;\n  transactionRetryIntervalFallback;\n  waitMode;\n  // behave like web2 rpc and return when tx is processed\n  constructor(optionsOrProvider) {\n    const {\n      nodeUrl,\n      retries,\n      headers,\n      blockIdentifier,\n      chainId,\n      specVersion,\n      waitMode,\n      transactionRetryIntervalFallback\n    } = optionsOrProvider || {};\n    if (Object.values(NetworkName).includes(nodeUrl)) {\n      this.nodeUrl = getDefaultNodeUrl(nodeUrl, optionsOrProvider?.default);\n    } else if (nodeUrl) {\n      this.nodeUrl = nodeUrl;\n    } else {\n      this.nodeUrl = getDefaultNodeUrl(void 0, optionsOrProvider?.default);\n    }\n    this.retries = retries || defaultOptions2.retries;\n    this.headers = { ...defaultOptions2.headers, ...headers };\n    this.blockIdentifier = blockIdentifier || defaultOptions2.blockIdentifier;\n    this.chainId = chainId;\n    this.specVersion = specVersion;\n    this.waitMode = waitMode || false;\n    this.requestId = 0;\n    this.transactionRetryIntervalFallback = transactionRetryIntervalFallback;\n  }\n  get transactionRetryIntervalDefault() {\n    return this.transactionRetryIntervalFallback ?? 5e3;\n  }\n  setChainId(chainId) {\n    this.chainId = chainId;\n  }\n  fetch(method, params, id = 0) {\n    const rpcRequestBody = {\n      id,\n      jsonrpc: \"2.0\",\n      method,\n      ...params && { params }\n    };\n    return fetchPonyfill_default(this.nodeUrl, {\n      method: \"POST\",\n      body: stringify2(rpcRequestBody),\n      headers: this.headers\n    });\n  }\n  errorHandler(method, params, rpcError, otherError) {\n    if (rpcError) {\n      const { code, message, data } = rpcError;\n      throw new LibraryError(\n        `RPC: ${method} with params ${stringify2(params, null, 2)}\n \n        ${code}: ${message}: ${stringify2(data)}`\n      );\n    }\n    if (otherError instanceof LibraryError) {\n      throw otherError;\n    }\n    if (otherError) {\n      throw Error(otherError.message);\n    }\n  }\n  async fetchEndpoint(method, params) {\n    try {\n      const rawResult = await this.fetch(method, params, this.requestId += 1);\n      const { error, result } = await rawResult.json();\n      this.errorHandler(method, params, error);\n      return result;\n    } catch (error) {\n      this.errorHandler(method, params, error?.response?.data, error);\n      throw error;\n    }\n  }\n  async getChainId() {\n    this.chainId ??= await this.fetchEndpoint(\"starknet_chainId\");\n    return this.chainId;\n  }\n  async getSpecVersion() {\n    this.specVersion ??= await this.fetchEndpoint(\"starknet_specVersion\");\n    return this.specVersion;\n  }\n  getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getNonce\", {\n      contract_address,\n      block_id\n    });\n  }\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  getBlockLatestAccepted() {\n    return this.fetchEndpoint(\"starknet_blockHashAndNumber\");\n  }\n  /**\n   * Get the most recent accepted block number\n   * redundant use getBlockLatestAccepted();\n   * @returns Number of the latest block\n   */\n  getBlockNumber() {\n    return this.fetchEndpoint(\"starknet_blockNumber\");\n  }\n  getBlockWithTxHashes(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxHashes\", { block_id });\n  }\n  getBlockWithTxs(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithTxs\", { block_id });\n  }\n  getBlockWithReceipts(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockWithReceipts\", { block_id });\n  }\n  getBlockStateUpdate(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStateUpdate\", { block_id });\n  }\n  getBlockTransactionsTraces(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_traceBlockTransactions\", { block_id });\n  }\n  getBlockTransactionCount(blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getBlockTransactionCount\", { block_id });\n  }\n  getTransactionByHash(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionByHash\", {\n      transaction_hash\n    });\n  }\n  getTransactionByBlockIdAndIndex(blockIdentifier, index) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getTransactionByBlockIdAndIndex\", { block_id, index });\n  }\n  getTransactionReceipt(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_getTransactionReceipt\", { transaction_hash });\n  }\n  getTransactionTrace(txHash) {\n    const transaction_hash = toHex(txHash);\n    return this.fetchEndpoint(\"starknet_traceTransaction\", { transaction_hash });\n  }\n  /**\n   * Get the status of a transaction\n   */\n  getTransactionStatus(transactionHash) {\n    const transaction_hash = toHex(transactionHash);\n    return this.fetchEndpoint(\"starknet_getTransactionStatus\", { transaction_hash });\n  }\n  /**\n   * @param invocations AccountInvocations\n   * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  simulateTransaction(invocations, simulateTransactionOptions = {}) {\n    const {\n      blockIdentifier = this.blockIdentifier,\n      skipValidate = true,\n      skipFeeCharge = true\n    } = simulateTransactionOptions;\n    const block_id = new Block(blockIdentifier).identifier;\n    const simulationFlags = [];\n    if (skipValidate)\n      simulationFlags.push(starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ESimulationFlag.SKIP_VALIDATE);\n    if (skipFeeCharge)\n      simulationFlags.push(starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ESimulationFlag.SKIP_FEE_CHARGE);\n    return this.fetchEndpoint(\"starknet_simulateTransactions\", {\n      block_id,\n      transactions: invocations.map((it) => this.buildTransaction(it)),\n      simulation_flags: simulationFlags\n    });\n  }\n  async waitForTransaction(txHash, options) {\n    const transactionHash = toHex(txHash);\n    let { retries } = this;\n    let onchain = false;\n    let isErrorState = false;\n    const retryInterval = options?.retryInterval ?? this.transactionRetryIntervalDefault;\n    const errorStates = options?.errorStates ?? [\n      starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionStatus.REJECTED\n      // TODO: commented out to preserve the long-standing behavior of \"reverted\" not being treated as an error by default\n      // should decide which behavior to keep in the future\n      // RPC.ETransactionExecutionStatus.REVERTED,\n    ];\n    const successStates = options?.successStates ?? [\n      starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionExecutionStatus.SUCCEEDED,\n      starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionStatus.ACCEPTED_ON_L2,\n      starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionStatus.ACCEPTED_ON_L1\n    ];\n    let txStatus;\n    while (!onchain) {\n      await wait(retryInterval);\n      try {\n        txStatus = await this.getTransactionStatus(transactionHash);\n        const executionStatus = txStatus.execution_status;\n        const finalityStatus = txStatus.finality_status;\n        if (!finalityStatus) {\n          const error = new Error(\"waiting for transaction status\");\n          throw error;\n        }\n        if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {\n          const message = `${executionStatus}: ${finalityStatus}`;\n          const error = new Error(message);\n          error.response = txStatus;\n          isErrorState = true;\n          throw error;\n        } else if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {\n          onchain = true;\n        }\n      } catch (error) {\n        if (error instanceof Error && isErrorState) {\n          throw error;\n        }\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n    }\n    let txReceipt = null;\n    while (txReceipt === null) {\n      try {\n        txReceipt = await this.getTransactionReceipt(transactionHash);\n      } catch (error) {\n        if (retries <= 0) {\n          throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);\n        }\n      }\n      retries -= 1;\n      await wait(retryInterval);\n    }\n    return txReceipt;\n  }\n  getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const parsedKey = toStorageKey(key);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getStorageAt\", {\n      contract_address,\n      key: parsedKey,\n      block_id\n    });\n  }\n  getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassHashAt\", {\n      block_id,\n      contract_address\n    });\n  }\n  getClass(classHash, blockIdentifier = this.blockIdentifier) {\n    const class_hash = toHex(classHash);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClass\", {\n      class_hash,\n      block_id\n    });\n  }\n  getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {\n    const contract_address = toHex(contractAddress);\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_getClassAt\", {\n      block_id,\n      contract_address\n    });\n  }\n  async getEstimateFee(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = true }) {\n    const block_id = new Block(blockIdentifier).identifier;\n    let flags = {};\n    if (!isVersion(\"0.5\", await this.getSpecVersion())) {\n      flags = {\n        simulation_flags: skipValidate ? [starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ESimulationFlag.SKIP_VALIDATE] : []\n      };\n    }\n    return this.fetchEndpoint(\"starknet_estimateFee\", {\n      request: invocations.map((it) => this.buildTransaction(it, \"fee\")),\n      block_id,\n      ...flags\n    });\n  }\n  async invoke(functionInvocation, details) {\n    let promise;\n    if (!isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n        invoke_transaction: {\n          sender_address: functionInvocation.contractAddress,\n          calldata: CallData.toHex(functionInvocation.calldata),\n          type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.INVOKE,\n          max_fee: toHex(details.maxFee || 0),\n          version: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionVersion.V1,\n          signature: signatureToHexArray(functionInvocation.signature),\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else {\n      promise = this.fetchEndpoint(\"starknet_addInvokeTransaction\", {\n        invoke_transaction: {\n          type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.INVOKE,\n          sender_address: functionInvocation.contractAddress,\n          calldata: CallData.toHex(functionInvocation.calldata),\n          version: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionVersion.V3,\n          signature: signatureToHexArray(functionInvocation.signature),\n          nonce: toHex(details.nonce),\n          resource_bounds: details.resourceBounds,\n          tip: toHex(details.tip),\n          paymaster_data: details.paymasterData.map((it) => toHex(it)),\n          account_deployment_data: details.accountDeploymentData.map((it) => toHex(it)),\n          nonce_data_availability_mode: details.nonceDataAvailabilityMode,\n          fee_data_availability_mode: details.feeDataAvailabilityMode\n        }\n      });\n    }\n    return this.waitMode ? this.waitForTransaction((await promise).transaction_hash) : promise;\n  }\n  async declare({ contract, signature, senderAddress, compiledClassHash }, details) {\n    let promise;\n    if (!isSierra(contract) && !isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.DECLARE,\n          contract_class: {\n            program: contract.program,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          version: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionVersion.V1,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else if (isSierra(contract) && !isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.DECLARE,\n          contract_class: {\n            sierra_program: decompressProgram(contract.sierra_program),\n            contract_class_version: contract.contract_class_version,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          compiled_class_hash: compiledClassHash || \"\",\n          version: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionVersion.V2,\n          max_fee: toHex(details.maxFee || 0),\n          signature: signatureToHexArray(signature),\n          sender_address: senderAddress,\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else if (isSierra(contract) && isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeclareTransaction\", {\n        declare_transaction: {\n          type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.DECLARE,\n          sender_address: senderAddress,\n          compiled_class_hash: compiledClassHash || \"\",\n          version: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionVersion.V3,\n          signature: signatureToHexArray(signature),\n          nonce: toHex(details.nonce),\n          contract_class: {\n            sierra_program: decompressProgram(contract.sierra_program),\n            contract_class_version: contract.contract_class_version,\n            entry_points_by_type: contract.entry_points_by_type,\n            abi: contract.abi\n          },\n          resource_bounds: details.resourceBounds,\n          tip: toHex(details.tip),\n          paymaster_data: details.paymasterData.map((it) => toHex(it)),\n          account_deployment_data: details.accountDeploymentData.map((it) => toHex(it)),\n          nonce_data_availability_mode: details.nonceDataAvailabilityMode,\n          fee_data_availability_mode: details.feeDataAvailabilityMode\n        }\n      });\n    } else {\n      throw Error(\"declare unspotted parameters\");\n    }\n    return this.waitMode ? this.waitForTransaction((await promise).transaction_hash) : promise;\n  }\n  async deployAccount({ classHash, constructorCalldata, addressSalt, signature }, details) {\n    let promise;\n    if (!isV3Tx(details)) {\n      promise = this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n        deploy_account_transaction: {\n          constructor_calldata: CallData.toHex(constructorCalldata || []),\n          class_hash: toHex(classHash),\n          contract_address_salt: toHex(addressSalt || 0),\n          type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.DEPLOY_ACCOUNT,\n          max_fee: toHex(details.maxFee || 0),\n          version: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionVersion.V1,\n          signature: signatureToHexArray(signature),\n          nonce: toHex(details.nonce)\n        }\n      });\n    } else {\n      promise = this.fetchEndpoint(\"starknet_addDeployAccountTransaction\", {\n        deploy_account_transaction: {\n          type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.DEPLOY_ACCOUNT,\n          version: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionVersion.V3,\n          signature: signatureToHexArray(signature),\n          nonce: toHex(details.nonce),\n          contract_address_salt: toHex(addressSalt || 0),\n          constructor_calldata: CallData.toHex(constructorCalldata || []),\n          class_hash: toHex(classHash),\n          resource_bounds: details.resourceBounds,\n          tip: toHex(details.tip),\n          paymaster_data: details.paymasterData.map((it) => toHex(it)),\n          nonce_data_availability_mode: details.nonceDataAvailabilityMode,\n          fee_data_availability_mode: details.feeDataAvailabilityMode\n        }\n      });\n    }\n    return this.waitMode ? this.waitForTransaction((await promise).transaction_hash) : promise;\n  }\n  callContract(call, blockIdentifier = this.blockIdentifier) {\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_call\", {\n      request: {\n        contract_address: call.contractAddress,\n        entry_point_selector: getSelectorFromName(call.entrypoint),\n        calldata: CallData.toHex(call.calldata)\n      },\n      block_id\n    });\n  }\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  estimateMessageFee(message, blockIdentifier = this.blockIdentifier) {\n    const { from_address, to_address, entry_point_selector, payload } = message;\n    const formattedMessage = {\n      from_address: validateAndParseEthAddress(from_address),\n      to_address: toHex(to_address),\n      entry_point_selector: getSelector(entry_point_selector),\n      payload: getHexStringArray(payload)\n    };\n    const block_id = new Block(blockIdentifier).identifier;\n    return this.fetchEndpoint(\"starknet_estimateMessageFee\", {\n      message: formattedMessage,\n      block_id\n    });\n  }\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  getSyncingStats() {\n    return this.fetchEndpoint(\"starknet_syncing\");\n  }\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  getEvents(eventFilter) {\n    return this.fetchEndpoint(\"starknet_getEvents\", { filter: eventFilter });\n  }\n  buildTransaction(invocation, versionType) {\n    const defaultVersions = getVersionsByType(versionType);\n    let details;\n    if (!isV3Tx(invocation)) {\n      details = {\n        signature: signatureToHexArray(invocation.signature),\n        nonce: toHex(invocation.nonce),\n        max_fee: toHex(invocation.maxFee || 0)\n      };\n    } else {\n      details = {\n        signature: signatureToHexArray(invocation.signature),\n        nonce: toHex(invocation.nonce),\n        resource_bounds: invocation.resourceBounds,\n        tip: toHex(invocation.tip),\n        paymaster_data: invocation.paymasterData.map((it) => toHex(it)),\n        nonce_data_availability_mode: invocation.nonceDataAvailabilityMode,\n        fee_data_availability_mode: invocation.feeDataAvailabilityMode,\n        account_deployment_data: invocation.accountDeploymentData.map((it) => toHex(it))\n      };\n    }\n    if (invocation.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n      return {\n        // v0 v1 v3\n        type: starknet_types_07__WEBPACK_IMPORTED_MODULE_12__.ETransactionType.INVOKE,\n        sender_address: invocation.contractAddress,\n        calldata: CallData.toHex(invocation.calldata),\n        version: toHex(invocation.version || defaultVersions.v3),\n        ...details\n      };\n    }\n    if (invocation.type === \"DECLARE\" /* DECLARE */) {\n      if (!isSierra(invocation.contract)) {\n        return {\n          type: invocation.type,\n          contract_class: invocation.contract,\n          sender_address: invocation.senderAddress,\n          version: toHex(invocation.version || defaultVersions.v1),\n          ...details\n        };\n      }\n      return {\n        // Cairo 1 - v2 v3\n        type: invocation.type,\n        contract_class: {\n          ...invocation.contract,\n          sierra_program: decompressProgram(invocation.contract.sierra_program)\n        },\n        compiled_class_hash: invocation.compiledClassHash || \"\",\n        sender_address: invocation.senderAddress,\n        version: toHex(invocation.version || defaultVersions.v3),\n        ...details\n      };\n    }\n    if (invocation.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n      const { account_deployment_data, ...restDetails } = details;\n      return {\n        type: invocation.type,\n        constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),\n        class_hash: toHex(invocation.classHash),\n        contract_address_salt: toHex(invocation.addressSalt || 0),\n        version: toHex(invocation.version || defaultVersions.v3),\n        ...restDetails\n      };\n    }\n    throw Error(\"RPC buildTransaction received unknown TransactionType\");\n  }\n};\n\n// src/utils/responseParser/rpc.ts\nvar RPCResponseParser = class {\n  margin;\n  constructor(margin) {\n    this.margin = margin;\n  }\n  estimatedFeeToMaxFee(estimatedFee) {\n    return estimatedFeeToMaxFee(estimatedFee, this.margin?.maxFee);\n  }\n  estimateFeeToBounds(estimate) {\n    return estimateFeeToBounds(\n      estimate,\n      this.margin?.l1BoundMaxAmount,\n      this.margin?.l1BoundMaxPricePerUnit\n    );\n  }\n  parseGetBlockResponse(res) {\n    return { status: \"PENDING\", ...res };\n  }\n  parseTransactionReceipt(res) {\n    if (\"actual_fee\" in res && isString(res.actual_fee)) {\n      return {\n        ...res,\n        actual_fee: {\n          amount: res.actual_fee,\n          unit: \"FRI\"\n        }\n      };\n    }\n    return res;\n  }\n  parseFeeEstimateResponse(res) {\n    const val = res[0];\n    return {\n      overall_fee: toBigInt(val.overall_fee),\n      gas_consumed: toBigInt(val.gas_consumed),\n      gas_price: toBigInt(val.gas_price),\n      unit: val.unit,\n      suggestedMaxFee: this.estimatedFeeToMaxFee(val.overall_fee),\n      resourceBounds: this.estimateFeeToBounds(val),\n      data_gas_consumed: val.data_gas_consumed ? toBigInt(val.data_gas_consumed) : 0n,\n      data_gas_price: val.data_gas_price ? toBigInt(val.data_gas_price) : 0n\n    };\n  }\n  parseFeeEstimateBulkResponse(res) {\n    return res.map((val) => ({\n      overall_fee: toBigInt(val.overall_fee),\n      gas_consumed: toBigInt(val.gas_consumed),\n      gas_price: toBigInt(val.gas_price),\n      unit: val.unit,\n      suggestedMaxFee: this.estimatedFeeToMaxFee(val.overall_fee),\n      resourceBounds: this.estimateFeeToBounds(val),\n      data_gas_consumed: val.data_gas_consumed ? toBigInt(val.data_gas_consumed) : 0n,\n      data_gas_price: val.data_gas_price ? toBigInt(val.data_gas_price) : 0n\n    }));\n  }\n  parseSimulateTransactionResponse(res) {\n    return res.map((it) => {\n      return {\n        ...it,\n        suggestedMaxFee: this.estimatedFeeToMaxFee(it.fee_estimation.overall_fee),\n        resourceBounds: this.estimateFeeToBounds(it.fee_estimation)\n      };\n    });\n  }\n  parseContractClassResponse(res) {\n    return {\n      ...res,\n      abi: isString(res.abi) ? JSON.parse(res.abi) : res.abi\n    };\n  }\n  parseL1GasPriceResponse(res) {\n    return res.l1_gas_price.price_in_wei;\n  }\n};\n\n// src/utils/transactionReceipt.ts\nvar ReceiptTx = class _ReceiptTx {\n  statusReceipt;\n  value;\n  constructor(receipt) {\n    [this.statusReceipt, this.value] = _ReceiptTx.isSuccess(receipt) ? [\"success\", receipt] : _ReceiptTx.isReverted(receipt) ? [\"reverted\", receipt] : _ReceiptTx.isRejected(receipt) ? [\"rejected\", receipt] : [\"error\", new Error(\"Unknown response type\")];\n    for (const [key] of Object.entries(this)) {\n      Object.defineProperty(this, key, {\n        enumerable: false\n      });\n    }\n    for (const [key, value] of Object.entries(receipt)) {\n      Object.defineProperty(this, key, {\n        enumerable: true,\n        writable: false,\n        value\n      });\n    }\n  }\n  match(callbacks) {\n    if (this.statusReceipt in callbacks) {\n      return callbacks[this.statusReceipt](this.value);\n    }\n    return callbacks._();\n  }\n  isSuccess() {\n    return this.statusReceipt === \"success\";\n  }\n  isReverted() {\n    return this.statusReceipt === \"reverted\";\n  }\n  isRejected() {\n    return this.statusReceipt === \"rejected\";\n  }\n  isError() {\n    return this.statusReceipt === \"error\";\n  }\n  static isSuccess(transactionReceipt) {\n    return transactionReceipt.execution_status === \"SUCCEEDED\" /* SUCCEEDED */;\n  }\n  static isReverted(transactionReceipt) {\n    return transactionReceipt.execution_status === \"REVERTED\" /* REVERTED */;\n  }\n  static isRejected(transactionReceipt) {\n    return transactionReceipt.status === \"REJECTED\" /* REJECTED */;\n  }\n};\n\n// src/provider/rpc.ts\nvar RpcProvider = class {\n  responseParser;\n  channel;\n  constructor(optionsOrProvider) {\n    if (optionsOrProvider && \"channel\" in optionsOrProvider) {\n      this.channel = optionsOrProvider.channel;\n      this.responseParser = \"responseParser\" in optionsOrProvider ? optionsOrProvider.responseParser : new RPCResponseParser();\n    } else {\n      this.channel = new RpcChannel2({ ...optionsOrProvider, waitMode: false });\n      this.responseParser = new RPCResponseParser(optionsOrProvider?.feeMarginPercentage);\n    }\n  }\n  fetch(method, params, id = 0) {\n    return this.channel.fetch(method, params, id);\n  }\n  async getChainId() {\n    return this.channel.getChainId();\n  }\n  async getSpecVersion() {\n    return this.channel.getSpecVersion();\n  }\n  async getNonceForAddress(contractAddress, blockIdentifier) {\n    return this.channel.getNonceForAddress(contractAddress, blockIdentifier);\n  }\n  async getBlock(blockIdentifier) {\n    return this.channel.getBlockWithTxHashes(blockIdentifier).then(this.responseParser.parseGetBlockResponse);\n  }\n  /**\n   * Get the most recent accepted block hash and number\n   */\n  async getBlockLatestAccepted() {\n    return this.channel.getBlockLatestAccepted();\n  }\n  /**\n   * Get the most recent accepted block number\n   * redundant use getBlockLatestAccepted();\n   * @returns Number of the latest block\n   */\n  async getBlockNumber() {\n    return this.channel.getBlockNumber();\n  }\n  async getBlockWithTxHashes(blockIdentifier) {\n    return this.channel.getBlockWithTxHashes(blockIdentifier);\n  }\n  async getBlockWithTxs(blockIdentifier) {\n    return this.channel.getBlockWithTxs(blockIdentifier);\n  }\n  /**\n   * Pause the execution of the script until a specified block is created.\n   * @param {BlockIdentifier} blockIdentifier bloc number (BigNumberisk) or 'pending' or 'latest'.\n   * Use of 'latest\" or of a block already created will generate no pause.\n   * @param {number} [retryInterval] number of milliseconds between 2 requests to the node\n   * @example\n   * ```typescript\n   * await myProvider.waitForBlock();\n   * // wait the creation of the pending block\n   * ```\n   */\n  async waitForBlock(blockIdentifier = \"pending\", retryInterval = 5e3) {\n    if (blockIdentifier === \"latest\" /* LATEST */)\n      return;\n    const currentBlock = await this.getBlockNumber();\n    const targetBlock = blockIdentifier === \"pending\" /* PENDING */ ? currentBlock + 1 : Number(toHex(blockIdentifier));\n    if (targetBlock <= currentBlock)\n      return;\n    const { retries } = this.channel;\n    let retriesCount = retries;\n    let isTargetBlock = false;\n    while (!isTargetBlock) {\n      const currBlock = await this.getBlockNumber();\n      if (currBlock === targetBlock) {\n        isTargetBlock = true;\n      } else {\n        await wait(retryInterval);\n      }\n      retriesCount -= 1;\n      if (retriesCount <= 0) {\n        throw new Error(`waitForBlock() timed-out after ${retries} tries.`);\n      }\n    }\n  }\n  async getL1GasPrice(blockIdentifier) {\n    return this.channel.getBlockWithTxHashes(blockIdentifier).then(this.responseParser.parseL1GasPriceResponse);\n  }\n  async getL1MessageHash(l2TxHash) {\n    const transaction = await this.channel.getTransactionByHash(l2TxHash);\n    assert(transaction.type === \"L1_HANDLER\", \"This L2 transaction is not a L1 message.\");\n    const { calldata, contract_address, entry_point_selector, nonce } = transaction;\n    const params = [\n      calldata[0],\n      contract_address,\n      nonce,\n      entry_point_selector,\n      calldata.length - 1,\n      ...calldata.slice(1)\n    ];\n    const myEncode = addHexPrefix(\n      params.reduce(\n        (res, par) => res + removeHexPrefix(toHex(par)).padStart(64, \"0\"),\n        \"\"\n      )\n    );\n    return addHexPrefix((0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_13__.keccak_256)(hexToBytes(myEncode))));\n  }\n  async getBlockWithReceipts(blockIdentifier) {\n    if (this.channel instanceof rpc_0_6_exports.RpcChannel)\n      throw new LibraryError(\"Unsupported method for RPC version\");\n    return this.channel.getBlockWithReceipts(blockIdentifier);\n  }\n  getStateUpdate = this.getBlockStateUpdate;\n  async getBlockStateUpdate(blockIdentifier) {\n    return this.channel.getBlockStateUpdate(blockIdentifier);\n  }\n  async getBlockTransactionsTraces(blockIdentifier) {\n    return this.channel.getBlockTransactionsTraces(blockIdentifier);\n  }\n  async getBlockTransactionCount(blockIdentifier) {\n    return this.channel.getBlockTransactionCount(blockIdentifier);\n  }\n  /**\n   * Return transactions from pending block\n   * @deprecated Instead use getBlock(BlockTag.PENDING); (will be removed in next minor version)\n   * Utility method, same result can be achieved using getBlockWithTxHashes(BlockTag.pending);\n   */\n  async getPendingTransactions() {\n    const { transactions } = await this.getBlockWithTxHashes(\"pending\" /* PENDING */).then(\n      this.responseParser.parseGetBlockResponse\n    );\n    return Promise.all(transactions.map((it) => this.getTransactionByHash(it)));\n  }\n  async getTransaction(txHash) {\n    return this.channel.getTransactionByHash(txHash);\n  }\n  async getTransactionByHash(txHash) {\n    return this.channel.getTransactionByHash(txHash);\n  }\n  async getTransactionByBlockIdAndIndex(blockIdentifier, index) {\n    return this.channel.getTransactionByBlockIdAndIndex(blockIdentifier, index);\n  }\n  async getTransactionReceipt(txHash) {\n    const txReceiptWoHelper = await this.channel.getTransactionReceipt(txHash);\n    const txReceiptWoHelperModified = this.responseParser.parseTransactionReceipt(txReceiptWoHelper);\n    return new ReceiptTx(txReceiptWoHelperModified);\n  }\n  async getTransactionTrace(txHash) {\n    return this.channel.getTransactionTrace(txHash);\n  }\n  /**\n   * Get the status of a transaction\n   */\n  async getTransactionStatus(transactionHash) {\n    return this.channel.getTransactionStatus(transactionHash);\n  }\n  /**\n   * @param invocations AccountInvocations\n   * @param options blockIdentifier and flags to skip validation and fee charge<br/>\n   * - blockIdentifier<br/>\n   * - skipValidate (default false)<br/>\n   * - skipFeeCharge (default true)<br/>\n   */\n  async getSimulateTransaction(invocations, options) {\n    return this.channel.simulateTransaction(invocations, options).then((r) => this.responseParser.parseSimulateTransactionResponse(r));\n  }\n  async waitForTransaction(txHash, options) {\n    const receiptWoHelper = await this.channel.waitForTransaction(\n      txHash,\n      options\n    );\n    return new ReceiptTx(receiptWoHelper);\n  }\n  async getStorageAt(contractAddress, key, blockIdentifier) {\n    return this.channel.getStorageAt(contractAddress, key, blockIdentifier);\n  }\n  async getClassHashAt(contractAddress, blockIdentifier) {\n    return this.channel.getClassHashAt(contractAddress, blockIdentifier);\n  }\n  async getClassByHash(classHash) {\n    return this.getClass(classHash);\n  }\n  async getClass(classHash, blockIdentifier) {\n    return this.channel.getClass(classHash, blockIdentifier).then(this.responseParser.parseContractClassResponse);\n  }\n  async getClassAt(contractAddress, blockIdentifier) {\n    return this.channel.getClassAt(contractAddress, blockIdentifier).then(this.responseParser.parseContractClassResponse);\n  }\n  async getContractVersion(contractAddress, classHash, {\n    blockIdentifier = this.channel.blockIdentifier,\n    compiler = true\n  } = {}) {\n    let contractClass;\n    if (contractAddress) {\n      contractClass = await this.getClassAt(contractAddress, blockIdentifier);\n    } else if (classHash) {\n      contractClass = await this.getClass(classHash, blockIdentifier);\n    } else {\n      throw Error(\"getContractVersion require contractAddress or classHash\");\n    }\n    if (isSierra(contractClass)) {\n      if (compiler) {\n        const abiTest = getAbiContractVersion(contractClass.abi);\n        return { cairo: \"1\", compiler: abiTest.compiler };\n      }\n      return { cairo: \"1\", compiler: void 0 };\n    }\n    return { cairo: \"0\", compiler: \"0\" };\n  }\n  /**\n   * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)\n   */\n  async getEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate) {\n    return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);\n  }\n  async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate) {\n    return this.channel.getEstimateFee(\n      [\n        {\n          type: \"INVOKE_FUNCTION\" /* INVOKE */,\n          ...invocation,\n          ...invocationDetails\n        }\n      ],\n      { blockIdentifier, skipValidate }\n    ).then((r) => this.responseParser.parseFeeEstimateResponse(r));\n  }\n  async getDeclareEstimateFee(invocation, details, blockIdentifier, skipValidate) {\n    return this.channel.getEstimateFee(\n      [\n        {\n          type: \"DECLARE\" /* DECLARE */,\n          ...invocation,\n          ...details\n        }\n      ],\n      { blockIdentifier, skipValidate }\n    ).then((r) => this.responseParser.parseFeeEstimateResponse(r));\n  }\n  async getDeployAccountEstimateFee(invocation, details, blockIdentifier, skipValidate) {\n    return this.channel.getEstimateFee(\n      [\n        {\n          type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n          ...invocation,\n          ...details\n        }\n      ],\n      { blockIdentifier, skipValidate }\n    ).then((r) => this.responseParser.parseFeeEstimateResponse(r));\n  }\n  async getEstimateFeeBulk(invocations, options) {\n    return this.channel.getEstimateFee(invocations, options).then((r) => this.responseParser.parseFeeEstimateBulkResponse(r));\n  }\n  async invokeFunction(functionInvocation, details) {\n    return this.channel.invoke(functionInvocation, details);\n  }\n  async declareContract(transaction, details) {\n    return this.channel.declare(transaction, details);\n  }\n  async deployAccountContract(transaction, details) {\n    return this.channel.deployAccount(\n      transaction,\n      details\n    );\n  }\n  async callContract(call, blockIdentifier) {\n    return this.channel.callContract(call, blockIdentifier);\n  }\n  /**\n   * NEW: Estimate the fee for a message from L1\n   * @param message Message From L1\n   */\n  async estimateMessageFee(message, blockIdentifier) {\n    return this.channel.estimateMessageFee(message, blockIdentifier);\n  }\n  /**\n   * Returns an object about the sync status, or false if the node is not synching\n   * @returns Object with the stats data\n   */\n  async getSyncingStats() {\n    return this.channel.getSyncingStats();\n  }\n  /**\n   * Returns all events matching the given filter\n   * @returns events and the pagination of the events\n   */\n  async getEvents(eventFilter) {\n    return this.channel.getEvents(eventFilter);\n  }\n};\n\n// src/provider/extensions/default.ts\n\n\n// src/utils/starknetId.ts\nvar starknetId_exports = {};\n__export(starknetId_exports, {\n  StarknetIdContract: () => StarknetIdContract,\n  StarknetIdIdentityContract: () => StarknetIdIdentityContract,\n  StarknetIdMulticallContract: () => StarknetIdMulticallContract,\n  StarknetIdPfpContract: () => StarknetIdPfpContract,\n  StarknetIdPopContract: () => StarknetIdPopContract,\n  StarknetIdVerifierContract: () => StarknetIdVerifierContract,\n  dynamicCallData: () => dynamicCallData,\n  dynamicFelt: () => dynamicFelt,\n  execution: () => execution,\n  getStarknetIdContract: () => getStarknetIdContract,\n  getStarknetIdIdentityContract: () => getStarknetIdIdentityContract,\n  getStarknetIdMulticallContract: () => getStarknetIdMulticallContract,\n  getStarknetIdPfpContract: () => getStarknetIdPfpContract,\n  getStarknetIdPopContract: () => getStarknetIdPopContract,\n  getStarknetIdVerifierContract: () => getStarknetIdVerifierContract,\n  useDecoded: () => useDecoded,\n  useEncoded: () => useEncoded\n});\nvar basicAlphabet = \"abcdefghijklmnopqrstuvwxyz0123456789-\";\nvar basicSizePlusOne = BigInt(basicAlphabet.length + 1);\nvar bigAlphabet = \"\\u8FD9\\u6765\";\nvar basicAlphabetSize = BigInt(basicAlphabet.length);\nvar bigAlphabetSize = BigInt(bigAlphabet.length);\nvar bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);\nfunction extractStars(str) {\n  let k = 0;\n  while (str.endsWith(bigAlphabet[bigAlphabet.length - 1])) {\n    str = str.substring(0, str.length - 1);\n    k += 1;\n  }\n  return [str, k];\n}\nfunction useDecoded(encoded) {\n  let decoded = \"\";\n  encoded.forEach((subdomain) => {\n    while (subdomain !== ZERO) {\n      const code = subdomain % basicSizePlusOne;\n      subdomain /= basicSizePlusOne;\n      if (code === BigInt(basicAlphabet.length)) {\n        const nextSubdomain = subdomain / bigAlphabetSizePlusOne;\n        if (nextSubdomain === ZERO) {\n          const code2 = subdomain % bigAlphabetSizePlusOne;\n          subdomain = nextSubdomain;\n          if (code2 === ZERO)\n            decoded += basicAlphabet[0];\n          else\n            decoded += bigAlphabet[Number(code2) - 1];\n        } else {\n          const code2 = subdomain % bigAlphabetSize;\n          decoded += bigAlphabet[Number(code2)];\n          subdomain /= bigAlphabetSize;\n        }\n      } else\n        decoded += basicAlphabet[Number(code)];\n    }\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded = str + (k % 2 === 0 ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) + bigAlphabet[0] + basicAlphabet[1] : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));\n    decoded += \".\";\n  });\n  if (!decoded) {\n    return decoded;\n  }\n  return decoded.concat(\"stark\");\n}\nfunction useEncoded(decoded) {\n  let encoded = BigInt(0);\n  let multiplier = BigInt(1);\n  if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {\n    const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));\n    decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));\n  } else {\n    const [str, k] = extractStars(decoded);\n    if (k)\n      decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));\n  }\n  for (let i = 0; i < decoded.length; i += 1) {\n    const char = decoded[i];\n    const index = basicAlphabet.indexOf(char);\n    const bnIndex = BigInt(basicAlphabet.indexOf(char));\n    if (index !== -1) {\n      if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {\n        encoded += multiplier * basicAlphabetSize;\n        multiplier *= basicSizePlusOne;\n        multiplier *= basicSizePlusOne;\n      } else {\n        encoded += multiplier * bnIndex;\n        multiplier *= basicSizePlusOne;\n      }\n    } else if (bigAlphabet.indexOf(char) !== -1) {\n      encoded += multiplier * basicAlphabetSize;\n      multiplier *= basicSizePlusOne;\n      const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);\n      encoded += multiplier * BigInt(newid);\n      multiplier *= bigAlphabetSize;\n    }\n  }\n  return encoded;\n}\nvar StarknetIdContract = /* @__PURE__ */ ((StarknetIdContract2) => {\n  StarknetIdContract2[\"MAINNET\"] = \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\";\n  StarknetIdContract2[\"TESTNET_SEPOLIA\"] = \"0x154bc2e1af9260b9e66af0e9c46fc757ff893b3ff6a85718a810baf1474\";\n  return StarknetIdContract2;\n})(StarknetIdContract || {});\nfunction getStarknetIdContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678\" /* MAINNET */;\n    case \"0x534e5f5345504f4c4941\" /* SN_SEPOLIA */:\n      return \"0x154bc2e1af9260b9e66af0e9c46fc757ff893b3ff6a85718a810baf1474\" /* TESTNET_SEPOLIA */;\n    default:\n      throw new Error(\"Starknet.id is not yet deployed on this network\");\n  }\n}\nvar StarknetIdIdentityContract = /* @__PURE__ */ ((StarknetIdIdentityContract2) => {\n  StarknetIdIdentityContract2[\"MAINNET\"] = \"0x05dbdedc203e92749e2e746e2d40a768d966bd243df04a6b712e222bc040a9af\";\n  StarknetIdIdentityContract2[\"TESTNET_SEPOLIA\"] = \"0x3697660a0981d734780731949ecb2b4a38d6a58fc41629ed611e8defda\";\n  return StarknetIdIdentityContract2;\n})(StarknetIdIdentityContract || {});\nfunction getStarknetIdIdentityContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x05dbdedc203e92749e2e746e2d40a768d966bd243df04a6b712e222bc040a9af\" /* MAINNET */;\n    case \"0x534e5f5345504f4c4941\" /* SN_SEPOLIA */:\n      return \"0x3697660a0981d734780731949ecb2b4a38d6a58fc41629ed611e8defda\" /* TESTNET_SEPOLIA */;\n    default:\n      throw new Error(\"Starknet.id verifier contract is not yet deployed on this network\");\n  }\n}\nvar StarknetIdMulticallContract = \"0x034ffb8f4452df7a613a0210824d6414dbadcddce6c6e19bf4ddc9e22ce5f970\";\nfunction getStarknetIdMulticallContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return StarknetIdMulticallContract;\n    case \"0x534e5f5345504f4c4941\" /* SN_SEPOLIA */:\n      return StarknetIdMulticallContract;\n    default:\n      throw new Error(\"Starknet.id multicall contract is not yet deployed on this network\");\n  }\n}\nvar StarknetIdVerifierContract = /* @__PURE__ */ ((StarknetIdVerifierContract2) => {\n  StarknetIdVerifierContract2[\"MAINNET\"] = \"0x07d14dfd8ee95b41fce179170d88ba1f0d5a512e13aeb232f19cfeec0a88f8bf\";\n  StarknetIdVerifierContract2[\"TESTNET_SEPOLIA\"] = \"0x60B94fEDe525f815AE5E8377A463e121C787cCCf3a36358Aa9B18c12c4D566\";\n  return StarknetIdVerifierContract2;\n})(StarknetIdVerifierContract || {});\nfunction getStarknetIdVerifierContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x07d14dfd8ee95b41fce179170d88ba1f0d5a512e13aeb232f19cfeec0a88f8bf\" /* MAINNET */;\n    case \"0x534e5f5345504f4c4941\" /* SN_SEPOLIA */:\n      return \"0x60B94fEDe525f815AE5E8377A463e121C787cCCf3a36358Aa9B18c12c4D566\" /* TESTNET_SEPOLIA */;\n    default:\n      throw new Error(\"Starknet.id verifier contract is not yet deployed on this network\");\n  }\n}\nvar StarknetIdPfpContract = /* @__PURE__ */ ((StarknetIdPfpContract2) => {\n  StarknetIdPfpContract2[\"MAINNET\"] = \"0x070aaa20ec4a46da57c932d9fd89ca5e6bb9ca3188d3df361a32306aff7d59c7\";\n  StarknetIdPfpContract2[\"TESTNET_SEPOLIA\"] = \"0x9e7bdb8dabd02ea8cfc23b1d1c5278e46490f193f87516ed5ff2dfec02\";\n  return StarknetIdPfpContract2;\n})(StarknetIdPfpContract || {});\nfunction getStarknetIdPfpContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x070aaa20ec4a46da57c932d9fd89ca5e6bb9ca3188d3df361a32306aff7d59c7\" /* MAINNET */;\n    case \"0x534e5f5345504f4c4941\" /* SN_SEPOLIA */:\n      return \"0x9e7bdb8dabd02ea8cfc23b1d1c5278e46490f193f87516ed5ff2dfec02\" /* TESTNET_SEPOLIA */;\n    default:\n      throw new Error(\n        \"Starknet.id profile picture verifier contract is not yet deployed on this network\"\n      );\n  }\n}\nvar StarknetIdPopContract = /* @__PURE__ */ ((StarknetIdPopContract2) => {\n  StarknetIdPopContract2[\"MAINNET\"] = \"0x0293eb2ba9862f762bd3036586d5755a782bd22e6f5028320f1d0405fd47bff4\";\n  StarknetIdPopContract2[\"TESTNET_SEPOLIA\"] = \"0x15ae88ae054caa74090b89025c1595683f12edf7a4ed2ad0274de3e1d4a\";\n  return StarknetIdPopContract2;\n})(StarknetIdPopContract || {});\nfunction getStarknetIdPopContract(chainId) {\n  switch (chainId) {\n    case \"0x534e5f4d41494e\" /* SN_MAIN */:\n      return \"0x0293eb2ba9862f762bd3036586d5755a782bd22e6f5028320f1d0405fd47bff4\" /* MAINNET */;\n    case \"0x534e5f5345504f4c4941\" /* SN_SEPOLIA */:\n      return \"0x15ae88ae054caa74090b89025c1595683f12edf7a4ed2ad0274de3e1d4a\" /* TESTNET_SEPOLIA */;\n    default:\n      throw new Error(\n        \"Starknet.id proof of personhood verifier contract is not yet deployed on this network\"\n      );\n  }\n}\nfunction execution(staticEx, ifEqual = void 0, ifNotEqual = void 0) {\n  return new CairoCustomEnum({\n    Static: staticEx,\n    IfEqual: ifEqual ? tuple(ifEqual[0], ifEqual[1], ifEqual[2]) : void 0,\n    IfNotEqual: ifNotEqual ? tuple(ifNotEqual[0], ifNotEqual[1], ifNotEqual[2]) : void 0\n  });\n}\nfunction dynamicFelt(hardcoded, reference = void 0) {\n  return new CairoCustomEnum({\n    Hardcoded: hardcoded,\n    Reference: reference ? tuple(reference[0], reference[1]) : void 0\n  });\n}\nfunction dynamicCallData(hardcoded, reference = void 0, arrayReference = void 0) {\n  return new CairoCustomEnum({\n    Hardcoded: hardcoded,\n    Reference: reference ? tuple(reference[0], reference[1]) : void 0,\n    ArrayReference: arrayReference ? tuple(arrayReference[0], arrayReference[1]) : void 0\n  });\n}\n\n// src/provider/extensions/starknetId.ts\nvar StarknetId = class _StarknetId {\n  async getStarkName(address, StarknetIdContract2) {\n    return _StarknetId.getStarkName(\n      // After Mixin, this is ProviderInterface\n      this,\n      address,\n      StarknetIdContract2\n    );\n  }\n  async getAddressFromStarkName(name, StarknetIdContract2) {\n    return _StarknetId.getAddressFromStarkName(\n      // After Mixin, this is ProviderInterface\n      this,\n      name,\n      StarknetIdContract2\n    );\n  }\n  async getStarkProfile(address, StarknetIdContract2, StarknetIdIdentityContract2, StarknetIdVerifierContract2, StarknetIdPfpContract2, StarknetIdPopContract2, StarknetIdMulticallContract2) {\n    return _StarknetId.getStarkProfile(\n      // After Mixin, this is ProviderInterface\n      this,\n      address,\n      StarknetIdContract2,\n      StarknetIdIdentityContract2,\n      StarknetIdVerifierContract2,\n      StarknetIdPfpContract2,\n      StarknetIdPopContract2,\n      StarknetIdMulticallContract2\n    );\n  }\n  static async getStarkName(provider, address, StarknetIdContract2) {\n    const chainId = await provider.getChainId();\n    const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n    try {\n      const hexDomain = await provider.callContract({\n        contractAddress: contract,\n        entrypoint: \"address_to_domain\",\n        calldata: CallData.compile({\n          address,\n          hint: []\n        })\n      });\n      const decimalDomain = hexDomain.map((element) => BigInt(element)).slice(1);\n      const stringDomain = useDecoded(decimalDomain);\n      if (!stringDomain) {\n        throw Error(\"Starkname not found\");\n      }\n      return stringDomain;\n    } catch (e) {\n      if (e instanceof Error && e.message === \"Starkname not found\") {\n        throw e;\n      }\n      throw Error(\"Could not get stark name\");\n    }\n  }\n  static async getAddressFromStarkName(provider, name, StarknetIdContract2) {\n    const chainId = await provider.getChainId();\n    const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n    try {\n      const encodedDomain = name.replace(\".stark\", \"\").split(\".\").map((part) => useEncoded(part).toString(10));\n      const addressData = await provider.callContract({\n        contractAddress: contract,\n        entrypoint: \"domain_to_address\",\n        calldata: CallData.compile({ domain: encodedDomain, hint: [] })\n      });\n      return addressData[0];\n    } catch {\n      throw Error(\"Could not get address from stark name\");\n    }\n  }\n  static async getStarkProfile(provider, address, StarknetIdContract2, StarknetIdIdentityContract2, StarknetIdVerifierContract2, StarknetIdPfpContract2, StarknetIdPopContract2, StarknetIdMulticallContract2) {\n    const chainId = await provider.getChainId();\n    const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);\n    const identityContract = StarknetIdIdentityContract2 ?? getStarknetIdIdentityContract(chainId);\n    const verifierContract = StarknetIdVerifierContract2 ?? getStarknetIdVerifierContract(chainId);\n    const pfpContract = StarknetIdPfpContract2 ?? getStarknetIdPfpContract(chainId);\n    const popContract = StarknetIdPopContract2 ?? getStarknetIdPopContract(chainId);\n    const multicallAddress = StarknetIdMulticallContract2 ?? getStarknetIdMulticallContract(chainId);\n    try {\n      const calls = [\n        {\n          execution: execution({}),\n          to: dynamicCallData(contract),\n          selector: dynamicCallData(getSelectorFromName(\"address_to_domain\")),\n          calldata: [dynamicCallData(address), dynamicCallData(\"0\")]\n        },\n        {\n          execution: execution({}),\n          to: dynamicFelt(contract),\n          selector: dynamicFelt(getSelectorFromName(\"domain_to_id\")),\n          calldata: [dynamicCallData(void 0, void 0, [0, 0])]\n        },\n        {\n          execution: execution({}),\n          to: dynamicFelt(identityContract),\n          selector: dynamicFelt(getSelectorFromName(\"get_verifier_data\")),\n          calldata: [\n            dynamicCallData(void 0, [1, 0]),\n            dynamicCallData(encodeShortString(\"twitter\")),\n            dynamicCallData(verifierContract),\n            dynamicCallData(\"0\")\n          ]\n        },\n        {\n          execution: execution({}),\n          to: dynamicFelt(identityContract),\n          selector: dynamicFelt(getSelectorFromName(\"get_verifier_data\")),\n          calldata: [\n            dynamicCallData(void 0, [1, 0]),\n            dynamicCallData(encodeShortString(\"github\")),\n            dynamicCallData(verifierContract),\n            dynamicCallData(\"0\")\n          ]\n        },\n        {\n          execution: execution({}),\n          to: dynamicFelt(identityContract),\n          selector: dynamicFelt(getSelectorFromName(\"get_verifier_data\")),\n          calldata: [\n            dynamicCallData(void 0, [1, 0]),\n            dynamicCallData(encodeShortString(\"discord\")),\n            dynamicCallData(verifierContract),\n            dynamicCallData(\"0\")\n          ]\n        },\n        {\n          execution: execution({}),\n          to: dynamicFelt(identityContract),\n          selector: dynamicFelt(getSelectorFromName(\"get_verifier_data\")),\n          calldata: [\n            dynamicCallData(void 0, [1, 0]),\n            dynamicCallData(encodeShortString(\"proof_of_personhood\")),\n            dynamicCallData(popContract),\n            dynamicCallData(\"0\")\n          ]\n        },\n        // PFP\n        {\n          execution: execution({}),\n          to: dynamicFelt(identityContract),\n          selector: dynamicFelt(getSelectorFromName(\"get_verifier_data\")),\n          calldata: [\n            dynamicCallData(void 0, [1, 0]),\n            dynamicCallData(encodeShortString(\"nft_pp_contract\")),\n            dynamicCallData(pfpContract),\n            dynamicCallData(\"0\")\n          ]\n        },\n        {\n          execution: execution({}),\n          to: dynamicFelt(identityContract),\n          selector: dynamicFelt(getSelectorFromName(\"get_extended_verifier_data\")),\n          calldata: [\n            dynamicCallData(void 0, [1, 0]),\n            dynamicCallData(encodeShortString(\"nft_pp_id\")),\n            dynamicCallData(\"2\"),\n            dynamicCallData(pfpContract),\n            dynamicCallData(\"0\")\n          ]\n        },\n        {\n          execution: execution(void 0, void 0, [6, 0, 0]),\n          to: dynamicFelt(void 0, [6, 0]),\n          selector: dynamicFelt(getSelectorFromName(\"tokenURI\")),\n          calldata: [dynamicCallData(void 0, [7, 1]), dynamicCallData(void 0, [7, 2])]\n        }\n      ];\n      const data = await provider.callContract({\n        contractAddress: multicallAddress,\n        entrypoint: \"aggregate\",\n        calldata: CallData.compile({\n          calls\n        })\n      });\n      if (Array.isArray(data)) {\n        const size = parseInt(data[0], 16);\n        const finalArray = [];\n        let index = 1;\n        for (let i = 0; i < size; i += 1) {\n          if (index < data.length) {\n            const subArraySize = parseInt(data[index], 16);\n            index += 1;\n            const subArray = data.slice(index, index + subArraySize);\n            finalArray.push(subArray);\n            index += subArraySize;\n          } else {\n            break;\n          }\n        }\n        const name = useDecoded(finalArray[0].slice(1).map((hexString) => BigInt(hexString)));\n        const twitter = finalArray[2][0] !== \"0x0\" ? BigInt(finalArray[2][0]).toString() : void 0;\n        const github = finalArray[3][0] !== \"0x0\" ? BigInt(finalArray[3][0]).toString() : void 0;\n        const discord = finalArray[4][0] !== \"0x0\" ? BigInt(finalArray[4][0]).toString() : void 0;\n        const proofOfPersonhood = finalArray[5][0] === \"0x1\";\n        const profilePictureMetadata = data[0] === \"0x9\" ? finalArray[8].slice(1).map((val) => decodeShortString(val)).join(\"\") : void 0;\n        const profilePicture = profilePictureMetadata || `https://starknet.id/api/identicons/${BigInt(finalArray[1][0]).toString()}`;\n        return {\n          name,\n          twitter,\n          github,\n          discord,\n          proofOfPersonhood,\n          profilePicture\n        };\n      }\n      throw Error(\"Error while calling aggregate function\");\n    } catch (e) {\n      if (e instanceof Error) {\n        throw e;\n      }\n      throw Error(\"Could not get user stark profile data from address\");\n    }\n  }\n};\n\n// src/provider/extensions/default.ts\nvar RpcProvider2 = class extends (0,ts_mixer__WEBPACK_IMPORTED_MODULE_14__.Mixin)(RpcProvider, StarknetId) {\n};\n\n// src/provider/interface.ts\nvar ProviderInterface = class {\n};\n\n// src/provider/index.ts\nvar defaultProvider = new RpcProvider({ default: true });\n\n// src/signer/interface.ts\nvar SignerInterface = class {\n};\n\n// src/utils/typedData.ts\nvar typedData_exports = {};\n__export(typedData_exports, {\n  TypedDataRevision: () => starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision,\n  encodeData: () => encodeData,\n  encodeType: () => encodeType,\n  encodeValue: () => encodeValue,\n  getDependencies: () => getDependencies,\n  getMessageHash: () => getMessageHash,\n  getStructHash: () => getStructHash,\n  getTypeHash: () => getTypeHash,\n  isMerkleTreeType: () => isMerkleTreeType,\n  prepareSelector: () => prepareSelector\n});\n\n// src/utils/merkle.ts\nvar merkle_exports = {};\n__export(merkle_exports, {\n  MerkleTree: () => MerkleTree,\n  proofMerklePath: () => proofMerklePath\n});\nvar MerkleTree = class _MerkleTree {\n  leaves;\n  branches = [];\n  root;\n  hashMethod;\n  /**\n   * Create a Merkle tree\n   *\n   * @param leafHashes hex-string array\n   * @param hashMethod hash method to use, default: Pedersen\n   * @returns created Merkle tree\n   * @example\n   * ```typescript\n   * const leaves = ['0x1', '0x2', '0x3', '0x4', '0x5', '0x6', '0x7'];\n   * const tree = new MerkleTree(leaves);\n   * // tree = {\n   * //   branches: [['0x5bb9440e2...', '0x262697b88...', ...], ['0x38118a340...', ...], ...],\n   * //   leaves: ['0x1', '0x2', '0x3', '0x4', '0x5', '0x6', '0x7'],\n   * //   root: '0x7f748c75e5bdb7ae28013f076b8ab650c4e01d3530c6e5ab665f9f1accbe7d4',\n   * //   hashMethod: [Function computePedersenHash],\n   * // }\n   * ```\n   */\n  constructor(leafHashes, hashMethod = computePedersenHash) {\n    this.hashMethod = hashMethod;\n    this.leaves = leafHashes;\n    this.root = this.build(leafHashes);\n  }\n  /** @ignore */\n  build(leaves) {\n    if (leaves.length === 1) {\n      return leaves[0];\n    }\n    if (leaves.length !== this.leaves.length) {\n      this.branches.push(leaves);\n    }\n    const newLeaves = [];\n    for (let i = 0; i < leaves.length; i += 2) {\n      if (i + 1 === leaves.length) {\n        newLeaves.push(_MerkleTree.hash(leaves[i], \"0x0\", this.hashMethod));\n      } else {\n        newLeaves.push(_MerkleTree.hash(leaves[i], leaves[i + 1], this.hashMethod));\n      }\n    }\n    return this.build(newLeaves);\n  }\n  /**\n   * Calculate hash from ordered a and b, Pedersen hash default\n   *\n   * @param a first value\n   * @param b second value\n   * @param hashMethod hash method to use, default: Pedersen\n   * @returns result of the hash function\n   * @example\n   * ```typescript\n   * const result1 = MerkleTree.hash('0xabc', '0xdef');\n   * // result1 = '0x484f029da7914ada038b1adf67fc83632364a3ebc2cd9349b41ab61626d9e82'\n   *\n   * const customHashMethod = (a, b) => `custom_${a}_${b}`;\n   * const result2 = MerkleTree.hash('0xabc', '0xdef', customHashMethod);\n   * // result2 = 'custom_2748_3567'\n   * ```\n   */\n  static hash(a, b, hashMethod = computePedersenHash) {\n    const [aSorted, bSorted] = [BigInt(a), BigInt(b)].sort((x, y) => x >= y ? 1 : -1);\n    return hashMethod(aSorted, bSorted);\n  }\n  /**\n   * Calculates the merkle membership proof path\n   *\n   * @param leaf hex-string\n   * @param branch hex-string array\n   * @param hashPath hex-string array\n   * @returns collection of merkle proof hex-string hashes\n   * @example\n   * ```typescript\n   * const leaves = ['0x1', '0x2', '0x3', '0x4', '0x5', '0x6', '0x7'];\n   * const tree = new MerkleTree(leaves);\n   * const result = tree.getProof('0x3');\n   * // result = [\n   * //   '0x4',\n   * //   '0x5bb9440e27889a364bcb678b1f679ecd1347acdedcbf36e83494f857cc58026',\n   * //   '0x8c0e46dd2df9aaf3a8ebfbc25408a582ad7fa7171f0698ddbbc5130b4b4e60',\n   * // ]\n   * ```\n   */\n  getProof(leaf, branch = this.leaves, hashPath = []) {\n    const index = branch.indexOf(leaf);\n    if (index === -1) {\n      throw new Error(\"leaf not found\");\n    }\n    if (branch.length === 1) {\n      return hashPath;\n    }\n    const isLeft = index % 2 === 0;\n    const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? \"0x0\";\n    const newHashPath = [...hashPath, neededBranch];\n    const currentBranchLevelIndex = this.leaves.length === branch.length ? -1 : this.branches.findIndex((b) => b.length === branch.length);\n    const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];\n    return this.getProof(\n      _MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf, this.hashMethod),\n      nextBranch,\n      newHashPath\n    );\n  }\n};\nfunction proofMerklePath(root, leaf, path, hashMethod = computePedersenHash) {\n  if (path.length === 0) {\n    return root === leaf;\n  }\n  const [next, ...rest] = path;\n  return proofMerklePath(root, MerkleTree.hash(leaf, next, hashMethod), rest, hashMethod);\n}\n\n// src/utils/typedData.ts\nvar presetTypes = {\n  u256: JSON.parse('[{ \"name\": \"low\", \"type\": \"u128\" }, { \"name\": \"high\", \"type\": \"u128\" }]'),\n  TokenAmount: JSON.parse(\n    '[{ \"name\": \"token_address\", \"type\": \"ContractAddress\" }, { \"name\": \"amount\", \"type\": \"u256\" }]'\n  ),\n  NftId: JSON.parse(\n    '[{ \"name\": \"collection_address\", \"type\": \"ContractAddress\" }, { \"name\": \"token_id\", \"type\": \"u256\" }]'\n  )\n};\nvar revisionConfiguration = {\n  [starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE]: {\n    domain: \"StarknetDomain\",\n    hashMethod: computePoseidonHashOnElements,\n    hashMerkleMethod: computePoseidonHash,\n    escapeTypeString: (s) => `\"${s}\"`,\n    presetTypes\n  },\n  [starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY]: {\n    domain: \"StarkNetDomain\",\n    hashMethod: computePedersenHashOnElements,\n    hashMerkleMethod: computePedersenHash,\n    escapeTypeString: (s) => s,\n    presetTypes: {}\n  }\n};\nfunction assertRange(data, type, { min, max }) {\n  const value = BigInt(data);\n  assert(value >= min && value <= max, `${value} (${type}) is out of bounds [${min}, ${max}]`);\n}\nfunction identifyRevision({ types, domain }) {\n  if (revisionConfiguration[starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE].domain in types && domain.revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE)\n    return starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE;\n  if (revisionConfiguration[starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY].domain in types && (domain.revision ?? starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY) === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY)\n    return starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY;\n  return void 0;\n}\nfunction getHex(value) {\n  try {\n    return toHex(value);\n  } catch (e) {\n    if (isString(value)) {\n      return toHex(encodeShortString(value));\n    }\n    throw new Error(`Invalid BigNumberish: ${value}`);\n  }\n}\nfunction validateTypedData(data) {\n  const typedData = data;\n  return Boolean(\n    typedData.message && typedData.primaryType && typedData.types && identifyRevision(typedData)\n  );\n}\nfunction prepareSelector(selector) {\n  return isHex(selector) ? selector : getSelectorFromName(selector);\n}\nfunction isMerkleTreeType(type) {\n  return type.type === \"merkletree\";\n}\nfunction getDependencies(types, type, dependencies = [], contains = \"\", revision = starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY) {\n  if (type[type.length - 1] === \"*\") {\n    type = type.slice(0, -1);\n  } else if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n    if (type === \"enum\") {\n      type = contains;\n    } else if (type.match(/^\\(.*\\)$/)) {\n      type = type.slice(1, -1);\n    }\n  }\n  if (dependencies.includes(type) || !types[type]) {\n    return dependencies;\n  }\n  return [\n    type,\n    ...types[type].reduce(\n      (previous, t) => [\n        ...previous,\n        ...getDependencies(types, t.type, previous, t.contains, revision).filter(\n          (dependency) => !previous.includes(dependency)\n        )\n      ],\n      []\n    )\n  ];\n}\nfunction getMerkleTreeType(types, ctx) {\n  if (ctx.parent && ctx.key) {\n    const parentType = types[ctx.parent];\n    const merkleType = parentType.find((t) => t.name === ctx.key);\n    const isMerkleTree = isMerkleTreeType(merkleType);\n    if (!isMerkleTree) {\n      throw new Error(`${ctx.key} is not a merkle tree`);\n    }\n    if (merkleType.contains.endsWith(\"*\")) {\n      throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);\n    }\n    return merkleType.contains;\n  }\n  return \"raw\";\n}\nfunction encodeType(types, type, revision = starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY) {\n  const allTypes = revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE ? { ...types, ...revisionConfiguration[revision].presetTypes } : types;\n  const [primary, ...dependencies] = getDependencies(\n    allTypes,\n    type,\n    void 0,\n    void 0,\n    revision\n  );\n  const newTypes = !primary ? [] : [primary, ...dependencies.sort()];\n  const esc = revisionConfiguration[revision].escapeTypeString;\n  return newTypes.map((dependency) => {\n    const dependencyElements = allTypes[dependency].map((t) => {\n      const targetType = t.type === \"enum\" && revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE ? t.contains : t.type;\n      const typeString = targetType.match(/^\\(.*\\)$/) ? `(${targetType.slice(1, -1).split(\",\").map((e) => e ? esc(e) : e).join(\",\")})` : esc(targetType);\n      return `${esc(t.name)}:${typeString}`;\n    });\n    return `${esc(dependency)}(${dependencyElements})`;\n  }).join(\"\");\n}\nfunction getTypeHash(types, type, revision = starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY) {\n  return getSelectorFromName(encodeType(types, type, revision));\n}\nfunction encodeValue(types, type, data, ctx = {}, revision = starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY) {\n  if (types[type]) {\n    return [type, getStructHash(types, type, data, revision)];\n  }\n  if (revisionConfiguration[revision].presetTypes[type]) {\n    return [\n      type,\n      getStructHash(\n        revisionConfiguration[revision].presetTypes,\n        type,\n        data,\n        revision\n      )\n    ];\n  }\n  if (type.endsWith(\"*\")) {\n    const hashes = data.map(\n      (entry) => encodeValue(types, type.slice(0, -1), entry, void 0, revision)[1]\n    );\n    return [type, revisionConfiguration[revision].hashMethod(hashes)];\n  }\n  switch (type) {\n    case \"enum\": {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        const [variantKey, variantData] = Object.entries(data)[0];\n        const parentType = types[ctx.parent][0];\n        const enumType = types[parentType.contains];\n        const variantType = enumType.find((t) => t.name === variantKey);\n        const variantIndex = enumType.indexOf(variantType);\n        const encodedSubtypes = variantType.type.slice(1, -1).split(\",\").map((subtype, index) => {\n          if (!subtype)\n            return subtype;\n          const subtypeData = variantData[index];\n          return encodeValue(types, subtype, subtypeData, void 0, revision)[1];\n        });\n        return [\n          type,\n          revisionConfiguration[revision].hashMethod([variantIndex, ...encodedSubtypes])\n        ];\n      }\n      return [type, getHex(data)];\n    }\n    case \"merkletree\": {\n      const merkleTreeType = getMerkleTreeType(types, ctx);\n      const structHashes = data.map((struct) => {\n        return encodeValue(types, merkleTreeType, struct, void 0, revision)[1];\n      });\n      const { root } = new MerkleTree(\n        structHashes,\n        revisionConfiguration[revision].hashMerkleMethod\n      );\n      return [\"felt\", root];\n    }\n    case \"selector\": {\n      return [\"felt\", prepareSelector(data)];\n    }\n    case \"string\": {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        const byteArray = byteArrayFromString(data);\n        const elements = [\n          byteArray.data.length,\n          ...byteArray.data,\n          byteArray.pending_word,\n          byteArray.pending_word_len\n        ];\n        return [type, revisionConfiguration[revision].hashMethod(elements)];\n      }\n      return [type, getHex(data)];\n    }\n    case \"i128\": {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        const value = BigInt(data);\n        assertRange(value, type, RANGE_I128);\n        return [type, getHex(value < 0n ? PRIME + value : value)];\n      }\n      return [type, getHex(data)];\n    }\n    case \"timestamp\":\n    case \"u128\": {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        assertRange(data, type, RANGE_U128);\n      }\n      return [type, getHex(data)];\n    }\n    case \"felt\":\n    case \"shortstring\": {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        assertRange(getHex(data), type, RANGE_FELT);\n      }\n      return [type, getHex(data)];\n    }\n    case \"ClassHash\":\n    case \"ContractAddress\": {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        assertRange(data, type, RANGE_FELT);\n      }\n      return [type, getHex(data)];\n    }\n    case \"bool\": {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        assert(typeof data === \"boolean\", `Type mismatch for ${type} ${data}`);\n      }\n      return [type, getHex(data)];\n    }\n    default: {\n      if (revision === starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.ACTIVE) {\n        throw new Error(`Unsupported type: ${type}`);\n      }\n      return [type, getHex(data)];\n    }\n  }\n}\nfunction encodeData(types, type, data, revision = starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY) {\n  const targetType = types[type] ?? revisionConfiguration[revision].presetTypes[type];\n  const [returnTypes, values] = targetType.reduce(\n    ([ts, vs], field) => {\n      if (data[field.name] === void 0 || data[field.name] === null && field.type !== \"enum\") {\n        throw new Error(`Cannot encode data: missing data for '${field.name}'`);\n      }\n      const value = data[field.name];\n      const ctx = { parent: type, key: field.name };\n      const [t, encodedValue] = encodeValue(types, field.type, value, ctx, revision);\n      return [\n        [...ts, t],\n        [...vs, encodedValue]\n      ];\n    },\n    [[\"felt\"], [getTypeHash(types, type, revision)]]\n  );\n  return [returnTypes, values];\n}\nfunction getStructHash(types, type, data, revision = starknet_types_07__WEBPACK_IMPORTED_MODULE_2__.TypedDataRevision.LEGACY) {\n  return revisionConfiguration[revision].hashMethod(encodeData(types, type, data, revision)[1]);\n}\nfunction getMessageHash(typedData, account) {\n  if (!validateTypedData(typedData)) {\n    throw new Error(\"Typed data does not match JSON schema\");\n  }\n  const revision = identifyRevision(typedData);\n  const { domain, hashMethod } = revisionConfiguration[revision];\n  const message = [\n    encodeShortString(\"StarkNet Message\"),\n    getStructHash(typedData.types, domain, typedData.domain, revision),\n    account,\n    getStructHash(typedData.types, typedData.primaryType, typedData.message, revision)\n  ];\n  return hashMethod(message);\n}\n\n// src/signer/default.ts\nvar Signer = class {\n  pk;\n  constructor(pk = _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.utils.randomPrivateKey()) {\n    this.pk = pk instanceof Uint8Array ? buf2hex(pk) : toHex(pk);\n  }\n  async getPubKey() {\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.getStarkKey(this.pk);\n  }\n  async signMessage(typedData, accountAddress) {\n    const msgHash = getMessageHash(typedData, accountAddress);\n    return this.signRaw(msgHash);\n  }\n  async signTransaction(transactions, details) {\n    const compiledCalldata = getExecuteCalldata(transactions, details.cairoVersion);\n    let msgHash;\n    if (Object.values(api_exports.ETransactionVersion2).includes(details.version)) {\n      const det = details;\n      msgHash = calculateInvokeTransactionHash2({\n        ...det,\n        senderAddress: det.walletAddress,\n        compiledCalldata,\n        version: det.version\n      });\n    } else if (Object.values(api_exports.ETransactionVersion3).includes(details.version)) {\n      const det = details;\n      msgHash = calculateInvokeTransactionHash2({\n        ...det,\n        senderAddress: det.walletAddress,\n        compiledCalldata,\n        version: det.version,\n        nonceDataAvailabilityMode: intDAM(det.nonceDataAvailabilityMode),\n        feeDataAvailabilityMode: intDAM(det.feeDataAvailabilityMode)\n      });\n    } else {\n      throw Error(\"unsupported signTransaction version\");\n    }\n    return this.signRaw(msgHash);\n  }\n  async signDeployAccountTransaction(details) {\n    const compiledConstructorCalldata = CallData.compile(details.constructorCalldata);\n    let msgHash;\n    if (Object.values(api_exports.ETransactionVersion2).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeployAccountTransactionHash3({\n        ...det,\n        salt: det.addressSalt,\n        constructorCalldata: compiledConstructorCalldata,\n        version: det.version\n      });\n    } else if (Object.values(api_exports.ETransactionVersion3).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeployAccountTransactionHash3({\n        ...det,\n        salt: det.addressSalt,\n        compiledConstructorCalldata,\n        version: det.version,\n        nonceDataAvailabilityMode: intDAM(det.nonceDataAvailabilityMode),\n        feeDataAvailabilityMode: intDAM(det.feeDataAvailabilityMode)\n      });\n    } else {\n      throw Error(\"unsupported signDeployAccountTransaction version\");\n    }\n    return this.signRaw(msgHash);\n  }\n  async signDeclareTransaction(details) {\n    let msgHash;\n    if (Object.values(api_exports.ETransactionVersion2).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeclareTransactionHash3({\n        ...det,\n        version: det.version\n      });\n    } else if (Object.values(api_exports.ETransactionVersion3).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeclareTransactionHash3({\n        ...det,\n        version: det.version,\n        nonceDataAvailabilityMode: intDAM(det.nonceDataAvailabilityMode),\n        feeDataAvailabilityMode: intDAM(det.feeDataAvailabilityMode)\n      });\n    } else {\n      throw Error(\"unsupported signDeclareTransaction version\");\n    }\n    return this.signRaw(msgHash);\n  }\n  async signRaw(msgHash) {\n    return _scure_starknet__WEBPACK_IMPORTED_MODULE_4__.sign(msgHash, this.pk);\n  }\n};\n\n// src/signer/ethSigner.ts\n\n\n// src/utils/uint256.ts\nvar uint256_exports = {};\n__export(uint256_exports, {\n  UINT_128_MAX: () => UINT_128_MAX,\n  UINT_256_MAX: () => UINT_256_MAX,\n  bnToUint256: () => bnToUint256,\n  isUint256: () => isUint256,\n  uint256ToBN: () => uint256ToBN\n});\nfunction uint256ToBN(uint2562) {\n  return new CairoUint256(uint2562).toBigInt();\n}\nfunction isUint256(bn) {\n  return CairoUint256.is(bn);\n}\nfunction bnToUint256(bn) {\n  return new CairoUint256(bn).toUint256HexString();\n}\n\n// src/signer/ethSigner.ts\nvar EthSigner = class {\n  pk;\n  // hex string without 0x and with an odd number of characters\n  constructor(pk = ethRandomPrivateKey()) {\n    this.pk = pk instanceof Uint8Array ? buf2hex(pk).padStart(64, \"0\") : removeHexPrefix(toHex(pk)).padStart(64, \"0\");\n  }\n  /**\n   * provides the Ethereum full public key (without parity prefix)\n   * @returns an hex string : 64 first characters are Point X coordinate. 64 last characters are Point Y coordinate.\n   */\n  async getPubKey() {\n    return addHexPrefix(\n      buf2hex(_noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__.secp256k1.getPublicKey(this.pk, false)).padStart(130, \"0\").slice(2)\n    );\n  }\n  async signMessage(typedData, accountAddress) {\n    const msgHash = getMessageHash(typedData, accountAddress);\n    const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__.secp256k1.sign(\n      removeHexPrefix(sanitizeHex(msgHash)),\n      this.pk\n    );\n    return this.formatEthSignature(signature);\n  }\n  async signTransaction(transactions, details) {\n    const compiledCalldata = getExecuteCalldata(transactions, details.cairoVersion);\n    let msgHash;\n    if (Object.values(api_exports.ETransactionVersion2).includes(details.version)) {\n      const det = details;\n      msgHash = calculateInvokeTransactionHash2({\n        ...det,\n        senderAddress: det.walletAddress,\n        compiledCalldata,\n        version: det.version\n      });\n    } else if (Object.values(api_exports.ETransactionVersion3).includes(details.version)) {\n      const det = details;\n      msgHash = calculateInvokeTransactionHash2({\n        ...det,\n        senderAddress: det.walletAddress,\n        compiledCalldata,\n        version: det.version,\n        nonceDataAvailabilityMode: intDAM(det.nonceDataAvailabilityMode),\n        feeDataAvailabilityMode: intDAM(det.feeDataAvailabilityMode)\n      });\n    } else {\n      throw Error(\"unsupported signTransaction version\");\n    }\n    const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__.secp256k1.sign(\n      removeHexPrefix(sanitizeHex(msgHash)),\n      this.pk\n    );\n    return this.formatEthSignature(signature);\n  }\n  async signDeployAccountTransaction(details) {\n    const compiledConstructorCalldata = CallData.compile(details.constructorCalldata);\n    let msgHash;\n    if (Object.values(api_exports.ETransactionVersion2).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeployAccountTransactionHash3({\n        ...det,\n        salt: det.addressSalt,\n        constructorCalldata: compiledConstructorCalldata,\n        version: det.version\n      });\n    } else if (Object.values(api_exports.ETransactionVersion3).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeployAccountTransactionHash3({\n        ...det,\n        salt: det.addressSalt,\n        compiledConstructorCalldata,\n        version: det.version,\n        nonceDataAvailabilityMode: intDAM(det.nonceDataAvailabilityMode),\n        feeDataAvailabilityMode: intDAM(det.feeDataAvailabilityMode)\n      });\n    } else {\n      throw Error(\"unsupported signDeployAccountTransaction version\");\n    }\n    const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__.secp256k1.sign(\n      removeHexPrefix(sanitizeHex(msgHash)),\n      this.pk\n    );\n    return this.formatEthSignature(signature);\n  }\n  async signDeclareTransaction(details) {\n    let msgHash;\n    if (Object.values(api_exports.ETransactionVersion2).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeclareTransactionHash3({\n        ...det,\n        version: det.version\n      });\n    } else if (Object.values(api_exports.ETransactionVersion3).includes(details.version)) {\n      const det = details;\n      msgHash = calculateDeclareTransactionHash3({\n        ...det,\n        version: det.version,\n        nonceDataAvailabilityMode: intDAM(det.nonceDataAvailabilityMode),\n        feeDataAvailabilityMode: intDAM(det.feeDataAvailabilityMode)\n      });\n    } else {\n      throw Error(\"unsupported signDeclareTransaction version\");\n    }\n    const signature = _noble_curves_secp256k1__WEBPACK_IMPORTED_MODULE_9__.secp256k1.sign(\n      removeHexPrefix(sanitizeHex(msgHash)),\n      this.pk\n    );\n    return this.formatEthSignature(signature);\n  }\n  /**\n   * Serialize the signature in conformity with starknet::eth_signature::Signature\n   * @param ethSignature secp256k1 signature from Noble curves library\n   * @return an array of felts, representing a Cairo Eth Signature.\n   */\n  formatEthSignature(ethSignature) {\n    const r = bnToUint256(ethSignature.r);\n    const s = bnToUint256(ethSignature.s);\n    return [\n      toHex(r.low),\n      toHex(r.high),\n      toHex(s.low),\n      toHex(s.high),\n      toHex(ethSignature.recovery)\n    ];\n  }\n};\n\n// src/utils/events/index.ts\nvar events_exports = {};\n__export(events_exports, {\n  getAbiEvents: () => getAbiEvents,\n  isAbiEvent: () => isAbiEvent,\n  isObject: () => isObject,\n  parseEvents: () => parseEvents,\n  parseUDCEvent: () => parseUDCEvent\n});\nfunction isAbiEvent(object) {\n  return object.type === \"event\";\n}\nfunction getCairo0AbiEvents(abi) {\n  return abi.filter((abiEntry) => abiEntry.type === \"event\").reduce((acc, abiEntry) => {\n    const entryName = abiEntry.name;\n    const abiEntryMod = { ...abiEntry };\n    abiEntryMod.name = entryName;\n    return {\n      ...acc,\n      [addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod\n    };\n  }, {});\n}\nfunction getCairo1AbiEvents(abi) {\n  const abiEventsStructs = abi.filter((obj) => isAbiEvent(obj) && obj.kind === \"struct\");\n  const abiEventsEnums = abi.filter((obj) => isAbiEvent(obj) && obj.kind === \"enum\");\n  const abiEventsData = abiEventsStructs.reduce((acc, event) => {\n    let nameList = [];\n    let { name } = event;\n    let flat = false;\n    const findName = (variant) => variant.type === name;\n    while (true) {\n      const eventEnum = abiEventsEnums.find((eventE) => eventE.variants.some(findName));\n      if (typeof eventEnum === \"undefined\")\n        break;\n      const variant = eventEnum.variants.find(findName);\n      nameList.unshift(variant.name);\n      if (variant.kind === \"flat\")\n        flat = true;\n      name = eventEnum.name;\n    }\n    if (nameList.length === 0) {\n      throw new Error(\"inconsistency in ABI events definition.\");\n    }\n    if (flat)\n      nameList = [nameList[nameList.length - 1]];\n    const final = nameList.pop();\n    let result = {\n      [addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.keccak(utf8ToArray(final)).toString(16))]: event\n    };\n    while (nameList.length > 0) {\n      result = {\n        [addHexPrefix(_scure_starknet__WEBPACK_IMPORTED_MODULE_4__.keccak(utf8ToArray(nameList.pop())).toString(16))]: result\n      };\n    }\n    result = { ...result };\n    return mergeAbiEvents(acc, result);\n  }, {});\n  return abiEventsData;\n}\nfunction getAbiEvents(abi) {\n  return isCairo1Abi(abi) ? getCairo1AbiEvents(abi) : getCairo0AbiEvents(abi);\n}\nfunction isObject(item) {\n  return item && typeof item === \"object\" && !Array.isArray(item);\n}\nfunction mergeAbiEvents(target, source) {\n  const output = { ...target };\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach((key) => {\n      if (isObject(source[key])) {\n        if (!(key in target))\n          Object.assign(output, { [key]: source[key] });\n        else\n          output[key] = mergeAbiEvents(target[key], source[key]);\n      } else {\n        Object.assign(output, { [key]: source[key] });\n      }\n    });\n  }\n  return output;\n}\nfunction parseEvents(providerReceivedEvents, abiEvents, abiStructs, abiEnums) {\n  const ret = providerReceivedEvents.flat().reduce((acc, recEvent) => {\n    let abiEvent = abiEvents[recEvent.keys.shift() ?? 0];\n    if (!abiEvent) {\n      return acc;\n    }\n    while (!abiEvent.name) {\n      const hashName = recEvent.keys.shift();\n      assert(!!hashName, 'Not enough data in \"key\" property of this event.');\n      abiEvent = abiEvent[hashName];\n    }\n    const parsedEvent = {};\n    parsedEvent[abiEvent.name] = {};\n    const keysIter = recEvent.keys[Symbol.iterator]();\n    const dataIter = recEvent.data[Symbol.iterator]();\n    const abiEventKeys = abiEvent.members?.filter((it) => it.kind === \"key\") || abiEvent.keys;\n    const abiEventData = abiEvent.members?.filter((it) => it.kind === \"data\") || abiEvent.data;\n    abiEventKeys.forEach((key) => {\n      parsedEvent[abiEvent.name][key.name] = responseParser(\n        keysIter,\n        key,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    abiEventData.forEach((data) => {\n      parsedEvent[abiEvent.name][data.name] = responseParser(\n        dataIter,\n        data,\n        abiStructs,\n        abiEnums,\n        parsedEvent[abiEvent.name]\n      );\n    });\n    acc.push(parsedEvent);\n    return acc;\n  }, []);\n  return ret;\n}\nfunction parseUDCEvent(txReceipt) {\n  if (!txReceipt.events) {\n    throw new Error(\"UDC emitted event is empty\");\n  }\n  const event = txReceipt.events.find(\n    (it) => cleanHex(it.from_address) === cleanHex(UDC.ADDRESS)\n  ) || {\n    data: []\n  };\n  return {\n    transaction_hash: txReceipt.transaction_hash,\n    contract_address: event.data[0],\n    address: event.data[0],\n    deployer: event.data[1],\n    unique: event.data[2],\n    classHash: event.data[3],\n    calldata_len: event.data[4],\n    calldata: event.data.slice(5, 5 + parseInt(event.data[4], 16)),\n    salt: event.data[event.data.length - 1]\n  };\n}\n\n// src/account/default.ts\nvar Account = class extends RpcProvider2 {\n  signer;\n  address;\n  cairoVersion;\n  transactionVersion;\n  constructor(providerOrOptions, address, pkOrSigner, cairoVersion, transactionVersion = api_exports.ETransactionVersion.V2) {\n    super(providerOrOptions);\n    this.address = address.toLowerCase();\n    this.signer = isString(pkOrSigner) || pkOrSigner instanceof Uint8Array ? new Signer(pkOrSigner) : pkOrSigner;\n    if (cairoVersion) {\n      this.cairoVersion = cairoVersion.toString();\n    }\n    this.transactionVersion = transactionVersion;\n  }\n  // provided version or contract based preferred transactionVersion\n  getPreferredVersion(type12, type3) {\n    if (this.transactionVersion === api_exports.ETransactionVersion.V3)\n      return type3;\n    if (this.transactionVersion === api_exports.ETransactionVersion.V2)\n      return type12;\n    return api_exports.ETransactionVersion.V3;\n  }\n  async getNonce(blockIdentifier) {\n    return super.getNonceForAddress(this.address, blockIdentifier);\n  }\n  async getNonceSafe(nonce) {\n    try {\n      return toBigInt(nonce ?? await this.getNonce());\n    } catch (error) {\n      return 0n;\n    }\n  }\n  /**\n   * Retrieves the Cairo version from the network and sets `cairoVersion` if not already set in the constructor.\n   * @param classHash if provided detects Cairo version from classHash, otherwise from the account address\n   */\n  async getCairoVersion(classHash) {\n    if (!this.cairoVersion) {\n      const { cairo } = classHash ? await super.getContractVersion(void 0, classHash) : await super.getContractVersion(this.address);\n      this.cairoVersion = cairo;\n    }\n    return this.cairoVersion;\n  }\n  async estimateFee(calls, estimateFeeDetails = {}) {\n    return this.estimateInvokeFee(calls, estimateFeeDetails);\n  }\n  async estimateInvokeFee(calls, details = {}) {\n    const {\n      nonce: providedNonce,\n      blockIdentifier,\n      version: providedVersion,\n      skipValidate = true\n    } = details;\n    const transactions = Array.isArray(calls) ? calls : [calls];\n    const nonce = toBigInt(providedNonce ?? await this.getNonce());\n    const version = toTransactionVersion(\n      this.getPreferredVersion(api_exports.ETransactionVersion.F1, api_exports.ETransactionVersion.F3),\n      toFeeVersion(providedVersion)\n    );\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      ...v3Details(details),\n      walletAddress: this.address,\n      nonce,\n      maxFee: ZERO,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion(),\n      skipValidate\n    };\n    const invocation = await this.buildInvocation(transactions, signerDetails);\n    return super.getInvokeEstimateFee(\n      { ...invocation },\n      { ...v3Details(details), version, nonce },\n      blockIdentifier,\n      details.skipValidate\n    );\n  }\n  async estimateDeclareFee(payload, details = {}) {\n    const {\n      blockIdentifier,\n      nonce: providedNonce,\n      version: providedVersion,\n      skipValidate = true\n    } = details;\n    const nonce = toBigInt(providedNonce ?? await this.getNonce());\n    const version = toTransactionVersion(\n      !isSierra(payload.contract) ? api_exports.ETransactionVersion.F1 : this.getPreferredVersion(api_exports.ETransactionVersion.F2, api_exports.ETransactionVersion.F3),\n      toFeeVersion(providedVersion)\n    );\n    const chainId = await this.getChainId();\n    const declareContractTransaction = await this.buildDeclarePayload(payload, {\n      ...v3Details(details),\n      nonce,\n      chainId,\n      version,\n      walletAddress: this.address,\n      maxFee: ZERO,\n      cairoVersion: void 0,\n      // unused parameter\n      skipValidate\n    });\n    return super.getDeclareEstimateFee(\n      declareContractTransaction,\n      { ...v3Details(details), version, nonce },\n      blockIdentifier,\n      details.skipValidate\n    );\n  }\n  async estimateAccountDeployFee({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress\n  }, details = {}) {\n    const { blockIdentifier, version: providedVersion, skipValidate = true } = details;\n    const version = toTransactionVersion(\n      this.getPreferredVersion(api_exports.ETransactionVersion.F1, api_exports.ETransactionVersion.F3),\n      toFeeVersion(providedVersion)\n    );\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const payload = await this.buildAccountDeployPayload(\n      { classHash, addressSalt, constructorCalldata, contractAddress },\n      {\n        ...v3Details(details),\n        nonce,\n        chainId,\n        version,\n        walletAddress: this.address,\n        // unused parameter\n        maxFee: ZERO,\n        cairoVersion: void 0,\n        // unused parameter,\n        skipValidate\n      }\n    );\n    return super.getDeployAccountEstimateFee(\n      { ...payload },\n      { ...v3Details(details), version, nonce },\n      blockIdentifier,\n      details.skipValidate\n    );\n  }\n  async estimateDeployFee(payload, details = {}) {\n    const calls = this.buildUDCContractPayload(payload);\n    return this.estimateInvokeFee(calls, details);\n  }\n  async estimateFeeBulk(invocations, details = {}) {\n    const { nonce, blockIdentifier, version, skipValidate } = details;\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      ...v3Details(details),\n      versions: [\n        api_exports.ETransactionVersion.F1,\n        // non-sierra\n        toTransactionVersion(\n          this.getPreferredVersion(api_exports.ETransactionVersion.F2, api_exports.ETransactionVersion.F3),\n          version\n        )\n        // sierra\n      ],\n      nonce,\n      blockIdentifier,\n      skipValidate\n    });\n    return super.getEstimateFeeBulk(accountInvocations, {\n      blockIdentifier,\n      skipValidate\n    });\n  }\n  async simulateTransaction(invocations, details = {}) {\n    const { nonce, blockIdentifier, skipValidate = true, skipExecute, version } = details;\n    const accountInvocations = await this.accountInvocationsFactory(invocations, {\n      ...v3Details(details),\n      versions: [\n        api_exports.ETransactionVersion.V1,\n        // non-sierra\n        toTransactionVersion(\n          this.getPreferredVersion(api_exports.ETransactionVersion.V2, api_exports.ETransactionVersion.V3),\n          version\n        )\n      ],\n      nonce,\n      blockIdentifier,\n      skipValidate\n    });\n    return super.getSimulateTransaction(accountInvocations, {\n      blockIdentifier,\n      skipValidate,\n      skipExecute\n    });\n  }\n  async execute(transactions, arg2, transactionsDetail = {}) {\n    const details = arg2 === void 0 || Array.isArray(arg2) ? transactionsDetail : arg2;\n    const calls = Array.isArray(transactions) ? transactions : [transactions];\n    const nonce = toBigInt(details.nonce ?? await this.getNonce());\n    const version = toTransactionVersion(\n      this.getPreferredVersion(api_exports.ETransactionVersion.V1, api_exports.ETransactionVersion.V3),\n      // TODO: does this depend on cairo version ?\n      details.version\n    );\n    const estimate = await this.getUniversalSuggestedFee(\n      version,\n      { type: \"INVOKE_FUNCTION\" /* INVOKE */, payload: transactions },\n      {\n        ...details,\n        version\n      }\n    );\n    const chainId = await this.getChainId();\n    const signerDetails = {\n      ...v3Details(details),\n      resourceBounds: estimate.resourceBounds,\n      walletAddress: this.address,\n      nonce,\n      maxFee: estimate.maxFee,\n      version,\n      chainId,\n      cairoVersion: await this.getCairoVersion()\n    };\n    const signature = await this.signer.signTransaction(calls, signerDetails);\n    const calldata = getExecuteCalldata(calls, await this.getCairoVersion());\n    return this.invokeFunction(\n      { contractAddress: this.address, calldata, signature },\n      {\n        ...v3Details(details),\n        resourceBounds: estimate.resourceBounds,\n        nonce,\n        maxFee: estimate.maxFee,\n        version\n      }\n    );\n  }\n  /**\n   * First check if contract is already declared, if not declare it\n   * If contract already declared returned transaction_hash is ''.\n   * Method will pass even if contract is already declared\n   * @param transactionsDetail (optional)\n   */\n  async declareIfNot(payload, transactionsDetail = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    try {\n      await this.getClassByHash(declareContractPayload.classHash);\n    } catch (error) {\n      return this.declare(payload, transactionsDetail);\n    }\n    return {\n      transaction_hash: \"\",\n      class_hash: declareContractPayload.classHash\n    };\n  }\n  async declare(payload, details = {}) {\n    const declareContractPayload = extractContractHashes(payload);\n    const { nonce, version: providedVersion } = details;\n    const version = toTransactionVersion(\n      !isSierra(payload.contract) ? api_exports.ETransactionVersion.V1 : this.getPreferredVersion(api_exports.ETransactionVersion.V2, api_exports.ETransactionVersion.V3),\n      providedVersion\n    );\n    const estimate = await this.getUniversalSuggestedFee(\n      version,\n      {\n        type: \"DECLARE\" /* DECLARE */,\n        payload: declareContractPayload\n      },\n      {\n        ...details,\n        version\n      }\n    );\n    const declareDetails = {\n      ...v3Details(details),\n      resourceBounds: estimate.resourceBounds,\n      maxFee: estimate.maxFee,\n      nonce: toBigInt(nonce ?? await this.getNonce()),\n      version,\n      chainId: await this.getChainId(),\n      walletAddress: this.address,\n      cairoVersion: void 0\n    };\n    const declareContractTransaction = await this.buildDeclarePayload(\n      declareContractPayload,\n      declareDetails\n    );\n    return this.declareContract(declareContractTransaction, declareDetails);\n  }\n  async deploy(payload, details = {}) {\n    const { calls, addresses } = buildUDCCall(payload, this.address);\n    const invokeResponse = await this.execute(calls, void 0, details);\n    return {\n      ...invokeResponse,\n      contract_address: addresses\n    };\n  }\n  async deployContract(payload, details = {}) {\n    const deployTx = await this.deploy(payload, details);\n    const txReceipt = await this.waitForTransaction(deployTx.transaction_hash);\n    return parseUDCEvent(txReceipt);\n  }\n  async declareAndDeploy(payload, details = {}) {\n    const { constructorCalldata, salt, unique } = payload;\n    let declare = await this.declareIfNot(payload, details);\n    if (declare.transaction_hash !== \"\") {\n      const tx = await this.waitForTransaction(declare.transaction_hash);\n      declare = { ...declare, ...tx };\n    }\n    const deploy = await this.deployContract(\n      { classHash: declare.class_hash, salt, unique, constructorCalldata },\n      details\n    );\n    return { declare: { ...declare }, deploy };\n  }\n  deploySelf = this.deployAccount;\n  async deployAccount({\n    classHash,\n    constructorCalldata = [],\n    addressSalt = 0,\n    contractAddress: providedContractAddress\n  }, details = {}) {\n    const version = toTransactionVersion(\n      this.getPreferredVersion(api_exports.ETransactionVersion.V1, api_exports.ETransactionVersion.V3),\n      details.version\n    );\n    const nonce = ZERO;\n    const chainId = await this.getChainId();\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const estimate = await this.getUniversalSuggestedFee(\n      version,\n      {\n        type: \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */,\n        payload: {\n          classHash,\n          constructorCalldata: compiledCalldata,\n          addressSalt,\n          contractAddress\n        }\n      },\n      details\n    );\n    const signature = await this.signer.signDeployAccountTransaction({\n      ...v3Details(details),\n      classHash,\n      constructorCalldata: compiledCalldata,\n      contractAddress,\n      addressSalt,\n      chainId,\n      resourceBounds: estimate.resourceBounds,\n      maxFee: estimate.maxFee,\n      version,\n      nonce\n    });\n    return this.deployAccountContract(\n      { classHash, addressSalt, constructorCalldata, signature },\n      {\n        ...v3Details(details),\n        nonce,\n        resourceBounds: estimate.resourceBounds,\n        maxFee: estimate.maxFee,\n        version\n      }\n    );\n  }\n  async signMessage(typedData) {\n    return this.signer.signMessage(typedData, this.address);\n  }\n  async hashMessage(typedData) {\n    return getMessageHash(typedData, this.address);\n  }\n  async verifyMessageHash(hash, signature, signatureVerificationFunctionName, signatureVerificationResponse) {\n    const knownSigVerificationFName = signatureVerificationFunctionName ? [signatureVerificationFunctionName] : [\"isValidSignature\", \"is_valid_signature\"];\n    const knownSignatureResponse = signatureVerificationResponse || {\n      okResponse: [\n        // any non-nok response is true\n      ],\n      nokResponse: [\n        \"0x0\",\n        // Devnet\n        \"0x00\"\n        // OpenZeppelin 0.7.0 to 0.9.0 invalid signature\n      ],\n      error: [\n        \"argent/invalid-signature\",\n        // ArgentX 0.3.0 to 0.3.1\n        \"is invalid, with respect to the public key\",\n        // OpenZeppelin until 0.6.1, Braavos 0.0.11\n        \"INVALID_SIG\"\n        // Braavos 1.0.0\n      ]\n    };\n    let error;\n    for (const SigVerificationFName of knownSigVerificationFName) {\n      try {\n        const resp = await this.callContract({\n          contractAddress: this.address,\n          entrypoint: SigVerificationFName,\n          calldata: CallData.compile({\n            hash: toBigInt(hash).toString(),\n            signature: formatSignature(signature)\n          })\n        });\n        if (knownSignatureResponse.nokResponse.includes(resp[0].toString())) {\n          return false;\n        }\n        if (knownSignatureResponse.okResponse.length === 0 || knownSignatureResponse.okResponse.includes(resp[0].toString())) {\n          return true;\n        }\n        throw Error(\"signatureVerificationResponse Error: response is not part of known responses\");\n      } catch (err) {\n        if (knownSignatureResponse.error.some(\n          (errMessage) => err.message.includes(errMessage)\n        )) {\n          return false;\n        }\n        error = err;\n      }\n    }\n    throw Error(`Signature verification Error: ${error}`);\n  }\n  async verifyMessage(typedData, signature, signatureVerificationFunctionName, signatureVerificationResponse) {\n    const hash = await this.hashMessage(typedData);\n    return this.verifyMessageHash(\n      hash,\n      signature,\n      signatureVerificationFunctionName,\n      signatureVerificationResponse\n    );\n  }\n  /*\n   * Support methods\n   */\n  async getUniversalSuggestedFee(version, { type, payload }, details) {\n    let maxFee = 0;\n    let resourceBounds = estimateFeeToBounds(ZERO);\n    if (version === api_exports.ETransactionVersion.V3) {\n      resourceBounds = details.resourceBounds ?? (await this.getSuggestedFee({ type, payload }, details)).resourceBounds;\n    } else {\n      maxFee = details.maxFee ?? (await this.getSuggestedFee({ type, payload }, details)).suggestedMaxFee;\n    }\n    return {\n      maxFee,\n      resourceBounds\n    };\n  }\n  async getSuggestedFee({ type, payload }, details) {\n    let feeEstimate;\n    switch (type) {\n      case \"INVOKE_FUNCTION\" /* INVOKE */:\n        feeEstimate = await this.estimateInvokeFee(payload, details);\n        break;\n      case \"DECLARE\" /* DECLARE */:\n        feeEstimate = await this.estimateDeclareFee(payload, details);\n        break;\n      case \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */:\n        feeEstimate = await this.estimateAccountDeployFee(payload, details);\n        break;\n      case \"DEPLOY\" /* DEPLOY */:\n        feeEstimate = await this.estimateDeployFee(payload, details);\n        break;\n      default:\n        feeEstimate = {\n          gas_consumed: 0n,\n          gas_price: 0n,\n          overall_fee: ZERO,\n          unit: \"FRI\",\n          suggestedMaxFee: ZERO,\n          resourceBounds: estimateFeeToBounds(ZERO),\n          data_gas_consumed: 0n,\n          data_gas_price: 0n\n        };\n        break;\n    }\n    return feeEstimate;\n  }\n  async buildInvocation(call, details) {\n    const calldata = getExecuteCalldata(call, await this.getCairoVersion());\n    const signature = !details.skipValidate ? await this.signer.signTransaction(call, details) : [];\n    return {\n      ...v3Details(details),\n      contractAddress: this.address,\n      calldata,\n      signature\n    };\n  }\n  async buildDeclarePayload(payload, details) {\n    const { classHash, contract, compiledClassHash } = extractContractHashes(payload);\n    const compressedCompiledContract = parseContract(contract);\n    if (typeof compiledClassHash === \"undefined\" && (details.version === api_exports.ETransactionVersion3.F3 || details.version === api_exports.ETransactionVersion3.V3)) {\n      throw Error(\"V3 Transaction work with Cairo1 Contracts and require compiledClassHash\");\n    }\n    const signature = !details.skipValidate ? await this.signer.signDeclareTransaction({\n      ...details,\n      ...v3Details(details),\n      classHash,\n      compiledClassHash,\n      // TODO: TS, cast because optional for v2 and required for v3, thrown if not present\n      senderAddress: details.walletAddress\n    }) : [];\n    return {\n      senderAddress: details.walletAddress,\n      signature,\n      contract: compressedCompiledContract,\n      compiledClassHash\n    };\n  }\n  async buildAccountDeployPayload({\n    classHash,\n    addressSalt = 0,\n    constructorCalldata = [],\n    contractAddress: providedContractAddress\n  }, details) {\n    const compiledCalldata = CallData.compile(constructorCalldata);\n    const contractAddress = providedContractAddress ?? calculateContractAddressFromHash(addressSalt, classHash, compiledCalldata, 0);\n    const signature = !details.skipValidate ? await this.signer.signDeployAccountTransaction({\n      ...details,\n      ...v3Details(details),\n      classHash,\n      contractAddress,\n      addressSalt,\n      constructorCalldata: compiledCalldata\n    }) : [];\n    return {\n      ...v3Details(details),\n      classHash,\n      addressSalt,\n      constructorCalldata: compiledCalldata,\n      signature\n    };\n  }\n  buildUDCContractPayload(payload) {\n    const calls = [].concat(payload).map((it) => {\n      const {\n        classHash,\n        salt = \"0\",\n        unique = true,\n        constructorCalldata = []\n      } = it;\n      const compiledConstructorCallData = CallData.compile(constructorCalldata);\n      return {\n        contractAddress: UDC.ADDRESS,\n        entrypoint: UDC.ENTRYPOINT,\n        calldata: [\n          classHash,\n          salt,\n          toCairoBool(unique),\n          compiledConstructorCallData.length,\n          ...compiledConstructorCallData\n        ]\n      };\n    });\n    return calls;\n  }\n  async accountInvocationsFactory(invocations, details) {\n    const { nonce, blockIdentifier, skipValidate = true } = details;\n    const safeNonce = await this.getNonceSafe(nonce);\n    const chainId = await this.getChainId();\n    const versions = details.versions.map((it) => toTransactionVersion(it));\n    const tx0Payload = \"payload\" in invocations[0] ? invocations[0].payload : invocations[0];\n    const cairoVersion = invocations[0].type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */ ? await this.getCairoVersion(tx0Payload.classHash) : await this.getCairoVersion();\n    return Promise.all(\n      [].concat(invocations).map(async (transaction, index) => {\n        const txPayload = \"payload\" in transaction ? transaction.payload : transaction;\n        const signerDetails = {\n          ...v3Details(details),\n          walletAddress: this.address,\n          nonce: toBigInt(Number(safeNonce) + index),\n          maxFee: ZERO,\n          chainId,\n          cairoVersion,\n          version: \"\",\n          skipValidate\n        };\n        const common = {\n          type: transaction.type,\n          nonce: toBigInt(Number(safeNonce) + index),\n          blockIdentifier,\n          version: \"\"\n        };\n        if (transaction.type === \"INVOKE_FUNCTION\" /* INVOKE */) {\n          const versionX = reduceV2(versions[1]);\n          signerDetails.version = versionX;\n          common.version = versionX;\n          const payload = await this.buildInvocation(\n            [].concat(txPayload),\n            signerDetails\n          );\n          return {\n            ...common,\n            ...payload\n          };\n        }\n        if (transaction.type === \"DEPLOY\" /* DEPLOY */) {\n          const versionX = reduceV2(versions[1]);\n          signerDetails.version = versionX;\n          common.version = versionX;\n          const calls = this.buildUDCContractPayload(txPayload);\n          const payload = await this.buildInvocation(calls, signerDetails);\n          return {\n            ...common,\n            ...payload,\n            type: \"INVOKE_FUNCTION\" /* INVOKE */\n          };\n        }\n        if (transaction.type === \"DECLARE\" /* DECLARE */) {\n          const versionX = !isSierra(txPayload.contract) ? versions[0] : versions[1];\n          signerDetails.version = versionX;\n          common.version = versionX;\n          const payload = await this.buildDeclarePayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload\n          };\n        }\n        if (transaction.type === \"DEPLOY_ACCOUNT\" /* DEPLOY_ACCOUNT */) {\n          const versionX = reduceV2(versions[1]);\n          signerDetails.version = versionX;\n          common.version = versionX;\n          const payload = await this.buildAccountDeployPayload(txPayload, signerDetails);\n          return {\n            ...common,\n            ...payload\n          };\n        }\n        throw Error(`accountInvocationsFactory: unsupported transaction type: ${transaction}`);\n      })\n    );\n  }\n  async getStarkName(address = this.address, StarknetIdContract2) {\n    return super.getStarkName(address, StarknetIdContract2);\n  }\n};\n\n// src/account/interface.ts\nvar AccountInterface = class extends ProviderInterface {\n};\n\n// src/wallet/connect.ts\nvar connect_exports = {};\n__export(connect_exports, {\n  addDeclareTransaction: () => addDeclareTransaction,\n  addInvokeTransaction: () => addInvokeTransaction,\n  addStarknetChain: () => addStarknetChain,\n  deploymentData: () => deploymentData,\n  getPermissions: () => getPermissions,\n  onAccountChange: () => onAccountChange,\n  onNetworkChanged: () => onNetworkChanged,\n  requestAccounts: () => requestAccounts,\n  requestChainId: () => requestChainId,\n  signMessage: () => signMessage,\n  supportedSpecs: () => supportedSpecs,\n  switchStarknetChain: () => switchStarknetChain,\n  watchAsset: () => watchAsset\n});\nfunction requestAccounts(swo, silent_mode = false) {\n  return swo.request({\n    type: \"wallet_requestAccounts\",\n    params: {\n      silent_mode\n    }\n  });\n}\nfunction getPermissions(swo) {\n  return swo.request({ type: \"wallet_getPermissions\" });\n}\nfunction watchAsset(swo, asset) {\n  return swo.request({\n    type: \"wallet_watchAsset\",\n    params: asset\n  });\n}\nfunction addStarknetChain(swo, chain) {\n  return swo.request({\n    type: \"wallet_addStarknetChain\",\n    params: chain\n  });\n}\nfunction switchStarknetChain(swo, chainId) {\n  return swo.request({\n    type: \"wallet_switchStarknetChain\",\n    params: {\n      chainId\n    }\n  });\n}\nfunction requestChainId(swo) {\n  return swo.request({ type: \"wallet_requestChainId\" });\n}\nfunction deploymentData(swo) {\n  return swo.request({ type: \"wallet_deploymentData\" });\n}\nfunction addInvokeTransaction(swo, params) {\n  return swo.request({\n    type: \"wallet_addInvokeTransaction\",\n    params\n  });\n}\nfunction addDeclareTransaction(swo, params) {\n  return swo.request({\n    type: \"wallet_addDeclareTransaction\",\n    params\n  });\n}\nfunction signMessage(swo, typedData) {\n  return swo.request({\n    type: \"wallet_signTypedData\",\n    params: typedData\n  });\n}\nfunction supportedSpecs(swo) {\n  return swo.request({ type: \"wallet_supportedSpecs\" });\n}\nfunction onAccountChange(swo, callback) {\n  swo.on(\"accountsChanged\", callback);\n}\nfunction onNetworkChanged(swo, callback) {\n  swo.on(\"networkChanged\", callback);\n}\n\n// src/wallet/account.ts\nvar WalletAccount = class extends Account {\n  address = \"\";\n  walletProvider;\n  constructor(providerOrOptions, walletProvider, cairoVersion) {\n    super(providerOrOptions, \"\", \"\", cairoVersion);\n    this.walletProvider = walletProvider;\n    this.walletProvider.on(\"accountsChanged\", (res) => {\n      if (!res)\n        return;\n      this.address = res[0].toLowerCase();\n    });\n    this.walletProvider.on(\"networkChanged\", (res) => {\n      if (!res)\n        return;\n      this.channel.setChainId(res);\n    });\n    walletProvider.request({\n      type: \"wallet_requestAccounts\",\n      params: {\n        silent_mode: false\n      }\n    }).then((res) => {\n      this.address = res[0].toLowerCase();\n    });\n  }\n  /**\n   * WALLET EVENTS\n   */\n  onAccountChange(callback) {\n    onAccountChange(this.walletProvider, callback);\n  }\n  onNetworkChanged(callback) {\n    onNetworkChanged(this.walletProvider, callback);\n  }\n  /**\n   * WALLET SPECIFIC METHODS\n   */\n  requestAccounts(silentMode = false) {\n    return requestAccounts(this.walletProvider, silentMode);\n  }\n  getPermissions() {\n    return getPermissions(this.walletProvider);\n  }\n  switchStarknetChain(chainId) {\n    return switchStarknetChain(this.walletProvider, chainId);\n  }\n  watchAsset(asset) {\n    return watchAsset(this.walletProvider, asset);\n  }\n  addStarknetChain(chain) {\n    return addStarknetChain(this.walletProvider, chain);\n  }\n  /**\n   * ACCOUNT METHODS\n   */\n  execute(calls) {\n    const txCalls = [].concat(calls).map((it) => {\n      const { contractAddress, entrypoint, calldata } = it;\n      return {\n        contract_address: contractAddress,\n        entry_point: entrypoint,\n        calldata\n      };\n    });\n    const params = {\n      calls: txCalls\n    };\n    return addInvokeTransaction(this.walletProvider, params);\n  }\n  declare(payload) {\n    const declareContractPayload = extractContractHashes(payload);\n    const pContract = payload.contract;\n    const cairo1Contract = {\n      ...pContract,\n      abi: stringify2(pContract.abi)\n    };\n    if (!declareContractPayload.compiledClassHash) {\n      throw Error(\"compiledClassHash is required\");\n    }\n    const params = {\n      compiled_class_hash: declareContractPayload.compiledClassHash,\n      contract_class: cairo1Contract\n    };\n    return addDeclareTransaction(this.walletProvider, params);\n  }\n  async deploy(payload) {\n    const { calls, addresses } = buildUDCCall(payload, this.address);\n    const invokeResponse = await this.execute(calls);\n    return {\n      ...invokeResponse,\n      contract_address: addresses\n    };\n  }\n  signMessage(typedData) {\n    return signMessage(this.walletProvider, typedData);\n  }\n  // TODO: MISSING ESTIMATES\n};\n\n// src/contract/default.ts\nvar splitArgsAndOptions = (args) => {\n  const options = [\n    \"blockIdentifier\",\n    \"parseRequest\",\n    \"parseResponse\",\n    \"formatResponse\",\n    \"maxFee\",\n    \"nonce\",\n    \"signature\",\n    \"addressSalt\"\n  ];\n  const lastArg = args[args.length - 1];\n  if (typeof lastArg === \"object\" && options.some((x) => x in lastArg)) {\n    return { args, options: args.pop() };\n  }\n  return { args };\n};\nfunction buildCall(contract, functionAbi) {\n  return async function(...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.call(functionAbi.name, params.args, {\n      parseRequest: true,\n      parseResponse: true,\n      ...params.options\n    });\n  };\n}\nfunction buildInvoke(contract, functionAbi) {\n  return async function(...args) {\n    const params = splitArgsAndOptions(args);\n    return contract.invoke(functionAbi.name, params.args, {\n      parseRequest: true,\n      ...params.options\n    });\n  };\n}\nfunction buildDefault(contract, functionAbi) {\n  if (functionAbi.stateMutability === \"view\" || functionAbi.state_mutability === \"view\") {\n    return buildCall(contract, functionAbi);\n  }\n  return buildInvoke(contract, functionAbi);\n}\nfunction buildPopulate(contract, functionAbi) {\n  return function(...args) {\n    return contract.populate(functionAbi.name, args);\n  };\n}\nfunction buildEstimate(contract, functionAbi) {\n  return function(...args) {\n    return contract.estimate(functionAbi.name, args);\n  };\n}\nfunction getCalldata(args, callback) {\n  if (Array.isArray(args) && \"__compiled__\" in args)\n    return args;\n  if (Array.isArray(args) && Array.isArray(args[0]) && \"__compiled__\" in args[0])\n    return args[0];\n  return callback();\n}\nvar Contract = class {\n  abi;\n  address;\n  providerOrAccount;\n  deployTransactionHash;\n  structs;\n  events;\n  functions;\n  callStatic;\n  populateTransaction;\n  estimateFee;\n  callData;\n  /**\n   * Contract class to handle contract methods\n   *\n   * @param abi - Abi of the contract object\n   * @param address (optional) - address to connect to\n   * @param providerOrAccount (optional) - Provider or Account to attach to\n   */\n  constructor(abi, address, providerOrAccount = defaultProvider) {\n    this.address = address && address.toLowerCase();\n    this.providerOrAccount = providerOrAccount;\n    this.callData = new CallData(abi);\n    this.structs = CallData.getAbiStruct(abi);\n    this.events = getAbiEvents(abi);\n    const parser = createAbiParser(abi);\n    this.abi = parser.getLegacyFormat();\n    const options = { enumerable: true, value: {}, writable: false };\n    Object.defineProperties(this, {\n      functions: { enumerable: true, value: {}, writable: false },\n      callStatic: { enumerable: true, value: {}, writable: false },\n      populateTransaction: { enumerable: true, value: {}, writable: false },\n      estimateFee: { enumerable: true, value: {}, writable: false }\n    });\n    this.abi.forEach((abiElement) => {\n      if (abiElement.type !== \"function\")\n        return;\n      const signature = abiElement.name;\n      if (!this[signature]) {\n        Object.defineProperty(this, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.functions[signature]) {\n        Object.defineProperty(this.functions, signature, {\n          ...options,\n          value: buildDefault(this, abiElement)\n        });\n      }\n      if (!this.callStatic[signature]) {\n        Object.defineProperty(this.callStatic, signature, {\n          ...options,\n          value: buildCall(this, abiElement)\n        });\n      }\n      if (!this.populateTransaction[signature]) {\n        Object.defineProperty(this.populateTransaction, signature, {\n          ...options,\n          value: buildPopulate(this, abiElement)\n        });\n      }\n      if (!this.estimateFee[signature]) {\n        Object.defineProperty(this.estimateFee, signature, {\n          ...options,\n          value: buildEstimate(this, abiElement)\n        });\n      }\n    });\n  }\n  attach(address) {\n    this.address = address;\n  }\n  connect(providerOrAccount) {\n    this.providerOrAccount = providerOrAccount;\n  }\n  async deployed() {\n    if (this.deployTransactionHash) {\n      await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);\n      this.deployTransactionHash = void 0;\n    }\n    return this;\n  }\n  async call(method, args = [], {\n    parseRequest = true,\n    parseResponse = true,\n    formatResponse = void 0,\n    blockIdentifier = void 0\n  } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"CALL\" /* CALL */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    return this.providerOrAccount.callContract(\n      {\n        contractAddress: this.address,\n        calldata,\n        entrypoint: method\n      },\n      blockIdentifier\n    ).then((it) => {\n      if (!parseResponse) {\n        return it;\n      }\n      if (formatResponse) {\n        return this.callData.format(method, it, formatResponse);\n      }\n      return this.callData.parse(method, it);\n    });\n  }\n  invoke(method, args = [], { parseRequest = true, maxFee, nonce, signature } = {}) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    const calldata = getCalldata(args, () => {\n      if (parseRequest) {\n        this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n        return this.callData.compile(method, args);\n      }\n      console.warn(\"Invoke skipped parsing but provided rawArgs, possible malfunction request\");\n      return args;\n    });\n    const invocation = {\n      contractAddress: this.address,\n      calldata,\n      entrypoint: method\n    };\n    if (\"execute\" in this.providerOrAccount) {\n      return this.providerOrAccount.execute(invocation, void 0, {\n        maxFee,\n        nonce\n      });\n    }\n    if (!nonce)\n      throw new Error(`Nonce is required when invoking a function without an account`);\n    console.warn(`Invoking ${method} without an account. This will not work on a public node.`);\n    return this.providerOrAccount.invokeFunction(\n      {\n        ...invocation,\n        signature\n      },\n      {\n        nonce\n      }\n    );\n  }\n  async estimate(method, args = []) {\n    assert(this.address !== null, \"contract is not connected to an address\");\n    if (!getCalldata(args, () => false)) {\n      this.callData.validate(\"INVOKE\" /* INVOKE */, method, args);\n    }\n    const invocation = this.populate(method, args);\n    if (\"estimateInvokeFee\" in this.providerOrAccount) {\n      return this.providerOrAccount.estimateInvokeFee(invocation);\n    }\n    throw Error(\"Contract must be connected to the account contract to estimate\");\n  }\n  populate(method, args = []) {\n    const calldata = getCalldata(args, () => this.callData.compile(method, args));\n    return {\n      contractAddress: this.address,\n      entrypoint: method,\n      calldata\n    };\n  }\n  parseEvents(receipt) {\n    return parseEvents(\n      receipt.events?.filter(\n        (event) => cleanHex(event.from_address) === cleanHex(this.address),\n        []\n      ) || [],\n      this.events,\n      this.structs,\n      CallData.getAbiEnum(this.abi)\n    );\n  }\n  isCairo1() {\n    return cairo_exports.isCairo1Abi(this.abi);\n  }\n  async getVersion() {\n    return this.providerOrAccount.getContractVersion(this.address);\n  }\n  typedv2(tAbi) {\n    return this;\n  }\n};\n\n// src/contract/interface.ts\nvar ContractInterface = class {\n  functions;\n  callStatic;\n  populateTransaction;\n  estimateFee;\n};\n\n// src/contract/contractFactory.ts\nvar ContractFactory = class {\n  compiledContract;\n  account;\n  abi;\n  classHash;\n  casm;\n  compiledClassHash;\n  CallData;\n  /**\n   * @param params CFParams\n   *  - compiledContract: CompiledContract;\n   *  - account: AccountInterface;\n   *  - casm?: CairoAssembly;\n   *  - classHash?: string;\n   *  - compiledClassHash?: string;\n   *  - abi?: Abi;\n   */\n  constructor(params) {\n    this.compiledContract = params.compiledContract;\n    this.account = params.account;\n    this.casm = params.casm;\n    this.abi = params.abi ?? params.compiledContract.abi;\n    this.classHash = params.classHash;\n    this.compiledClassHash = params.compiledClassHash;\n    this.CallData = new CallData(this.abi);\n  }\n  /**\n   * Deploys contract and returns new instance of the Contract\n   *\n   * If contract is not declared it will first declare it, and then deploy\n   */\n  async deploy(...args) {\n    const { args: param, options = { parseRequest: true } } = splitArgsAndOptions(args);\n    const constructorCalldata = getCalldata(param, () => {\n      if (options.parseRequest) {\n        this.CallData.validate(\"DEPLOY\" /* DEPLOY */, \"constructor\", param);\n        return this.CallData.compile(\"constructor\", param);\n      }\n      console.warn(\"Call skipped parsing but provided rawArgs, possible malfunction request\");\n      return param;\n    });\n    const {\n      deploy: { contract_address, transaction_hash }\n    } = await this.account.declareAndDeploy({\n      contract: this.compiledContract,\n      casm: this.casm,\n      classHash: this.classHash,\n      compiledClassHash: this.compiledClassHash,\n      constructorCalldata,\n      salt: options.addressSalt\n    });\n    assert(Boolean(contract_address), \"Deployment of the contract failed\");\n    const contractInstance = new Contract(\n      this.compiledContract.abi,\n      contract_address,\n      this.account\n    );\n    contractInstance.deployTransactionHash = transaction_hash;\n    return contractInstance;\n  }\n  /**\n   * Attaches to new Account\n   *\n   * @param account - new Account to attach to\n   */\n  connect(account) {\n    this.account = account;\n    return this;\n  }\n  /**\n   * Attaches current abi and account to the new address\n   */\n  attach(address) {\n    return new Contract(this.abi, address, this.account);\n  }\n  // ethers.js' getDeployTransaction can't be supported as it requires the account or signer to return a signed transaction which is not possible with the current implementation\n};\n\n// src/utils/responseParser/interface.ts\nvar ResponseParser = class {\n};\n\n// src/utils/address.ts\n\nfunction addAddressPadding(address) {\n  const hex = toHex(addHexPrefix(address.toString()));\n  const padded = removeHexPrefix(hex).padStart(64, \"0\");\n  return addHexPrefix(padded);\n}\nfunction validateAndParseAddress(address) {\n  const result = addAddressPadding(address);\n  if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {\n    throw new Error(\"Invalid Address Format\");\n  }\n  assertInRange(result, ZERO, ADDR_BOUND - 1n, \"Starknet Address\");\n  return result;\n}\nfunction getChecksumAddress(address) {\n  const chars = removeHexPrefix(validateAndParseAddress(address)).toLowerCase().split(\"\");\n  const hex = removeHexPrefix(keccakBn(address));\n  const hashed = (0,_noble_curves_abstract_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(hex.padStart(64, \"0\"));\n  for (let i = 0; i < chars.length; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      chars[i] = chars[i].toUpperCase();\n    }\n    if ((hashed[i >> 1] & 15) >= 8) {\n      chars[i + 1] = chars[i + 1].toUpperCase();\n    }\n  }\n  return addHexPrefix(chars.join(\"\"));\n}\nfunction validateChecksumAddress(address) {\n  return getChecksumAddress(address) === address;\n}\n\n// src/utils/url.ts\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\nvar localhostDomainRE = /^localhost[:?\\d]*(?:[^:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s.]+\\.\\S{2,}$/;\nfunction isUrl(s) {\n  if (!s) {\n    return false;\n  }\n  if (typeof s !== \"string\") {\n    return false;\n  }\n  const match = s.match(protocolAndDomainRE);\n  if (!match) {\n    return false;\n  }\n  const everythingAfterProtocol = match[1];\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n  return false;\n}\nfunction buildUrl(baseUrl, defaultPath, urlOrPath) {\n  return isUrl(urlOrPath) ? urlOrPath : url_join__WEBPACK_IMPORTED_MODULE_15__(baseUrl, urlOrPath ?? defaultPath);\n}\n\n// src/index.ts\nvar number = num_exports;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/starknet/dist/index.mjs\n");

/***/ })

};
;